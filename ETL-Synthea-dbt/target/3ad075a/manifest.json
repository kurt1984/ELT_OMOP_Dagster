{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v10.json", "dbt_version": "1.6.3", "generated_at": "2023-09-25T12:51:55.335105Z", "invocation_id": "d4b267cd-478f-4935-b6f1-537fdf5f9db2", "env": {}, "project_name": "etl_synthea_dbt", "project_id": "cf10a0cfe468fe825c49418fd93fec8c", "user_id": null, "send_anonymous_usage_stats": true, "adapter_type": "duckdb"}, "nodes": {"model.etl_synthea_dbt.cdm_source": {"database": "dbt", "schema": "main", "name": "cdm_source", "resource_type": "model", "package_name": "etl_synthea_dbt", "path": "omop/cdm_source.sql", "original_file_path": "models/omop/cdm_source.sql", "unique_id": "model.etl_synthea_dbt.cdm_source", "fqn": ["etl_synthea_dbt", "omop", "cdm_source"], "alias": "cdm_source", "checksum": {"name": "sha256", "checksum": "7dfd1aafb6e40e73c3ee062bbe9b9f91735e1c8a6afb4f0de072cd64421e1bdd"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1695616066.2714012, "relation_name": "\"dbt\".\"main\".\"cdm_source\"", "raw_code": "SELECT\n    '@cdm_source_name' AS cdm_source_name,\n    '@cdm_source_abbreviation' AS cdm_source_abbreviation,\n    '@cdm_holder' AS cdm_holder,\n    '@source_description' AS source_description,\n    'https://synthetichealth.github.io/synthea/' AS source_documentation_reference,\n    'https://github.com/OHDSI/ETL-Synthea' AS cdm_etl_reference,\n    now() AS source_release_date, -- NB: Set this value to the day the source data was pulled\n    now() AS cdm_release_date,\n    '@cdm_version' AS cdm_version,\n    vocabulary_version\nFROM {{ source('vocab', 'vocabulary') }}\nWHERE vocabulary_id = 'None'", "language": "sql", "refs": [], "sources": [["vocab", "vocabulary"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.etl_synthea_dbt.vocab.vocabulary"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.etl_synthea_dbt.condition_era": {"database": "dbt", "schema": "main", "name": "condition_era", "resource_type": "model", "package_name": "etl_synthea_dbt", "path": "omop/condition_era.sql", "original_file_path": "models/omop/condition_era.sql", "unique_id": "model.etl_synthea_dbt.condition_era", "fqn": ["etl_synthea_dbt", "omop", "condition_era"], "alias": "condition_era", "checksum": {"name": "sha256", "checksum": "d306f544571a23a3cb6db1cd72b00d04f93007e9c608a93c503c1edeec1da3ff"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"condition_era_id": {"name": "condition_era_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "person_id": {"name": "person_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "condition_concept_id": {"name": "condition_concept_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "condition_era_start_date": {"name": "condition_era_start_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "condition_era_end_date": {"name": "condition_era_end_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "etl_synthea_dbt://models/omop/omop.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1695616067.375558, "relation_name": "\"dbt\".\"main\".\"condition_era\"", "raw_code": "SELECT\n    condition_era_id,\n    person_id,\n    condition_concept_id,\n    condition_era_start_date,\n    condition_era_end_date,\n    condition_occurrence_count \nFROM {{ ref('tmp_ce') }}", "language": "sql", "refs": [{"name": "tmp_ce", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.etl_synthea_dbt.tmp_ce"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.etl_synthea_dbt.condition_occurrence": {"database": "dbt", "schema": "main", "name": "condition_occurrence", "resource_type": "model", "package_name": "etl_synthea_dbt", "path": "omop/condition_occurrence.sql", "original_file_path": "models/omop/condition_occurrence.sql", "unique_id": "model.etl_synthea_dbt.condition_occurrence", "fqn": ["etl_synthea_dbt", "omop", "condition_occurrence"], "alias": "condition_occurrence", "checksum": {"name": "sha256", "checksum": "245277534acb54229b5f4134e57af76a526202aaca0363c756c6222d29aaf1a4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["STEM_tbl"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["STEM_tbl"], "description": "", "columns": {"condition_occurrence_id": {"name": "condition_occurrence_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "person_id": {"name": "person_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "condition_concept_id": {"name": "condition_concept_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "condition_start_date": {"name": "condition_start_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "condition_type_concept_id": {"name": "condition_type_concept_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "condition_status_source_value": {"name": "condition_status_source_value", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "provider_id": {"name": "provider_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visit_occurrence_id": {"name": "visit_occurrence_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visit_detail_id": {"name": "visit_detail_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "condition_source_concept_id": {"name": "condition_source_concept_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "etl_synthea_dbt://models/omop/omop.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": ["STEM_tbl"]}, "created_at": 1695616067.2372813, "relation_name": "\"dbt\".\"main\".\"condition_occurrence\"", "raw_code": "{{ config(\n    tags = 'STEM_tbl',\n) }} \n\nSELECT\n    row_number()OVER(ORDER BY c.person_id) AS condition_occurrence_id,\n    c.person_id AS person_id,\n    srctostdvm.target_concept_id AS condition_concept_id,\n    c.start AS condition_start_date,\n    c.start AS condition_start_datetime,\n    c.stop AS condition_end_date,\n    c.stop AS condition_end_datetime,\n    38000175 AS condition_type_concept_id,\n    cast(NULL AS varchar) AS stop_reason,\n    cast(NULL AS integer) AS provider_id,\n    c.visit_occurrence_id_new AS visit_occurrence_id,\n    c.visit_occurrence_id_new + 1000000 AS visit_detail_id,\n    c.code AS condition_source_value,\n    cast(srctosrcvm.source_concept_id as integer) AS condition_source_concept_id,\n    cast(NULL as integer) AS condition_status_source_value,\n    0 AS condition_status_concept_id\nFROM {{ ref('stg_condition_occurrence') }} AS c\n{{ map_src_to_std_vocab(alias=\"srctostdvm\", from=\"c\", target_domain_id=\"Condition\", target_vocabulary_id=\"SNOMED\", source_vocabulary_id=\"SNOMED\") }}\n{{ map_src_to_src_vocab(alias=\"srctosrcvm\", from=\"c\", source_vocabulary_id=\"SNOMED\", source_domain_id=\"Condition\") }}", "language": "sql", "refs": [{"name": "stg_condition_occurrence", "package": null, "version": null}, {"name": "source_to_standard_vocab_map", "package": null, "version": null}, {"name": "source_to_source_vocab_map", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.etl_synthea_dbt.map_src_to_std_vocab", "macro.etl_synthea_dbt.map_src_to_src_vocab"], "nodes": ["model.etl_synthea_dbt.stg_condition_occurrence", "model.etl_synthea_dbt.source_to_standard_vocab_map", "model.etl_synthea_dbt.source_to_source_vocab_map"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.etl_synthea_dbt.death": {"database": "dbt", "schema": "main", "name": "death", "resource_type": "model", "package_name": "etl_synthea_dbt", "path": "omop/death.sql", "original_file_path": "models/omop/death.sql", "unique_id": "model.etl_synthea_dbt.death", "fqn": ["etl_synthea_dbt", "omop", "death"], "alias": "death", "checksum": {"name": "sha256", "checksum": "ece065ed322d7f061ddea48aec3da43f3be0c7bb152012ba42067ba4d6cc951e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1695616066.4449325, "relation_name": "\"dbt\".\"main\".\"death\"", "raw_code": "-- NB:\n-- We observe death records in both the encounters.csv and observations.csv file.\n-- To find the death records in observations, use code = '69453-9'. This is a LOINC code \n-- that represents an observation of the US standard certificate of death.  To find the \n-- corresponding cause of death, we would need to join to conditions on patient and description \n-- (specifically conditions.description = observations.value).  Instead, we can use the encounters table. \n-- Encounters.code = '308646001' is the SNOMED observation of death certification.\n-- The reasoncode column is the SNOMED code for the condition that caused death, so by using encounters\n-- we get both the code for the death certification and the corresponding cause of death. \n\n\nSELECT\n    p.person_id AS person_id,\n    e.start AS death_date,\n    e.start AS death_datetime,\n    38003566 AS death_type_concept_id,\n    srctostdvm.target_concept_id AS cause_concept_id, \n    e.reasoncode AS cause_source_value,\n    srctostdvm.source_concept_id AS cause_source_concept_id \nFROM {{ source('synthea', 'encounters') }} AS e\nINNER JOIN {{ ref('source_to_standard_vocab_map') }} AS srctostdvm\n    ON srctostdvm.source_code = e.reasoncode\n       AND srctostdvm.target_domain_id = 'Condition'\n       AND srctostdvm.source_domain_id = 'Condition'\n       AND srctostdvm.target_vocabulary_id = 'SNOMED'\n       AND srctostdvm.source_vocabulary_id = 'SNOMED'\n       AND srctostdvm.target_standard_concept = 'S'\n       AND srctostdvm.target_invalid_reason IS NULL\nINNER JOIN {{ ref('person') }} AS p\n    ON e.patient = p.person_source_value\nWHERE e.code = '308646001'", "language": "sql", "refs": [{"name": "source_to_standard_vocab_map", "package": null, "version": null}, {"name": "person", "package": null, "version": null}], "sources": [["synthea", "encounters"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.etl_synthea_dbt.synthea.encounters", "model.etl_synthea_dbt.source_to_standard_vocab_map", "model.etl_synthea_dbt.person"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.etl_synthea_dbt.device_exposure": {"database": "dbt", "schema": "main", "name": "device_exposure", "resource_type": "model", "package_name": "etl_synthea_dbt", "path": "omop/device_exposure.sql", "original_file_path": "models/omop/device_exposure.sql", "unique_id": "model.etl_synthea_dbt.device_exposure", "fqn": ["etl_synthea_dbt", "omop", "device_exposure"], "alias": "device_exposure", "checksum": {"name": "sha256", "checksum": "e6ce7c66f116e3a48f07d50e83e9b2102d606c64d4ad8b0027d5a2a2bbebfd2d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["STEM_tbl"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["STEM_tbl"], "description": "", "columns": {"device_exposure_id": {"name": "device_exposure_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "person_id": {"name": "person_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "device_concept_id": {"name": "device_concept_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "device_exposure_start_date": {"name": "device_exposure_start_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "device_type_concept_id": {"name": "device_type_concept_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "provider_id": {"name": "provider_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visit_occurrence_id": {"name": "visit_occurrence_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visit_detail_id": {"name": "visit_detail_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "device_source_concept_id": {"name": "device_source_concept_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "unit_concept_id": {"name": "unit_concept_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "unit_source_concept_id": {"name": "unit_source_concept_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "etl_synthea_dbt://models/omop/omop.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": "STEM_tbl"}, "created_at": 1695616067.3041165, "relation_name": "\"dbt\".\"main\".\"device_exposure\"", "raw_code": "{{ config(\n    tags = 'STEM_tbl',\n) }} \n\nSELECT\n    row_number()OVER(ORDER BY person_id) AS device_exposure_id,\n    p.person_id AS person_id,\n    srctostdvm.target_concept_id AS device_concept_id,\n    d.start AS device_exposure_start_date,\n    d.start AS device_exposure_start_datetime,\n    d.stop AS device_exposure_end_date,\n    d.stop AS device_exposure_end_datetime,\n    38000267 AS device_type_concept_id,\n    d.udi AS unique_device_id,\n    cast(NULL AS int) AS quantity,\n    pr.provider_id AS provider_id,\n    fv.visit_occurrence_id_new AS visit_occurrence_id,\n    fv.visit_occurrence_id_new + 1000000 AS visit_detail_id,\n    d.code AS device_source_value,\n    srctosrcvm.source_concept_id AS device_source_concept_id,\n    cast(NULL AS int) AS unit_concept_id,\n    NULL AS unit_source_value,\n    cast(NULL AS int) AS unit_source_concept_id\n\nFROM {{ source('synthea', 'devices') }} AS d\nINNER JOIN {{ ref('source_to_standard_vocab_map') }} AS srctostdvm\n    ON srctostdvm.source_code = d.code\n        AND srctostdvm.target_domain_id = 'Device'\n        AND srctostdvm.target_vocabulary_id = 'SNOMED'\n        AND srctostdvm.source_vocabulary_id = 'SNOMED'\n        AND srctostdvm.target_standard_concept = 'S'\n        AND srctostdvm.target_invalid_reason IS NULL\nINNER JOIN {{ ref('source_to_source_vocab_map') }} AS srctosrcvm\n    ON srctosrcvm.source_code = d.code\n        AND srctosrcvm.source_vocabulary_id = 'SNOMED'\nLEFT JOIN {{ ref('final_visit_ids') }} AS fv\n    ON fv.encounter_id = d.encounter\nLEFT JOIN {{ source('synthea', 'encounters') }} AS e\n    ON d.encounter = e.id\n        AND d.patient = e.patient\nLEFT JOIN {{ ref('provider') }} AS pr \n    ON e.provider = pr.provider_source_value\nINNER JOIN {{ ref('person') }} AS p\n    ON p.person_source_value = d.patient", "language": "sql", "refs": [{"name": "source_to_standard_vocab_map", "package": null, "version": null}, {"name": "source_to_source_vocab_map", "package": null, "version": null}, {"name": "final_visit_ids", "package": null, "version": null}, {"name": "provider", "package": null, "version": null}, {"name": "person", "package": null, "version": null}], "sources": [["synthea", "devices"], ["synthea", "encounters"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.etl_synthea_dbt.synthea.devices", "source.etl_synthea_dbt.synthea.encounters", "model.etl_synthea_dbt.source_to_standard_vocab_map", "model.etl_synthea_dbt.source_to_source_vocab_map", "model.etl_synthea_dbt.final_visit_ids", "model.etl_synthea_dbt.provider", "model.etl_synthea_dbt.person"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.etl_synthea_dbt.drug_era": {"database": "dbt", "schema": "main", "name": "drug_era", "resource_type": "model", "package_name": "etl_synthea_dbt", "path": "omop/drug_era.sql", "original_file_path": "models/omop/drug_era.sql", "unique_id": "model.etl_synthea_dbt.drug_era", "fqn": ["etl_synthea_dbt", "omop", "drug_era"], "alias": "drug_era", "checksum": {"name": "sha256", "checksum": "4b2af1cf559ff0f9551c0701286e242711318e0d517e34396b4a55f764d878b7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"drug_era_id": {"name": "drug_era_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "person_id": {"name": "person_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "drug_concept_id": {"name": "drug_concept_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "drug_era_start_date": {"name": "drug_era_start_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "drug_era_end_date": {"name": "drug_era_end_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "etl_synthea_dbt://models/omop/omop.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1695616067.3651688, "relation_name": "\"dbt\".\"main\".\"drug_era\"", "raw_code": "SELECT\n    drug_era_id,\n    person_id,\n    drug_concept_id,\n    drug_era_start_date,\n    drug_era_end_date,\n    drug_exposure_count,\n    gap_days \nFROM {{ ref('tmp_de') }}", "language": "sql", "refs": [{"name": "tmp_de", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.etl_synthea_dbt.tmp_de"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.etl_synthea_dbt.drug_exposure": {"database": "dbt", "schema": "main", "name": "drug_exposure", "resource_type": "model", "package_name": "etl_synthea_dbt", "path": "omop/drug_exposure.sql", "original_file_path": "models/omop/drug_exposure.sql", "unique_id": "model.etl_synthea_dbt.drug_exposure", "fqn": ["etl_synthea_dbt", "omop", "drug_exposure"], "alias": "drug_exposure", "checksum": {"name": "sha256", "checksum": "065803d351929a68398c9a7080c0db8bd8cf6cb7ab1209a04ca3505ecd51797f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["STEM_tbl"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["STEM_tbl"], "description": "", "columns": {"drug_exposure_id": {"name": "drug_exposure_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "person_id": {"name": "person_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "drug_concept_id": {"name": "drug_concept_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "drug_exposure_start_date": {"name": "drug_exposure_start_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "drug_exposure_end_date": {"name": "drug_exposure_end_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "drug_type_concept_id": {"name": "drug_type_concept_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "route_concept_id": {"name": "route_concept_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "provider_id": {"name": "provider_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visit_occurrence_id": {"name": "visit_occurrence_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visit_detail_id": {"name": "visit_detail_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "drug_source_concept_id": {"name": "drug_source_concept_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "etl_synthea_dbt://models/omop/omop.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": "STEM_tbl"}, "created_at": 1695616067.2634375, "relation_name": "\"dbt\".\"main\".\"drug_exposure\"", "raw_code": "{{ config(\n    tags = 'STEM_tbl',\n) }} \n\nSELECT\n    row_number()OVER(ORDER BY person_id) AS drug_exposure_id,\n    person_id,\n    drug_concept_id,\n    drug_exposure_start_date,\n    drug_exposure_start_datetime,\n    drug_exposure_end_date,\n    drug_exposure_end_datetime,\n    verbatim_end_date,\n    drug_type_concept_id,\n    stop_reason,\n    refills,\n    quantity,\n    days_supply,\n    sig,\n    route_concept_id,\n    lot_number,\n    provider_id,\n    visit_occurrence_id,\n    visit_detail_id,\n    drug_source_value,\n    drug_source_concept_id,\n    route_source_value,\n    dose_unit_source_value\nFROM (\n\n\n    SELECT\n        p.person_id AS person_id,\n        srctostdvm.target_concept_id AS drug_concept_id,\n        m.start AS drug_exposure_start_date,\n        m.start AS drug_exposure_start_datetime,\n        coalesce(m.stop, m.start) AS drug_exposure_end_date,\n        coalesce(m.stop, m.start) AS drug_exposure_end_datetime,\n        m.stop AS verbatim_end_date,\n        32869 AS drug_type_concept_id,\n        cast(NULL AS varchar) AS stop_reason,\n        0 AS refills,\n        0 AS quantity,\n        coalesce(m.stop::date - m.start::date, 0) AS days_supply,\n        cast(NULL AS varchar) AS sig,\n        0 AS route_concept_id,\n        0 AS lot_number,\n        pr.provider_id AS provider_id,\n        fv.visit_occurrence_id_new AS visit_occurrence_id,\n        fv.visit_occurrence_id_new + 1000000 AS visit_detail_id,\n        m.code AS drug_source_value,\n        srctosrcvm.source_concept_id AS drug_source_concept_id,\n        cast(NULL AS varchar) AS route_source_value,\n        cast(NULL AS varchar) AS dose_unit_source_value\n    FROM {{ source('synthea', 'medications') }} AS m\n    INNER JOIN {{ ref('source_to_standard_vocab_map') }} AS srctostdvm\n        ON srctostdvm.source_code = m.code\n            AND srctostdvm.target_domain_id = 'Drug'\n            AND srctostdvm.target_vocabulary_id = 'RxNorm'\n            AND srctostdvm.target_standard_concept = 'S'\n            AND srctostdvm.target_invalid_reason IS NULL\n    INNER JOIN {{ ref('source_to_source_vocab_map') }} AS srctosrcvm\n        ON srctosrcvm.source_code = m.code\n            AND srctosrcvm.source_vocabulary_id = 'RxNorm'\n    LEFT JOIN {{ ref('final_visit_ids') }} AS fv\n        ON fv.encounter_id = m.encounter\n    LEFT JOIN {{ source('synthea', 'encounters') }} AS e\n        ON m.encounter = e.id\n            AND m.patient = e.patient\n    LEFT JOIN {{ ref('provider') }} AS pr \n        ON e.provider = pr.provider_source_value\n    INNER JOIN {{ ref('person') }} AS p\n        ON p.person_source_value = m.patient\n\n    UNION ALL\n\n    SELECT\n        p.person_id AS person_id,\n        srctostdvm.target_concept_id AS drug_concept_id,\n        i.date AS drug_exposure_start_date,\n        i.date AS drug_exposure_start_datetime,\n        i.date AS drug_exposure_end_date,\n        i.date AS drug_exposure_end_datetime,\n        i.date AS verbatim_end_date,\n        32869 AS drug_type_concept_id,\n        cast(NULL AS varchar) AS stop_reason,\n        0 AS refills,\n        0 AS quantity,\n        0 AS days_supply,\n        cast(NULL AS varchar) AS sig,\n        0 AS route_concept_id,\n        0 AS lot_number, \n        pr.provider_id AS provider_id,\n        fv.visit_occurrence_id_new AS visit_occurrence_id,\n        fv.visit_occurrence_id_new + 1000000 AS visit_detail_id,\n        i.code AS drug_source_value,\n        srctosrcvm.source_concept_id AS drug_source_concept_id, \n        cast(NULL AS varchar) AS route_source_value,\n        cast(NULL AS varchar) AS dose_unit_source_value\n    FROM {{ source('synthea', 'immunizations') }} AS i\n    INNER JOIN {{ ref('source_to_standard_vocab_map') }} AS srctostdvm\n        ON srctostdvm.source_code = i.code\n            AND srctostdvm.target_domain_id = 'Drug'\n            AND srctostdvm.target_vocabulary_id = 'CVX'\n            AND srctostdvm.target_standard_concept = 'S'\n            AND srctostdvm.target_invalid_reason IS NULL\n    INNER JOIN {{ ref('source_to_source_vocab_map') }} AS srctosrcvm\n        ON srctosrcvm.source_code = i.code\n            AND srctosrcvm.source_vocabulary_id = 'CVX'\n    LEFT JOIN {{ ref('final_visit_ids') }} AS fv\n        ON fv.encounter_id = i.encounter\n    LEFT JOIN {{ source('synthea', 'encounters') }} AS e\n        ON i.encounter = e.id\n            AND i.patient = e.patient\n    LEFT JOIN {{ ref('provider') }} AS pr \n        ON e.provider = pr.provider_source_value\n    INNER JOIN {{ ref('person') }} AS p\n        ON p.person_source_value = i.patient\n    ) AS tmp", "language": "sql", "refs": [{"name": "source_to_standard_vocab_map", "package": null, "version": null}, {"name": "source_to_source_vocab_map", "package": null, "version": null}, {"name": "final_visit_ids", "package": null, "version": null}, {"name": "provider", "package": null, "version": null}, {"name": "person", "package": null, "version": null}, {"name": "source_to_standard_vocab_map", "package": null, "version": null}, {"name": "source_to_source_vocab_map", "package": null, "version": null}, {"name": "final_visit_ids", "package": null, "version": null}, {"name": "provider", "package": null, "version": null}, {"name": "person", "package": null, "version": null}], "sources": [["synthea", "immunizations"], ["synthea", "medications"], ["synthea", "encounters"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.etl_synthea_dbt.synthea.immunizations", "source.etl_synthea_dbt.synthea.medications", "source.etl_synthea_dbt.synthea.encounters", "model.etl_synthea_dbt.source_to_standard_vocab_map", "model.etl_synthea_dbt.source_to_source_vocab_map", "model.etl_synthea_dbt.final_visit_ids", "model.etl_synthea_dbt.provider", "model.etl_synthea_dbt.person"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.etl_synthea_dbt.observation": {"database": "dbt", "schema": "main", "name": "observation", "resource_type": "model", "package_name": "etl_synthea_dbt", "path": "omop/observation.sql", "original_file_path": "models/omop/observation.sql", "unique_id": "model.etl_synthea_dbt.observation", "fqn": ["etl_synthea_dbt", "omop", "observation"], "alias": "observation", "checksum": {"name": "sha256", "checksum": "debcf93ddcdc863604b0d107648c2c905327d9f1d0b26cd98a02a8de42e023bd"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["STEM_tbl"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["STEM_tbl"], "description": "", "columns": {"observation_id": {"name": "observation_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "person_id": {"name": "person_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "observation_concept_id": {"name": "observation_concept_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "observation_date": {"name": "observation_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "observation_type_concept_id": {"name": "observation_type_concept_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "value_as_concept_id": {"name": "value_as_concept_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "qualifier_concept_id": {"name": "qualifier_concept_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "unit_concept_id": {"name": "unit_concept_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "provider_id": {"name": "provider_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visit_occurrence_id": {"name": "visit_occurrence_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visit_detail_id": {"name": "visit_detail_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "observation_source_concept_id": {"name": "observation_source_concept_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "obs_event_field_concept_id": {"name": "obs_event_field_concept_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "etl_synthea_dbt://models/omop/omop.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": "STEM_tbl"}, "created_at": 1695616067.3475347, "relation_name": "\"dbt\".\"main\".\"observation\"", "raw_code": "{{ config(\n    tags = 'STEM_tbl',\n) }} \n\nSELECT\n    row_number()OVER(ORDER BY person_id) AS observation_id,\n    person_id,\n    observation_concept_id,\n    observation_date,\n    observation_datetime,\n    observation_type_concept_id,\n    value_as_number,\n    value_as_string,\n    value_as_concept_id,\n    qualifier_concept_id,\n    unit_concept_id,\n    provider_id,\n    visit_occurrence_id,\n    visit_detail_id,\n    observation_source_value,\n    observation_source_concept_id,\n    unit_source_value,\n    qualifier_source_value,\n    NULL AS value_source_value,\n    cast(NULL AS int) AS observation_event_id,\n    cast(NULL AS int) AS obs_event_field_concept_id\n\nFROM (\n    SELECT\n        p.person_id AS person_id,\n        srctostdvm.target_concept_id AS observation_concept_id,\n        a.start AS observation_date,\n        a.start AS observation_datetime,\n        38000280 AS observation_type_concept_id,\n        cast(NULL AS float) AS value_as_number,\n        cast(NULL AS varchar) AS value_as_string,\n        0 AS value_as_concept_id,\n        0 AS qualifier_concept_id,\n        0 AS unit_concept_id,\n        pr.provider_id AS provider_id,\n        fv.visit_occurrence_id_new AS visit_occurrence_id,\n        fv.visit_occurrence_id_new + 1000000 AS visit_detail_id,\n        a.code AS observation_source_value,\n        srctosrcvm.source_concept_id AS observation_source_concept_id,\n        cast(NULL AS varchar) AS unit_source_value,\n        cast(NULL AS varchar) AS qualifier_source_value\n    FROM {{ source('synthea', 'allergies') }} AS a\n    INNER JOIN {{ ref('source_to_standard_vocab_map') }} AS srctostdvm\n        ON srctostdvm.source_code = a.code\n            AND srctostdvm.target_domain_id = 'Observation'\n            AND srctostdvm.target_vocabulary_id = 'SNOMED'\n            AND srctostdvm.target_standard_concept = 'S'\n            AND srctostdvm.target_invalid_reason IS NULL\n    INNER JOIN {{ ref('source_to_source_vocab_map') }} AS srctosrcvm\n        ON srctosrcvm.source_code = a.code\n            AND srctosrcvm.source_vocabulary_id = 'SNOMED'\n            AND srctosrcvm.source_domain_id = 'Observation'\n    LEFT JOIN {{ ref('final_visit_ids') }} AS fv\n        ON fv.encounter_id = a.encounter\n    LEFT JOIN {{ source('synthea', 'encounters') }} AS e\n        ON a.encounter = e.id\n            AND a.patient = e.patient\n    LEFT JOIN {{ ref('provider') }} AS pr \n        ON e.provider = pr.provider_source_value\n    INNER JOIN {{ ref('person') }} AS p\n        ON p.person_source_value = a.patient\n\n    UNION ALL\n\n    SELECT\n        p.person_id AS person_id,\n        srctostdvm.target_concept_id AS observation_concept_id,\n        c.start AS observation_date,\n        c.start AS observation_datetime,\n        38000280 AS observation_type_concept_id,\n        cast(NULL AS float) AS value_as_number,\n        cast(NULL AS varchar) AS value_as_string,\n        0 AS value_as_concept_id,\n        0 AS qualifier_concept_id,\n        0 AS unit_concept_id,\n        pr.provider_id AS provider_id,\n        fv.visit_occurrence_id_new AS visit_occurrence_id,\n        fv.visit_occurrence_id_new + 1000000 AS visit_detail_id,\n        c.code AS observation_source_value,\n        srctosrcvm.source_concept_id AS observation_source_concept_id,\n        cast(NULL AS varchar) AS unit_source_value,\n        cast(NULL AS varchar) AS qualifier_source_value\n    FROM {{ source('synthea', 'conditions') }} AS c\n    INNER JOIN {{ ref('source_to_standard_vocab_map') }} AS srctostdvm\n        ON srctostdvm.source_code = c.code\n            AND srctostdvm.target_domain_id = 'Observation'\n            AND srctostdvm.target_vocabulary_id = 'SNOMED'\n            AND srctostdvm.target_standard_concept = 'S'\n            AND srctostdvm.target_invalid_reason IS NULL\n    INNER JOIN {{ ref('source_to_source_vocab_map') }} AS srctosrcvm\n        ON srctosrcvm.source_code = c.code\n            AND srctosrcvm.source_vocabulary_id = 'SNOMED'\n            AND srctosrcvm.source_domain_id = 'Observation'\n    LEFT JOIN {{ ref('final_visit_ids') }} AS fv\n        ON fv.encounter_id = c.encounter\n    LEFT JOIN {{ source('synthea', 'encounters') }} AS e\n        ON c.encounter = e.id\n            AND c.patient = e.patient\n    LEFT JOIN {{ ref('provider') }} AS pr \n        ON e.provider = pr.provider_source_value\n    INNER JOIN {{ ref('person') }} AS p\n        ON p.person_source_value = c.patient\n  \n    UNION ALL\n\n    SELECT\n        p.person_id AS person_id,\n        srctostdvm.target_concept_id AS observation_concept_id,\n        o.date AS observation_date,\n        o.date AS observation_datetime,\n        38000280 AS observation_type_concept_id,\n        cast(NULL AS float) AS value_as_number,\n        cast(NULL AS varchar) AS value_as_string,\n        0 AS value_as_concept_id,\n        0 AS qualifier_concept_id,\n        0 AS unit_concept_id,\n        pr.provider_id AS provider_id,\n        fv.visit_occurrence_id_new AS visit_occurrence_id,\n        fv.visit_occurrence_id_new + 1000000 AS visit_detail_id,\n        o.code AS observation_source_value,\n        srctosrcvm.source_concept_id AS observation_source_concept_id,\n        cast(NULL AS varchar) AS unit_source_value,\n        cast(NULL AS varchar) AS qualifier_source_value\n\n    FROM {{ source('synthea', 'observations') }} AS o\n    INNER JOIN {{ ref('source_to_standard_vocab_map') }} AS srctostdvm\n        ON srctostdvm.source_code = o.code\n            AND srctostdvm.target_domain_id = 'Observation'\n            AND srctostdvm.target_vocabulary_id = 'LOINC'\n            AND srctostdvm.target_standard_concept = 'S'\n            AND srctostdvm.target_invalid_reason IS NULL\n    INNER JOIN {{ ref('source_to_source_vocab_map') }} AS srctosrcvm\n        ON srctosrcvm.source_code = o.code\n            AND srctosrcvm.source_vocabulary_id = 'LOINC'\n            AND srctosrcvm.source_domain_id = 'Observation'\n    LEFT JOIN {{ ref('final_visit_ids') }} AS fv\n        ON fv.encounter_id = o.encounter\n    LEFT JOIN {{ source('synthea', 'encounters') }} AS e\n        ON o.encounter = e.id\n            AND o.patient = e.patient\n    LEFT JOIN {{ ref('provider') }} AS pr \n        ON e.provider = pr.provider_source_value\n    INNER JOIN {{ ref('person') }} AS p\n        ON p.person_source_value = o.patient\n\n    ) AS tmp", "language": "sql", "refs": [{"name": "source_to_standard_vocab_map", "package": null, "version": null}, {"name": "source_to_source_vocab_map", "package": null, "version": null}, {"name": "final_visit_ids", "package": null, "version": null}, {"name": "provider", "package": null, "version": null}, {"name": "person", "package": null, "version": null}, {"name": "source_to_standard_vocab_map", "package": null, "version": null}, {"name": "source_to_source_vocab_map", "package": null, "version": null}, {"name": "final_visit_ids", "package": null, "version": null}, {"name": "provider", "package": null, "version": null}, {"name": "person", "package": null, "version": null}, {"name": "source_to_standard_vocab_map", "package": null, "version": null}, {"name": "source_to_source_vocab_map", "package": null, "version": null}, {"name": "final_visit_ids", "package": null, "version": null}, {"name": "provider", "package": null, "version": null}, {"name": "person", "package": null, "version": null}], "sources": [["synthea", "observations"], ["synthea", "allergies"], ["synthea", "conditions"], ["synthea", "encounters"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.etl_synthea_dbt.synthea.observations", "source.etl_synthea_dbt.synthea.allergies", "source.etl_synthea_dbt.synthea.conditions", "source.etl_synthea_dbt.synthea.encounters", "model.etl_synthea_dbt.source_to_standard_vocab_map", "model.etl_synthea_dbt.source_to_source_vocab_map", "model.etl_synthea_dbt.final_visit_ids", "model.etl_synthea_dbt.provider", "model.etl_synthea_dbt.person"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.etl_synthea_dbt.observation_period": {"database": "dbt", "schema": "main", "name": "observation_period", "resource_type": "model", "package_name": "etl_synthea_dbt", "path": "omop/observation_period.sql", "original_file_path": "models/omop/observation_period.sql", "unique_id": "model.etl_synthea_dbt.observation_period", "fqn": ["etl_synthea_dbt", "omop", "observation_period"], "alias": "observation_period", "checksum": {"name": "sha256", "checksum": "7f170f9980d02a9d5b727cb6ca30b9f22f4ac92ed240c9100be34d76afe66e17"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"observation_period_id": {"name": "observation_period_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "person_id": {"name": "person_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "observation_period_start_date": {"name": "observation_period_start_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "observation_period_end_date": {"name": "observation_period_end_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "period_type_concept_id": {"name": "period_type_concept_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "etl_synthea_dbt://models/omop/omop.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1695616067.1675534, "relation_name": "\"dbt\".\"main\".\"observation_period\"", "raw_code": "SELECT\n    ROW_NUMBER()OVER(ORDER BY person_id) AS observation_period_id,\n    person_id AS person_id,\n    start_date AS observation_period_start_date,\n    end_date AS observation_period_end_date,\n    44814724 AS period_type_concept_id\nFROM (\n    SELECT\n        p.person_id,\n        MIN(e.start) AS start_date,\n        MAX(e.stop) AS end_date\n    FROM {{ ref('person') }} AS p\n    INNER JOIN {{ source('synthea', 'encounters') }} AS e\n        ON p.person_source_value = e.patient\n    GROUP BY p.person_id\n) AS tmp", "language": "sql", "refs": [{"name": "person", "package": null, "version": null}], "sources": [["synthea", "encounters"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.etl_synthea_dbt.synthea.encounters", "model.etl_synthea_dbt.person"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.etl_synthea_dbt.visit_occurrence": {"database": "dbt", "schema": "main", "name": "visit_occurrence", "resource_type": "model", "package_name": "etl_synthea_dbt", "path": "omop/visit_occurrence.sql", "original_file_path": "models/omop/visit_occurrence.sql", "unique_id": "model.etl_synthea_dbt.visit_occurrence", "fqn": ["etl_synthea_dbt", "omop", "visit_occurrence"], "alias": "visit_occurrence", "checksum": {"name": "sha256", "checksum": "7213e2927f1cc9dccdd7bb10c0d3d0cfb9cf1334203375719c2bb61cf99cbab8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"visit_occurrence_id": {"name": "visit_occurrence_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "person_id": {"name": "person_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visit_concept_id": {"name": "visit_concept_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visit_start_date": {"name": "visit_start_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visit_end_date": {"name": "visit_end_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visit_type_concept_id": {"name": "visit_type_concept_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "admitting_source_concept_id": {"name": "admitting_source_concept_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discharge_to_concept_id": {"name": "discharge_to_concept_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "preceding_visit_occurrence_id": {"name": "preceding_visit_occurrence_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "etl_synthea_dbt://models/omop/omop.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1695616067.1904814, "relation_name": "\"dbt\".\"main\".\"visit_occurrence\"", "raw_code": "WITH cte_concept_code AS(\n    SELECT\n        *, \n\n        CASE av.encounterclass\n            WHEN 'ambulatory' THEN 'OP'\n            WHEN 'emergency' THEN 'ER'\n            WHEN 'inpatient' THEN 'IP'\n            WHEN 'wellness' THEN 'OP'\n            WHEN 'urgentcare' THEN 'ER' \n            WHEN 'outpatient' THEN 'OP'\n            ELSE 'No matching concept'\n        END AS visit_concept_code\n    FROM {{ ref('all_visits') }} AS av\n)\nSELECT\n    av.visit_occurrence_id AS visit_occurrence_id,\n    p.person_id AS person_id, \n\n    visit_concept.concept_id AS visit_concept_id,\n    av.visit_start_date AS visit_start_date,\n    av.visit_start_date AS visit_start_datetime,\n    av.visit_end_date AS visit_end_date,\n    av.visit_end_date AS visit_end_datetime,\n    44818517 AS visit_type_concept_id, \n    pr.provider_id AS provider_id, \n    NULL AS care_site_id,\n    av.encounter_id AS visit_source_value,\n    0 AS visit_source_concept_id, \n    0 AS admitting_source_concept_id,\n    NULL AS admitting_source_value,\n    0 AS discharge_to_concept_id, \n    NULL AS discharge_to_source_value, \n    lag(av.visit_occurrence_id) \n    OVER(PARTITION BY p.person_id\n                      ORDER BY av.visit_start_date) AS preceding_visit_occurrence_id\nFROM cte_concept_code AS av\n{{ map_concept(cdm_table='av', vocabulary_id='Visit', concept_code_field='visit_concept_code') }}\nINNER JOIN {{ ref('person') }} AS p\n    ON av.patient = p.person_source_value\nINNER JOIN {{ source('synthea', 'encounters') }} AS e\n    ON av.encounter_id = e.id\n        AND av.patient = e.patient\nINNER JOIN {{ ref('provider') }} AS pr \n    ON e.provider = pr.provider_source_value\nWHERE av.visit_occurrence_id IN (\n    SELECT DISTINCT visit_occurrence_id_new\n    FROM {{ ref('final_visit_ids') }} )", "language": "sql", "refs": [{"name": "all_visits", "package": null, "version": null}, {"name": "person", "package": null, "version": null}, {"name": "provider", "package": null, "version": null}, {"name": "final_visit_ids", "package": null, "version": null}], "sources": [["vocab", "concept"], ["synthea", "encounters"]], "metrics": [], "depends_on": {"macros": ["macro.etl_synthea_dbt.map_concept"], "nodes": ["source.etl_synthea_dbt.vocab.concept", "source.etl_synthea_dbt.synthea.encounters", "model.etl_synthea_dbt.all_visits", "model.etl_synthea_dbt.person", "model.etl_synthea_dbt.provider", "model.etl_synthea_dbt.final_visit_ids"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.etl_synthea_dbt.all_visits": {"database": "dbt", "schema": "stg", "name": "all_visits", "resource_type": "model", "package_name": "etl_synthea_dbt", "path": "staging/all_visits.sql", "original_file_path": "models/staging/all_visits.sql", "unique_id": "model.etl_synthea_dbt.all_visits", "fqn": ["etl_synthea_dbt", "staging", "all_visits"], "alias": "all_visits", "checksum": {"name": "sha256", "checksum": "354befd0a6525bded4953f95eaeb5df3a739648aeb3691f204dbe2115611e569"}, "config": {"enabled": true, "alias": null, "schema": "stg", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg", "materialized": "view"}, "created_at": 1695616066.699467, "relation_name": "\"dbt\".\"stg\".\"all_visits\"", "raw_code": "/* Inpatient visits */\n/* Collapse IP claim lines with <=1 day between them into one visit */\n\nWITH CTE_END_DATES AS (\n    SELECT\n        patient,\n        encounterclass,\n        EVENT_DATE - INTERVAL '1 day' AS END_DATE\n    FROM (\n        SELECT\n            patient,\n            encounterclass,\n            EVENT_DATE,\n            EVENT_TYPE,\n            max(\n                START_ORDINAL\n            ) OVER (\n                PARTITION BY patient, encounterclass ORDER BY EVENT_DATE, EVENT_TYPE ROWS UNBOUNDED PRECEDING\n            ) AS START_ORDINAL,\n            row_number() OVER (PARTITION BY patient, encounterclass ORDER BY EVENT_DATE, EVENT_TYPE) AS OVERALL_ORD\n        FROM (\n            SELECT\n                patient,\n                encounterclass,\n                start AS EVENT_DATE,\n                -1 AS EVENT_TYPE,\n                row_number() OVER (PARTITION BY patient, encounterclass ORDER BY start, stop) AS START_ORDINAL\n            FROM {{ source('synthea', 'encounters') }}\n            WHERE encounterclass = 'inpatient'\n            UNION ALL\n            SELECT\n                patient,\n                encounterclass,\n                stop + INTERVAL '1 day' AS EVENT_DATE,\n                1 AS EVENT_TYPE,\n                NULL\n            FROM {{ source('synthea', 'encounters') }}\n            WHERE encounterclass = 'inpatient'\n        ) AS RAWDATA\n    ) AS E\n    WHERE (2 * E.START_ORDINAL - E.OVERALL_ORD = 0)\n),\n\nCTE_VISIT_ENDS AS (\n    SELECT\n        min(V.id) AS encounter_id,\n        V.patient,\n        V.encounterclass,\n        V.start AS VISIT_START_DATE,\n        min(E.END_DATE) AS VISIT_END_DATE\n    FROM {{ source('synthea', 'encounters') }} AS V\n    INNER JOIN CTE_END_DATES AS E\n        ON V.patient = E.patient\n            AND V.encounterclass = E.encounterclass\n            AND E.END_DATE >= V.start\n    GROUP BY V.patient, V.encounterclass, V.start\n),\n\nIP_VISITS AS (\n    SELECT\n        T2.encounter_id,\n        T2.patient,\n        T2.encounterclass,\n        T2.VISIT_START_DATE,\n        T2.VISIT_END_DATE\n        {# INTO {{ ref('IP_VISITS') }} #}\n    FROM (\n            SELECT\n                encounter_id,\n                patient,\n                encounterclass,\n                min(VISIT_START_DATE) AS VISIT_START_DATE,\n                VISIT_END_DATE\n            FROM CTE_VISIT_ENDS\n            GROUP BY encounter_id, patient, encounterclass, VISIT_END_DATE\n        ) AS T2\n),\n\n\n/* Emergency visits */\n/* collapse ER claim lines with no days between them into one visit */\n\nER_VISITS AS (\n    SELECT\n        T2.encounter_id,\n        T2.patient,\n        T2.encounterclass,\n        T2.VISIT_START_DATE,\n        T2.VISIT_END_DATE\n        {# INTO {{ ref('ER_VISITS') }} #}\n    FROM (\n            SELECT\n                min(encounter_id) AS encounter_id,\n                patient,\n                encounterclass,\n                VISIT_START_DATE,\n                max(VISIT_END_DATE) AS VISIT_END_DATE\n            FROM (\n                    SELECT\n                        CL1.id AS encounter_id,\n                        CL1.patient,\n                        CL1.encounterclass,\n                        CL1.start AS VISIT_START_DATE,\n                        CL2.stop AS VISIT_END_DATE\n                    FROM {{ source('synthea', 'encounters') }} AS CL1\n                    INNER JOIN {{ source('synthea', 'encounters') }} AS CL2\n                        ON CL1.patient = CL2.patient\n                            AND CL1.start = CL2.start\n                            AND CL1.encounterclass = CL2.encounterclass\n                    WHERE CL1.encounterclass IN ('emergency', 'urgent')\n                ) AS T1\n            GROUP BY patient, encounterclass, VISIT_START_DATE\n        ) AS T2\n),\n\n\n/* Outpatient visits */\n\nCTE_VISITS_DISTINCT AS (\n    SELECT\n        min(id) AS encounter_id,\n        patient,\n        encounterclass,\n        start AS VISIT_START_DATE,\n        stop AS VISIT_END_DATE\n    FROM {{ source('synthea', 'encounters') }}\n    WHERE encounterclass IN ('ambulatory', 'wellness', 'outpatient')\n    GROUP BY patient, encounterclass, start, stop\n),\n\nOP_VISITS AS (\n    SELECT\n        min(encounter_id) AS encounter_id,\n        patient,\n        encounterclass,\n        VISIT_START_DATE,\n        max(VISIT_END_DATE) AS VISIT_END_DATE\n        {# INTO {{ ref('OP_VISITS') }} #}\n    FROM CTE_VISITS_DISTINCT\n    GROUP BY patient, encounterclass, VISIT_START_DATE\n)\n\n/* All visits */\n\nSELECT\n    *,\n    row_number()OVER(ORDER BY patient) AS visit_occurrence_id\nFROM\n    (\n        SELECT * FROM IP_VISITS\n    \n        UNION ALL\n        SELECT * FROM ER_VISITS\n    \n        UNION ALL\n        SELECT * FROM OP_VISITS\n    ) AS T1", "language": "sql", "refs": [], "sources": [["synthea", "encounters"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.etl_synthea_dbt.synthea.encounters"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.etl_synthea_dbt.assign_all_visit_ids": {"database": "dbt", "schema": "stg", "name": "assign_all_visit_ids", "resource_type": "model", "package_name": "etl_synthea_dbt", "path": "staging/assign_all_visit_ids.sql", "original_file_path": "models/staging/assign_all_visit_ids.sql", "unique_id": "model.etl_synthea_dbt.assign_all_visit_ids", "fqn": ["etl_synthea_dbt", "staging", "assign_all_visit_ids"], "alias": "assign_all_visit_ids", "checksum": {"name": "sha256", "checksum": "a42890965ea6b7a73ec724c43225f5b61fc36efa4e2d08f0d7fb73d047bdd64b"}, "config": {"enabled": true, "alias": null, "schema": "stg", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg", "materialized": "view"}, "created_at": 1695616066.7169185, "relation_name": "\"dbt\".\"stg\".\"assign_all_visit_ids\"", "raw_code": "/*Assign VISIT_OCCURRENCE_ID to all encounters*/\n\nSELECT\n    E.id AS encounter_id,\n    E.patient AS person_source_value,\n    E.start AS date_service,\n    E.stop AS date_service_end,\n    E.encounterclass,\n    AV.encounterclass AS VISIT_TYPE,\n    AV.VISIT_START_DATE,\n    AV.VISIT_END_DATE,\n    AV.VISIT_OCCURRENCE_ID,\n    CASE\n        WHEN E.encounterclass = 'inpatient' AND AV.encounterclass = 'inpatient'\n            THEN VISIT_OCCURRENCE_ID\n        WHEN E.encounterclass IN ('emergency', 'urgent')\n            THEN (\n                CASE\n                    WHEN AV.encounterclass = 'inpatient' AND E.start > AV.VISIT_START_DATE\n                        THEN VISIT_OCCURRENCE_ID\n                    WHEN AV.encounterclass IN ('emergency', 'urgent') AND E.start = AV.VISIT_START_DATE\n                        THEN VISIT_OCCURRENCE_ID\n                END\n            )\n        WHEN E.encounterclass IN ('ambulatory', 'wellness', 'outpatient')\n            THEN (\n                CASE\n                    WHEN AV.encounterclass = 'inpatient' AND E.start >= AV.VISIT_START_DATE\n                        THEN VISIT_OCCURRENCE_ID\n                    WHEN AV.encounterclass IN ('ambulatory', 'wellness', 'outpatient')\n                        THEN VISIT_OCCURRENCE_ID\n                END\n            )\n    END AS VISIT_OCCURRENCE_ID_NEW\nFROM {{ source('synthea', 'encounters') }} AS E\nINNER JOIN {{ ref('all_visits') }} AS AV\n    ON E.patient = AV.patient\n        AND E.start >= AV.VISIT_START_DATE\n        AND E.start <= AV.VISIT_END_DATE", "language": "sql", "refs": [{"name": "all_visits", "package": null, "version": null}], "sources": [["synthea", "encounters"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.etl_synthea_dbt.synthea.encounters", "model.etl_synthea_dbt.all_visits"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.etl_synthea_dbt.final_visit_ids": {"database": "dbt", "schema": "stg", "name": "final_visit_ids", "resource_type": "model", "package_name": "etl_synthea_dbt", "path": "staging/final_visit_ids.sql", "original_file_path": "models/staging/final_visit_ids.sql", "unique_id": "model.etl_synthea_dbt.final_visit_ids", "fqn": ["etl_synthea_dbt", "staging", "final_visit_ids"], "alias": "final_visit_ids", "checksum": {"name": "sha256", "checksum": "3a9ce4f8291ed1212b55e7b69bcd194607b4a46d60a25005f96654c822c8cfb7"}, "config": {"enabled": true, "alias": null, "schema": "stg", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg", "materialized": "view"}, "created_at": 1695616066.7329464, "relation_name": "\"dbt\".\"stg\".\"final_visit_ids\"", "raw_code": "SELECT\n    encounter_id,\n    VISIT_OCCURRENCE_ID_NEW\nFROM(\n    SELECT\n        *,\n        ROW_NUMBER() OVER (PARTITION BY encounter_id ORDER BY PRIORITY) AS RN\n    FROM (\n        SELECT\n            *,\n            CASE\n                WHEN encounterclass IN ('emergency', 'urgent')\n                    THEN (\n                        CASE\n                            WHEN VISIT_TYPE = 'inpatient' AND VISIT_OCCURRENCE_ID_NEW IS NOT NULL\n                                THEN 1\n                            WHEN VISIT_TYPE IN ('emergency', 'urgent') AND VISIT_OCCURRENCE_ID_NEW IS NOT NULL\n                                THEN 2\n                            ELSE 99\n                        END\n                    )\n                WHEN encounterclass IN ('ambulatory', 'wellness', 'outpatient')\n                    THEN (\n                        CASE\n                            WHEN VISIT_TYPE = 'inpatient' AND VISIT_OCCURRENCE_ID_NEW IS NOT NULL\n                                THEN 1\n                            WHEN\n                                VISIT_TYPE IN (\n                                    'ambulatory', 'wellness', 'outpatient'\n                                ) AND VISIT_OCCURRENCE_ID_NEW IS NOT NULL\n                                THEN 2\n                            ELSE 99\n                        END\n                    )\n                WHEN encounterclass = 'inpatient' AND VISIT_TYPE = 'inpatient' AND VISIT_OCCURRENCE_ID_NEW IS NOT NULL\n                    THEN 1\n                ELSE 99\n            END AS PRIORITY\n        FROM {{ ref('assign_all_visit_ids') }}\n    ) AS T1\n) AS T2\nWHERE RN = 1", "language": "sql", "refs": [{"name": "assign_all_visit_ids", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.etl_synthea_dbt.assign_all_visit_ids"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.etl_synthea_dbt.stg_condition_occurrence": {"database": "dbt", "schema": "stg", "name": "stg_condition_occurrence", "resource_type": "model", "package_name": "etl_synthea_dbt", "path": "staging/stg_condition_occurrence.sql", "original_file_path": "models/staging/stg_condition_occurrence.sql", "unique_id": "model.etl_synthea_dbt.stg_condition_occurrence", "fqn": ["etl_synthea_dbt", "staging", "stg_condition_occurrence"], "alias": "stg_condition_occurrence", "checksum": {"name": "sha256", "checksum": "69fd1fa900e3b070e6c2158cd09a95bf0906fad0491b3324ab617dbef74c718e"}, "config": {"enabled": true, "alias": null, "schema": "stg", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg", "materialized": "view"}, "created_at": 1695616066.7875152, "relation_name": "\"dbt\".\"stg\".\"stg_condition_occurrence\"", "raw_code": "SELECT\n    p.person_id AS person_id,\n    c.code,\n    c.start,\n    c.stop,\n    fv.visit_occurrence_id_new\nFROM {{ source('synthea', 'conditions') }} AS c\nLEFT JOIN {{ ref('final_visit_ids') }} AS fv\n    ON fv.encounter_id = c.encounter\nINNER JOIN {{ ref('person') }} AS p\n    ON c.patient = p.person_source_value", "language": "sql", "refs": [{"name": "final_visit_ids", "package": null, "version": null}, {"name": "person", "package": null, "version": null}], "sources": [["synthea", "conditions"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.etl_synthea_dbt.synthea.conditions", "model.etl_synthea_dbt.final_visit_ids", "model.etl_synthea_dbt.person"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.etl_synthea_dbt.tmp_ce": {"database": "dbt", "schema": "stg", "name": "tmp_ce", "resource_type": "model", "package_name": "etl_synthea_dbt", "path": "staging/tmp_ce.sql", "original_file_path": "models/staging/tmp_ce.sql", "unique_id": "model.etl_synthea_dbt.tmp_ce", "fqn": ["etl_synthea_dbt", "staging", "tmp_ce"], "alias": "tmp_ce", "checksum": {"name": "sha256", "checksum": "c2fc6b9e43299496c46181d4f39a19f4765db7ca32c108d608693b81ed77574f"}, "config": {"enabled": true, "alias": null, "schema": "stg", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg", "materialized": "view"}, "created_at": 1695616066.8042908, "relation_name": "\"dbt\".\"stg\".\"tmp_ce\"", "raw_code": "-- This script is taken from here:\n-- https://github.com/OHDSI/ETL-CMS/blob/master/SQL/create_CDMv5_condition_era.sql\n--\n\n-- if object_id('tempdb..#tmp_ce', 'U') is not null drop table #tmp_ce;\n\nWITH cteConditionTarget (\n    condition_occurrence_id, person_id, condition_concept_id, condition_start_date, condition_end_date\n) AS (\n    SELECT\n        co.condition_occurrence_id,\n        co.person_id,\n        co.condition_concept_id,\n        co.condition_start_date,\n        COALESCE(NULLIF(co.condition_end_date, NULL), co.condition_start_date + INTERVAL '1 day')\n    FROM {{ ref('condition_occurrence') }} AS co\n/* Depending on the needs of your data, you can put more filters on to your code. We assign 0 to our unmapped condition_concept_id's,\n* and since we don't want different conditions put in the same era, we put in the filter below.\n*/\n---WHERE condition_concept_id != 0\n),\n\n--------------------------------------------------------------------------------------------------------------\ncteEndDates (person_id, condition_concept_id, end_date) AS -- the magic\n(\n    SELECT\n        e.person_id,\n        e.condition_concept_id,\n        e.event_date - 30 * INTERVAL '1 day' AS end_date -- unpad the end date\n    FROM\n        (\n            SELECT\n                person_id,\n                condition_concept_id,\n                event_date,\n                event_type,\n                MAX(\n                    start_ordinal\n                ) OVER (\n                    PARTITION BY\n                        person_id, condition_concept_id\n                    ORDER BY event_date, event_type ROWS UNBOUNDED PRECEDING\n                ) AS start_ordinal,\n                -- this pulls the current START down from the prior rows so that the NULLs from the END DATES will contain a value we can compare with\n                ROW_NUMBER() OVER (\n                    PARTITION BY person_id, condition_concept_id ORDER BY event_date, event_type\n                ) AS overall_ord -- this re-numbers the inner UNION so all rows are numbered ordered by the event date\n            FROM\n                (\n                    -- select the start dates, assigning a row number to each\n                    SELECT\n                        person_id,\n                        condition_concept_id,\n                        condition_start_date AS event_date,\n                        -1 AS event_type,\n                        ROW_NUMBER() OVER (PARTITION BY person_id,\n                            condition_concept_id ORDER BY condition_start_date) AS start_ordinal\n                    FROM cteConditionTarget\n\n                    UNION ALL\n\n                    -- pad the end dates by 30 to allow a grace period for overlapping ranges.\n                    SELECT\n                        person_id,\n                        condition_concept_id,\n                        condition_end_date + 30 * INTERVAL '1 day',\n                        1 AS event_type,\n                        NULL\n                    FROM cteConditionTarget\n                ) AS RAWDATA\n        ) AS e\n    WHERE (2 * e.start_ordinal) - e.overall_ord = 0\n),\n\n--------------------------------------------------------------------------------------------------------------\ncteConditionEnds (person_id, condition_concept_id, condition_start_date, era_end_date) AS (\n    SELECT\n        c.person_id,\n        c.condition_concept_id,\n        c.condition_start_date,\n        MIN(e.end_date) AS era_end_date\n    FROM cteConditionTarget AS c\n    INNER JOIN\n        cteEndDates AS e ON\n            c.person_id = e.person_id AND c.condition_concept_id = e.condition_concept_id AND e.end_date >= c.condition_start_date\n    GROUP BY\n        c.condition_occurrence_id,\n        c.person_id,\n        c.condition_concept_id,\n        c.condition_start_date\n)\n--------------------------------------------------------------------------------------------------------------\n\n\nSELECT \n    ROW_NUMBER()OVER(ORDER BY person_id) AS condition_era_id,\n    person_id,\n    condition_concept_id,\n    MIN(condition_start_date) AS condition_era_start_date,\n    era_end_date AS condition_era_end_date,\n    COUNT(*) AS condition_occurrence_count\nFROM cteConditionEnds\nGROUP BY person_id, condition_concept_id, era_end_date", "language": "sql", "refs": [{"name": "condition_occurrence", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.etl_synthea_dbt.condition_occurrence"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.etl_synthea_dbt.tmp_de": {"database": "dbt", "schema": "stg", "name": "tmp_de", "resource_type": "model", "package_name": "etl_synthea_dbt", "path": "staging/tmp_de.sql", "original_file_path": "models/staging/tmp_de.sql", "unique_id": "model.etl_synthea_dbt.tmp_de", "fqn": ["etl_synthea_dbt", "staging", "tmp_de"], "alias": "tmp_de", "checksum": {"name": "sha256", "checksum": "73e5bf5a2d40c33793560928abb17f70bd5f8b49a031458bf84306dfdaa308dc"}, "config": {"enabled": true, "alias": null, "schema": "stg", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg", "materialized": "view"}, "created_at": 1695616066.8217342, "relation_name": "\"dbt\".\"stg\".\"tmp_de\"", "raw_code": "-- Code taken from:\n-- https://github.com/OHDSI/ETL-CMS/blob/master/SQL/create_CDMv5_drug_era_non_stockpile.sql\n\n\n-- if object_id('tempdb..#tmp_de', 'U') is not null drop table #tmp_de;\n\nWITH\nctePreDrugTarget(\n    drug_exposure_id, person_id, ingredient_concept_id, drug_exposure_start_date, days_supply, drug_exposure_end_date\n) AS (\n    -- Normalize DRUG_EXPOSURE_END_DATE to either the existing drug exposure end date, or add days supply, or add 1 day to the start date\n    SELECT\n        d.drug_exposure_id,\n        d.person_id,\n        c.concept_id AS ingredient_concept_id,\n        d.drug_exposure_start_date AS drug_exposure_start_date,\n        d.days_supply AS days_supply,\n        COALESCE(\n            ---NULLIF returns NULL if both values are the same, otherwise it returns the first parameter\n            NULLIF(drug_exposure_end_date, NULL),\n            ---If drug_exposure_end_date != NULL, return drug_exposure_end_date, otherwise go to next case\n            NULLIF(drug_exposure_start_date + days_supply * INTERVAL '1 day', drug_exposure_start_date),\n            ---If days_supply != NULL or 0, return drug_exposure_start_date + days_supply, otherwise go to next case\n            drug_exposure_start_date + INTERVAL '1 day'\n        ---Add 1 day to the drug_exposure_start_date since there is no end_date or INTERVAL for the days_supply\n        ) AS drug_exposure_end_date\n    FROM {{ ref('drug_exposure') }} AS d\n    INNER JOIN {{ source('vocab', 'concept_ancestor') }} AS ca ON ca.descendant_concept_id = d.drug_concept_id\n    INNER JOIN {{ source('vocab', 'concept') }} AS c ON ca.ancestor_concept_id = c.concept_id\n    WHERE c.vocabulary_id = 'RxNorm' ---8 selects RxNorm from the vocabulary_id\n        AND c.concept_class_id = 'Ingredient'\n        AND d.drug_concept_id != 0 ---Our unmapped drug_concept_id's are set to 0, so we don't want different drugs wrapped up in the same era\n        AND COALESCE(d.days_supply, 0) >= 0\n---We have cases where days_supply is negative, and this can set the end_date before the start_date, which we don't want. So we're just looking over those rows. This is a data-quality issue.\n),\n\ncteSubExposureEndDates (\n    person_id, ingredient_concept_id, end_date\n) AS --- A preliminary sorting that groups all of the overlapping exposures into one exposure so that we don't double-count non-gap-days\n(\n    SELECT\n        e.person_id,\n        e.ingredient_concept_id,\n        e.event_date AS end_date\n    FROM\n        (\n            SELECT\n                person_id,\n                ingredient_concept_id,\n                event_date,\n                event_type,\n                MAX(start_ordinal) OVER (PARTITION BY person_id, ingredient_concept_id\n                    ORDER BY event_date, event_type ROWS UNBOUNDED PRECEDING) AS start_ordinal,\n                -- this pulls the current START down from the prior rows so that the NULLs\n                -- from the END DATES will contain a value we can compare with\n                ROW_NUMBER() OVER (PARTITION BY person_id, ingredient_concept_id\n                    ORDER BY event_date, event_type) AS overall_ord\n            -- this re-numbers the inner UNION so all rows are numbered ordered by the event date\n            FROM (\n                -- select the start dates, assigning a row number to each\n                SELECT\n                    person_id,\n                    ingredient_concept_id,\n                    drug_exposure_start_date AS event_date,\n                    -1 AS event_type,\n                    ROW_NUMBER() OVER (PARTITION BY person_id, ingredient_concept_id\n                        ORDER BY drug_exposure_start_date) AS start_ordinal\n                FROM ctePreDrugTarget\n\n                UNION ALL\n\n                SELECT\n                    person_id,\n                    ingredient_concept_id,\n                    drug_exposure_end_date,\n                    1 AS event_type,\n                    NULL\n                FROM ctePreDrugTarget\n            ) AS RAWDATA\n        ) AS e\n    WHERE (2 * e.start_ordinal) - e.overall_ord = 0\n),\n\ncteDrugExposureEnds (person_id, drug_concept_id, drug_exposure_start_date, drug_sub_exposure_end_date) AS (\n    SELECT\n        dt.person_id,\n        dt.ingredient_concept_id,\n        dt.drug_exposure_start_date,\n        MIN(e.end_date) AS drug_sub_exposure_end_date\n    FROM ctePreDrugTarget AS dt\n    INNER JOIN\n        cteSubExposureEndDates AS e ON\n            dt.person_id = e.person_id AND dt.ingredient_concept_id = e.ingredient_concept_id AND e.end_date >= dt.drug_exposure_start_date\n    GROUP BY\n        dt.drug_exposure_id,\n        dt.person_id,\n        dt.ingredient_concept_id,\n        dt.drug_exposure_start_date\n),\n\n--------------------------------------------------------------------------------------------------------------\ncteSubExposures(\n    row_number,\n    person_id,\n    drug_concept_id,\n    drug_sub_exposure_start_date,\n    drug_sub_exposure_end_date,\n    drug_exposure_count\n) AS (\n    SELECT\n        ROW_NUMBER() OVER (PARTITION BY person_id, drug_concept_id, drug_sub_exposure_end_date ORDER BY person_id),\n        person_id,\n        drug_concept_id,\n        MIN(drug_exposure_start_date) AS drug_sub_exposure_start_date,\n        drug_sub_exposure_end_date,\n        COUNT(*) AS drug_exposure_count\n    FROM cteDrugExposureEnds\n    GROUP BY person_id, drug_concept_id, drug_sub_exposure_end_date\n--ORDER BY person_id, drug_concept_id\n),\n\n--------------------------------------------------------------------------------------------------------------\n/*Everything above grouped exposures into sub_exposures if there was overlap between exposures.\n*So there was no persistence window. Now we can add the persistence window to calculate eras.\n*/\n--------------------------------------------------------------------------------------------------------------\ncteFinalTarget(\n    row_number,\n    person_id,\n    ingredient_concept_id,\n    drug_sub_exposure_start_date,\n    drug_sub_exposure_end_date,\n    drug_exposure_count,\n    days_exposed\n) AS (\n    SELECT\n        row_number,\n        person_id,\n        drug_concept_id,\n        drug_sub_exposure_start_date,\n        drug_sub_exposure_end_date,\n        drug_exposure_count,\n        drug_sub_exposure_end_date::DATE - drug_sub_exposure_start_date::DATE AS days_exposed\n    FROM cteSubExposures\n),\n\n--------------------------------------------------------------------------------------------------------------\ncteEndDates (person_id, ingredient_concept_id, end_date) AS -- the magic\n(\n    SELECT\n        e.person_id,\n        e.ingredient_concept_id,\n        e.event_date - 30 * INTERVAL '1 day' AS end_date -- unpad the end date\n    FROM\n        (\n            SELECT\n                person_id,\n                ingredient_concept_id,\n                event_date,\n                event_type,\n                MAX(start_ordinal) OVER (PARTITION BY person_id, ingredient_concept_id\n                    ORDER BY event_date, event_type ROWS UNBOUNDED PRECEDING) AS start_ordinal,\n                -- this pulls the current START down from the prior rows so that the NULLs\n                -- from the END DATES will contain a value we can compare with\n                ROW_NUMBER() OVER (PARTITION BY person_id, ingredient_concept_id\n                    ORDER BY event_date, event_type) AS overall_ord\n            -- this re-numbers the inner UNION so all rows are numbered ordered by the event date\n            FROM (\n                -- select the start dates, assigning a row number to each\n                SELECT\n                    person_id,\n                    ingredient_concept_id,\n                    drug_sub_exposure_start_date AS event_date,\n                    -1 AS event_type,\n                    ROW_NUMBER() OVER (PARTITION BY person_id, ingredient_concept_id\n                        ORDER BY drug_sub_exposure_start_date) AS start_ordinal\n                FROM cteFinalTarget\n\n                UNION ALL\n\n                -- pad the end dates by 30 to allow a grace period for overlapping ranges.\n                SELECT\n                    person_id,\n                    ingredient_concept_id,\n                    drug_sub_exposure_end_date + 30 * INTERVAL '1 day',\n                    1 AS event_type,\n                    NULL\n                FROM cteFinalTarget\n            ) AS RAWDATA\n        ) AS e\n    WHERE (2 * e.start_ordinal) - e.overall_ord = 0\n\n),\n\ncteDrugEraEnds (\n    person_id, drug_concept_id, drug_sub_exposure_start_date, drug_era_end_date, drug_exposure_count, days_exposed\n) AS (\n    SELECT\n        ft.person_id,\n        ft.ingredient_concept_id,\n        ft.drug_sub_exposure_start_date,\n        MIN(e.end_date) AS era_end_date,\n        drug_exposure_count,\n        days_exposed\n    FROM cteFinalTarget AS ft\n    INNER JOIN\n        cteEndDates AS e ON\n            ft.person_id = e.person_id AND ft.ingredient_concept_id = e.ingredient_concept_id AND e.end_date >= ft.drug_sub_exposure_start_date\n    GROUP BY\n        ft.person_id,\n        ft.ingredient_concept_id,\n        ft.drug_sub_exposure_start_date,\n        drug_exposure_count,\n        days_exposed\n)\n\nSELECT\n    ROW_NUMBER()OVER(ORDER BY person_id) AS drug_era_id,\n    person_id,\n    drug_concept_id,\n    MIN(drug_sub_exposure_start_date) AS drug_era_start_date,\n    drug_era_end_date,\n    SUM(drug_exposure_count) AS drug_exposure_count,\n    (drug_era_end_date::DATE - MIN(drug_sub_exposure_start_date)::DATE) - SUM(days_exposed) AS gap_days\nFROM cteDrugEraEnds\nGROUP BY person_id, drug_concept_id, drug_era_end_date", "language": "sql", "refs": [{"name": "drug_exposure", "package": null, "version": null}], "sources": [["vocab", "concept_ancestor"], ["vocab", "concept"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.etl_synthea_dbt.vocab.concept_ancestor", "source.etl_synthea_dbt.vocab.concept", "model.etl_synthea_dbt.drug_exposure"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "test.etl_synthea_dbt.unique_observation_period_observation_period_id.34c08aa0cd": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "observation_period_id", "model": "{{ get_where_subquery(ref('observation_period')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "unique_observation_period_observation_period_id", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "unique_observation_period_observation_period_id.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.unique_observation_period_observation_period_id.34c08aa0cd", "fqn": ["etl_synthea_dbt", "omop", "unique_observation_period_observation_period_id"], "alias": "unique_observation_period_observation_period_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695616067.7729738, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "observation_period", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.etl_synthea_dbt.observation_period"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "observation_period_id", "file_key_name": "models.observation_period", "attached_node": "model.etl_synthea_dbt.observation_period"}, "test.etl_synthea_dbt.not_null_observation_period_observation_period_id.6c6fb96d33": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "observation_period_id", "model": "{{ get_where_subquery(ref('observation_period')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "not_null_observation_period_observation_period_id", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "not_null_observation_period_observation_period_id.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.not_null_observation_period_observation_period_id.6c6fb96d33", "fqn": ["etl_synthea_dbt", "omop", "not_null_observation_period_observation_period_id"], "alias": "not_null_observation_period_observation_period_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695616067.7845042, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "observation_period", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.etl_synthea_dbt.observation_period"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "observation_period_id", "file_key_name": "models.observation_period", "attached_node": "model.etl_synthea_dbt.observation_period"}, "test.etl_synthea_dbt.not_null_observation_period_person_id.71c8f248d3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "person_id", "model": "{{ get_where_subquery(ref('observation_period')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "not_null_observation_period_person_id", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "not_null_observation_period_person_id.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.not_null_observation_period_person_id.71c8f248d3", "fqn": ["etl_synthea_dbt", "omop", "not_null_observation_period_person_id"], "alias": "not_null_observation_period_person_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695616067.7965045, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "observation_period", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.etl_synthea_dbt.observation_period"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "person_id", "file_key_name": "models.observation_period", "attached_node": "model.etl_synthea_dbt.observation_period"}, "test.etl_synthea_dbt.relationships_observation_period_person_id__person_id__ref_person_.3e962f56b4": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('person')", "field": "person_id", "column_name": "person_id", "model": "{{ get_where_subquery(ref('observation_period')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_observation_period_person_id__person_id__ref_person_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_observation_peri_80d15a7dd80faf48fdee7cad93bb3d36.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_observation_period_person_id__person_id__ref_person_.3e962f56b4", "fqn": ["etl_synthea_dbt", "omop", "relationships_observation_period_person_id__person_id__ref_person_"], "alias": "relationships_observation_peri_80d15a7dd80faf48fdee7cad93bb3d36", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_observation_peri_80d15a7dd80faf48fdee7cad93bb3d36", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_observation_peri_80d15a7dd80faf48fdee7cad93bb3d36"}, "created_at": 1695616067.8087325, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_observation_peri_80d15a7dd80faf48fdee7cad93bb3d36\") }}", "language": "sql", "refs": [{"name": "person", "package": null, "version": null}, {"name": "observation_period", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.etl_synthea_dbt.person", "model.etl_synthea_dbt.observation_period"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "person_id", "file_key_name": "models.observation_period", "attached_node": "model.etl_synthea_dbt.observation_period"}, "test.etl_synthea_dbt.not_null_observation_period_observation_period_start_date.e88435db95": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "observation_period_start_date", "model": "{{ get_where_subquery(ref('observation_period')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "not_null_observation_period_observation_period_start_date", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "not_null_observation_period_observation_period_start_date.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.not_null_observation_period_observation_period_start_date.e88435db95", "fqn": ["etl_synthea_dbt", "omop", "not_null_observation_period_observation_period_start_date"], "alias": "not_null_observation_period_observation_period_start_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695616067.8388171, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "observation_period", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.etl_synthea_dbt.observation_period"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "observation_period_start_date", "file_key_name": "models.observation_period", "attached_node": "model.etl_synthea_dbt.observation_period"}, "test.etl_synthea_dbt.not_null_observation_period_observation_period_end_date.e74764a048": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "observation_period_end_date", "model": "{{ get_where_subquery(ref('observation_period')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "not_null_observation_period_observation_period_end_date", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "not_null_observation_period_observation_period_end_date.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.not_null_observation_period_observation_period_end_date.e74764a048", "fqn": ["etl_synthea_dbt", "omop", "not_null_observation_period_observation_period_end_date"], "alias": "not_null_observation_period_observation_period_end_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695616067.8512247, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "observation_period", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.etl_synthea_dbt.observation_period"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "observation_period_end_date", "file_key_name": "models.observation_period", "attached_node": "model.etl_synthea_dbt.observation_period"}, "test.etl_synthea_dbt.not_null_observation_period_period_type_concept_id.b993e0023c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "period_type_concept_id", "model": "{{ get_where_subquery(ref('observation_period')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "not_null_observation_period_period_type_concept_id", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "not_null_observation_period_period_type_concept_id.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.not_null_observation_period_period_type_concept_id.b993e0023c", "fqn": ["etl_synthea_dbt", "omop", "not_null_observation_period_period_type_concept_id"], "alias": "not_null_observation_period_period_type_concept_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695616067.8627572, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "observation_period", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.etl_synthea_dbt.observation_period"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "period_type_concept_id", "file_key_name": "models.observation_period", "attached_node": "model.etl_synthea_dbt.observation_period"}, "test.etl_synthea_dbt.relationships_observation_period_period_type_concept_id__concept_id__source_vocab_concept_.d636ade84f": {"test_metadata": {"name": "relationships", "kwargs": {"to": "source('vocab', 'concept')", "field": "concept_id", "column_name": "period_type_concept_id", "model": "{{ get_where_subquery(ref('observation_period')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_observation_period_period_type_concept_id__concept_id__source_vocab_concept_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_observation_peri_adfa7f50922510adce9f6d058c544502.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_observation_period_period_type_concept_id__concept_id__source_vocab_concept_.d636ade84f", "fqn": ["etl_synthea_dbt", "omop", "relationships_observation_period_period_type_concept_id__concept_id__source_vocab_concept_"], "alias": "relationships_observation_peri_adfa7f50922510adce9f6d058c544502", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_observation_peri_adfa7f50922510adce9f6d058c544502", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_observation_peri_adfa7f50922510adce9f6d058c544502"}, "created_at": 1695616067.873703, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_observation_peri_adfa7f50922510adce9f6d058c544502\") }}", "language": "sql", "refs": [{"name": "observation_period", "package": null, "version": null}], "sources": [["vocab", "concept"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.etl_synthea_dbt.vocab.concept", "model.etl_synthea_dbt.observation_period"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "period_type_concept_id", "file_key_name": "models.observation_period", "attached_node": "model.etl_synthea_dbt.observation_period"}, "test.etl_synthea_dbt.unique_visit_occurrence_visit_occurrence_id.faa3aa67c6": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "visit_occurrence_id", "model": "{{ get_where_subquery(ref('visit_occurrence')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "unique_visit_occurrence_visit_occurrence_id", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "unique_visit_occurrence_visit_occurrence_id.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.unique_visit_occurrence_visit_occurrence_id.faa3aa67c6", "fqn": ["etl_synthea_dbt", "omop", "unique_visit_occurrence_visit_occurrence_id"], "alias": "unique_visit_occurrence_visit_occurrence_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695616067.9031887, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "visit_occurrence", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.etl_synthea_dbt.visit_occurrence"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "visit_occurrence_id", "file_key_name": "models.visit_occurrence", "attached_node": "model.etl_synthea_dbt.visit_occurrence"}, "test.etl_synthea_dbt.not_null_visit_occurrence_visit_occurrence_id.a3a65446cf": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "visit_occurrence_id", "model": "{{ get_where_subquery(ref('visit_occurrence')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "not_null_visit_occurrence_visit_occurrence_id", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "not_null_visit_occurrence_visit_occurrence_id.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.not_null_visit_occurrence_visit_occurrence_id.a3a65446cf", "fqn": ["etl_synthea_dbt", "omop", "not_null_visit_occurrence_visit_occurrence_id"], "alias": "not_null_visit_occurrence_visit_occurrence_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695616067.9154055, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "visit_occurrence", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.etl_synthea_dbt.visit_occurrence"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "visit_occurrence_id", "file_key_name": "models.visit_occurrence", "attached_node": "model.etl_synthea_dbt.visit_occurrence"}, "test.etl_synthea_dbt.not_null_visit_occurrence_person_id.e916ff163a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "person_id", "model": "{{ get_where_subquery(ref('visit_occurrence')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "not_null_visit_occurrence_person_id", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "not_null_visit_occurrence_person_id.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.not_null_visit_occurrence_person_id.e916ff163a", "fqn": ["etl_synthea_dbt", "omop", "not_null_visit_occurrence_person_id"], "alias": "not_null_visit_occurrence_person_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695616067.9275286, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "visit_occurrence", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.etl_synthea_dbt.visit_occurrence"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "person_id", "file_key_name": "models.visit_occurrence", "attached_node": "model.etl_synthea_dbt.visit_occurrence"}, "test.etl_synthea_dbt.relationships_visit_occurrence_person_id__person_id__ref_person_.0f12e4784d": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('person')", "field": "person_id", "column_name": "person_id", "model": "{{ get_where_subquery(ref('visit_occurrence')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_visit_occurrence_person_id__person_id__ref_person_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_visit_occurrence_6432251beba0245fe902e0c3d6e48c8c.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_visit_occurrence_person_id__person_id__ref_person_.0f12e4784d", "fqn": ["etl_synthea_dbt", "omop", "relationships_visit_occurrence_person_id__person_id__ref_person_"], "alias": "relationships_visit_occurrence_6432251beba0245fe902e0c3d6e48c8c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_visit_occurrence_6432251beba0245fe902e0c3d6e48c8c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_visit_occurrence_6432251beba0245fe902e0c3d6e48c8c"}, "created_at": 1695616067.94084, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_visit_occurrence_6432251beba0245fe902e0c3d6e48c8c\") }}", "language": "sql", "refs": [{"name": "person", "package": null, "version": null}, {"name": "visit_occurrence", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.etl_synthea_dbt.person", "model.etl_synthea_dbt.visit_occurrence"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "person_id", "file_key_name": "models.visit_occurrence", "attached_node": "model.etl_synthea_dbt.visit_occurrence"}, "test.etl_synthea_dbt.not_null_visit_occurrence_visit_concept_id.e13dd76157": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "visit_concept_id", "model": "{{ get_where_subquery(ref('visit_occurrence')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "not_null_visit_occurrence_visit_concept_id", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "not_null_visit_occurrence_visit_concept_id.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.not_null_visit_occurrence_visit_concept_id.e13dd76157", "fqn": ["etl_synthea_dbt", "omop", "not_null_visit_occurrence_visit_concept_id"], "alias": "not_null_visit_occurrence_visit_concept_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695616067.9710615, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "visit_occurrence", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.etl_synthea_dbt.visit_occurrence"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "visit_concept_id", "file_key_name": "models.visit_occurrence", "attached_node": "model.etl_synthea_dbt.visit_occurrence"}, "test.etl_synthea_dbt.relationships_visit_occurrence_visit_concept_id__concept_id__source_vocab_concept_.989bda5e7b": {"test_metadata": {"name": "relationships", "kwargs": {"to": "source('vocab', 'concept')", "field": "concept_id", "column_name": "visit_concept_id", "model": "{{ get_where_subquery(ref('visit_occurrence')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_visit_occurrence_visit_concept_id__concept_id__source_vocab_concept_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_visit_occurrence_2ffe468b9553cd407dd512b2c71abf96.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_visit_occurrence_visit_concept_id__concept_id__source_vocab_concept_.989bda5e7b", "fqn": ["etl_synthea_dbt", "omop", "relationships_visit_occurrence_visit_concept_id__concept_id__source_vocab_concept_"], "alias": "relationships_visit_occurrence_2ffe468b9553cd407dd512b2c71abf96", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_visit_occurrence_2ffe468b9553cd407dd512b2c71abf96", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_visit_occurrence_2ffe468b9553cd407dd512b2c71abf96"}, "created_at": 1695616067.983516, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_visit_occurrence_2ffe468b9553cd407dd512b2c71abf96\") }}", "language": "sql", "refs": [{"name": "visit_occurrence", "package": null, "version": null}], "sources": [["vocab", "concept"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.etl_synthea_dbt.vocab.concept", "model.etl_synthea_dbt.visit_occurrence"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "visit_concept_id", "file_key_name": "models.visit_occurrence", "attached_node": "model.etl_synthea_dbt.visit_occurrence"}, "test.etl_synthea_dbt.not_null_visit_occurrence_visit_start_date.6ef645340a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "visit_start_date", "model": "{{ get_where_subquery(ref('visit_occurrence')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "not_null_visit_occurrence_visit_start_date", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "not_null_visit_occurrence_visit_start_date.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.not_null_visit_occurrence_visit_start_date.6ef645340a", "fqn": ["etl_synthea_dbt", "omop", "not_null_visit_occurrence_visit_start_date"], "alias": "not_null_visit_occurrence_visit_start_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695616068.0134418, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "visit_occurrence", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.etl_synthea_dbt.visit_occurrence"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "visit_start_date", "file_key_name": "models.visit_occurrence", "attached_node": "model.etl_synthea_dbt.visit_occurrence"}, "test.etl_synthea_dbt.not_null_visit_occurrence_visit_end_date.47f6967fe8": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "visit_end_date", "model": "{{ get_where_subquery(ref('visit_occurrence')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "not_null_visit_occurrence_visit_end_date", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "not_null_visit_occurrence_visit_end_date.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.not_null_visit_occurrence_visit_end_date.47f6967fe8", "fqn": ["etl_synthea_dbt", "omop", "not_null_visit_occurrence_visit_end_date"], "alias": "not_null_visit_occurrence_visit_end_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695616068.0254555, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "visit_occurrence", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.etl_synthea_dbt.visit_occurrence"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "visit_end_date", "file_key_name": "models.visit_occurrence", "attached_node": "model.etl_synthea_dbt.visit_occurrence"}, "test.etl_synthea_dbt.not_null_visit_occurrence_visit_type_concept_id.6078890882": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "visit_type_concept_id", "model": "{{ get_where_subquery(ref('visit_occurrence')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "not_null_visit_occurrence_visit_type_concept_id", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "not_null_visit_occurrence_visit_type_concept_id.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.not_null_visit_occurrence_visit_type_concept_id.6078890882", "fqn": ["etl_synthea_dbt", "omop", "not_null_visit_occurrence_visit_type_concept_id"], "alias": "not_null_visit_occurrence_visit_type_concept_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695616068.0371203, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "visit_occurrence", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.etl_synthea_dbt.visit_occurrence"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "visit_type_concept_id", "file_key_name": "models.visit_occurrence", "attached_node": "model.etl_synthea_dbt.visit_occurrence"}, "test.etl_synthea_dbt.relationships_visit_occurrence_visit_type_concept_id__concept_id__source_vocab_concept_.de192d0d82": {"test_metadata": {"name": "relationships", "kwargs": {"to": "source('vocab', 'concept')", "field": "concept_id", "column_name": "visit_type_concept_id", "model": "{{ get_where_subquery(ref('visit_occurrence')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_visit_occurrence_visit_type_concept_id__concept_id__source_vocab_concept_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_visit_occurrence_de697dd3b34fa7e8c68259a7b5acbc18.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_visit_occurrence_visit_type_concept_id__concept_id__source_vocab_concept_.de192d0d82", "fqn": ["etl_synthea_dbt", "omop", "relationships_visit_occurrence_visit_type_concept_id__concept_id__source_vocab_concept_"], "alias": "relationships_visit_occurrence_de697dd3b34fa7e8c68259a7b5acbc18", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_visit_occurrence_de697dd3b34fa7e8c68259a7b5acbc18", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_visit_occurrence_de697dd3b34fa7e8c68259a7b5acbc18"}, "created_at": 1695616068.048936, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_visit_occurrence_de697dd3b34fa7e8c68259a7b5acbc18\") }}", "language": "sql", "refs": [{"name": "visit_occurrence", "package": null, "version": null}], "sources": [["vocab", "concept"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.etl_synthea_dbt.vocab.concept", "model.etl_synthea_dbt.visit_occurrence"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "visit_type_concept_id", "file_key_name": "models.visit_occurrence", "attached_node": "model.etl_synthea_dbt.visit_occurrence"}, "test.etl_synthea_dbt.relationships_visit_occurrence_admitting_source_concept_id__concept_id__source_vocab_concept_.ee5b624dfe": {"test_metadata": {"name": "relationships", "kwargs": {"to": "source('vocab', 'concept')", "field": "concept_id", "column_name": "admitting_source_concept_id", "model": "{{ get_where_subquery(ref('visit_occurrence')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_visit_occurrence_admitting_source_concept_id__concept_id__source_vocab_concept_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_visit_occurrence_20eae096ae11bf7c45643c123d0f9c24.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_visit_occurrence_admitting_source_concept_id__concept_id__source_vocab_concept_.ee5b624dfe", "fqn": ["etl_synthea_dbt", "omop", "relationships_visit_occurrence_admitting_source_concept_id__concept_id__source_vocab_concept_"], "alias": "relationships_visit_occurrence_20eae096ae11bf7c45643c123d0f9c24", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_visit_occurrence_20eae096ae11bf7c45643c123d0f9c24", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_visit_occurrence_20eae096ae11bf7c45643c123d0f9c24"}, "created_at": 1695616068.079538, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_visit_occurrence_20eae096ae11bf7c45643c123d0f9c24\") }}", "language": "sql", "refs": [{"name": "visit_occurrence", "package": null, "version": null}], "sources": [["vocab", "concept"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.etl_synthea_dbt.vocab.concept", "model.etl_synthea_dbt.visit_occurrence"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "admitting_source_concept_id", "file_key_name": "models.visit_occurrence", "attached_node": "model.etl_synthea_dbt.visit_occurrence"}, "test.etl_synthea_dbt.relationships_visit_occurrence_discharge_to_concept_id__concept_id__source_vocab_concept_.2f4c28e6b1": {"test_metadata": {"name": "relationships", "kwargs": {"to": "source('vocab', 'concept')", "field": "concept_id", "column_name": "discharge_to_concept_id", "model": "{{ get_where_subquery(ref('visit_occurrence')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_visit_occurrence_discharge_to_concept_id__concept_id__source_vocab_concept_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_visit_occurrence_50a15696a2a57f81f5c58954a5a4ac88.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_visit_occurrence_discharge_to_concept_id__concept_id__source_vocab_concept_.2f4c28e6b1", "fqn": ["etl_synthea_dbt", "omop", "relationships_visit_occurrence_discharge_to_concept_id__concept_id__source_vocab_concept_"], "alias": "relationships_visit_occurrence_50a15696a2a57f81f5c58954a5a4ac88", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_visit_occurrence_50a15696a2a57f81f5c58954a5a4ac88", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_visit_occurrence_50a15696a2a57f81f5c58954a5a4ac88"}, "created_at": 1695616068.111331, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_visit_occurrence_50a15696a2a57f81f5c58954a5a4ac88\") }}", "language": "sql", "refs": [{"name": "visit_occurrence", "package": null, "version": null}], "sources": [["vocab", "concept"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.etl_synthea_dbt.vocab.concept", "model.etl_synthea_dbt.visit_occurrence"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "discharge_to_concept_id", "file_key_name": "models.visit_occurrence", "attached_node": "model.etl_synthea_dbt.visit_occurrence"}, "test.etl_synthea_dbt.relationships_visit_occurrence_preceding_visit_occurrence_id__visit_occurrence_id__ref_visit_occurrence_.df91dec380": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('visit_occurrence')", "field": "visit_occurrence_id", "column_name": "preceding_visit_occurrence_id", "model": "{{ get_where_subquery(ref('visit_occurrence')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_visit_occurrence_preceding_visit_occurrence_id__visit_occurrence_id__ref_visit_occurrence_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_visit_occurrence_1ea8d3359265ed7e64be7dcc87ae626a.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_visit_occurrence_preceding_visit_occurrence_id__visit_occurrence_id__ref_visit_occurrence_.df91dec380", "fqn": ["etl_synthea_dbt", "omop", "relationships_visit_occurrence_preceding_visit_occurrence_id__visit_occurrence_id__ref_visit_occurrence_"], "alias": "relationships_visit_occurrence_1ea8d3359265ed7e64be7dcc87ae626a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_visit_occurrence_1ea8d3359265ed7e64be7dcc87ae626a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_visit_occurrence_1ea8d3359265ed7e64be7dcc87ae626a"}, "created_at": 1695616068.1411421, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_visit_occurrence_1ea8d3359265ed7e64be7dcc87ae626a\") }}", "language": "sql", "refs": [{"name": "visit_occurrence", "package": null, "version": null}, {"name": "visit_occurrence", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.etl_synthea_dbt.visit_occurrence"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "preceding_visit_occurrence_id", "file_key_name": "models.visit_occurrence", "attached_node": "model.etl_synthea_dbt.visit_occurrence"}, "test.etl_synthea_dbt.unique_condition_occurrence_condition_occurrence_id.e4cb792f90": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "condition_occurrence_id", "model": "{{ get_where_subquery(ref('condition_occurrence')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "unique_condition_occurrence_condition_occurrence_id", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "unique_condition_occurrence_condition_occurrence_id.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.unique_condition_occurrence_condition_occurrence_id.e4cb792f90", "fqn": ["etl_synthea_dbt", "omop", "unique_condition_occurrence_condition_occurrence_id"], "alias": "unique_condition_occurrence_condition_occurrence_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695616068.5324354, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "condition_occurrence", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.etl_synthea_dbt.condition_occurrence"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "condition_occurrence_id", "file_key_name": "models.condition_occurrence", "attached_node": "model.etl_synthea_dbt.condition_occurrence"}, "test.etl_synthea_dbt.not_null_condition_occurrence_condition_occurrence_id.f70111fa08": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "condition_occurrence_id", "model": "{{ get_where_subquery(ref('condition_occurrence')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "not_null_condition_occurrence_condition_occurrence_id", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "not_null_condition_occurrence_condition_occurrence_id.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.not_null_condition_occurrence_condition_occurrence_id.f70111fa08", "fqn": ["etl_synthea_dbt", "omop", "not_null_condition_occurrence_condition_occurrence_id"], "alias": "not_null_condition_occurrence_condition_occurrence_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695616068.5431366, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "condition_occurrence", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.etl_synthea_dbt.condition_occurrence"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "condition_occurrence_id", "file_key_name": "models.condition_occurrence", "attached_node": "model.etl_synthea_dbt.condition_occurrence"}, "test.etl_synthea_dbt.not_null_condition_occurrence_person_id.9f19d9c9cb": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "person_id", "model": "{{ get_where_subquery(ref('condition_occurrence')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "not_null_condition_occurrence_person_id", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "not_null_condition_occurrence_person_id.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.not_null_condition_occurrence_person_id.9f19d9c9cb", "fqn": ["etl_synthea_dbt", "omop", "not_null_condition_occurrence_person_id"], "alias": "not_null_condition_occurrence_person_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695616068.5556445, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "condition_occurrence", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.etl_synthea_dbt.condition_occurrence"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "person_id", "file_key_name": "models.condition_occurrence", "attached_node": "model.etl_synthea_dbt.condition_occurrence"}, "test.etl_synthea_dbt.relationships_condition_occurrence_person_id__person_id__ref_person_.f3b716ae22": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('person')", "field": "person_id", "column_name": "person_id", "model": "{{ get_where_subquery(ref('condition_occurrence')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_condition_occurrence_person_id__person_id__ref_person_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_condition_occurr_70d61066fd4bbd0024908320d8c37b4e.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_condition_occurrence_person_id__person_id__ref_person_.f3b716ae22", "fqn": ["etl_synthea_dbt", "omop", "relationships_condition_occurrence_person_id__person_id__ref_person_"], "alias": "relationships_condition_occurr_70d61066fd4bbd0024908320d8c37b4e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_condition_occurr_70d61066fd4bbd0024908320d8c37b4e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_condition_occurr_70d61066fd4bbd0024908320d8c37b4e"}, "created_at": 1695616068.5663164, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_condition_occurr_70d61066fd4bbd0024908320d8c37b4e\") }}", "language": "sql", "refs": [{"name": "person", "package": null, "version": null}, {"name": "condition_occurrence", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.etl_synthea_dbt.person", "model.etl_synthea_dbt.condition_occurrence"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "person_id", "file_key_name": "models.condition_occurrence", "attached_node": "model.etl_synthea_dbt.condition_occurrence"}, "test.etl_synthea_dbt.relationships_condition_occurrence_condition_concept_id__concept_id__source_vocab_concept_.d920e04abd": {"test_metadata": {"name": "relationships", "kwargs": {"to": "source('vocab', 'concept')", "field": "concept_id", "column_name": "condition_concept_id", "model": "{{ get_where_subquery(ref('condition_occurrence')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_condition_occurrence_condition_concept_id__concept_id__source_vocab_concept_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_condition_occurr_8cfffcc6bfdd0ed296438bab26228741.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_condition_occurrence_condition_concept_id__concept_id__source_vocab_concept_.d920e04abd", "fqn": ["etl_synthea_dbt", "omop", "relationships_condition_occurrence_condition_concept_id__concept_id__source_vocab_concept_"], "alias": "relationships_condition_occurr_8cfffcc6bfdd0ed296438bab26228741", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_condition_occurr_8cfffcc6bfdd0ed296438bab26228741", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_condition_occurr_8cfffcc6bfdd0ed296438bab26228741"}, "created_at": 1695616068.592375, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_condition_occurr_8cfffcc6bfdd0ed296438bab26228741\") }}", "language": "sql", "refs": [{"name": "condition_occurrence", "package": null, "version": null}], "sources": [["vocab", "concept"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.etl_synthea_dbt.vocab.concept", "model.etl_synthea_dbt.condition_occurrence"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "condition_concept_id", "file_key_name": "models.condition_occurrence", "attached_node": "model.etl_synthea_dbt.condition_occurrence"}, "test.etl_synthea_dbt.not_null_condition_occurrence_condition_start_date.6cbb11717a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "condition_start_date", "model": "{{ get_where_subquery(ref('condition_occurrence')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "not_null_condition_occurrence_condition_start_date", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "not_null_condition_occurrence_condition_start_date.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.not_null_condition_occurrence_condition_start_date.6cbb11717a", "fqn": ["etl_synthea_dbt", "omop", "not_null_condition_occurrence_condition_start_date"], "alias": "not_null_condition_occurrence_condition_start_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695616068.618632, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "condition_occurrence", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.etl_synthea_dbt.condition_occurrence"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "condition_start_date", "file_key_name": "models.condition_occurrence", "attached_node": "model.etl_synthea_dbt.condition_occurrence"}, "test.etl_synthea_dbt.not_null_condition_occurrence_condition_type_concept_id.13b95f8e19": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "condition_type_concept_id", "model": "{{ get_where_subquery(ref('condition_occurrence')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "not_null_condition_occurrence_condition_type_concept_id", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "not_null_condition_occurrence_condition_type_concept_id.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.not_null_condition_occurrence_condition_type_concept_id.13b95f8e19", "fqn": ["etl_synthea_dbt", "omop", "not_null_condition_occurrence_condition_type_concept_id"], "alias": "not_null_condition_occurrence_condition_type_concept_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695616068.6293125, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "condition_occurrence", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.etl_synthea_dbt.condition_occurrence"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "condition_type_concept_id", "file_key_name": "models.condition_occurrence", "attached_node": "model.etl_synthea_dbt.condition_occurrence"}, "test.etl_synthea_dbt.relationships_condition_occurrence_condition_type_concept_id__concept_id__source_vocab_concept_.42f881e4a7": {"test_metadata": {"name": "relationships", "kwargs": {"to": "source('vocab', 'concept')", "field": "concept_id", "column_name": "condition_type_concept_id", "model": "{{ get_where_subquery(ref('condition_occurrence')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_condition_occurrence_condition_type_concept_id__concept_id__source_vocab_concept_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_condition_occurr_9fc14ab79c532c65b536ce236ca59b56.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_condition_occurrence_condition_type_concept_id__concept_id__source_vocab_concept_.42f881e4a7", "fqn": ["etl_synthea_dbt", "omop", "relationships_condition_occurrence_condition_type_concept_id__concept_id__source_vocab_concept_"], "alias": "relationships_condition_occurr_9fc14ab79c532c65b536ce236ca59b56", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_condition_occurr_9fc14ab79c532c65b536ce236ca59b56", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_condition_occurr_9fc14ab79c532c65b536ce236ca59b56"}, "created_at": 1695616068.6401222, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_condition_occurr_9fc14ab79c532c65b536ce236ca59b56\") }}", "language": "sql", "refs": [{"name": "condition_occurrence", "package": null, "version": null}], "sources": [["vocab", "concept"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.etl_synthea_dbt.vocab.concept", "model.etl_synthea_dbt.condition_occurrence"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "condition_type_concept_id", "file_key_name": "models.condition_occurrence", "attached_node": "model.etl_synthea_dbt.condition_occurrence"}, "test.etl_synthea_dbt.relationships_condition_occurrence_condition_status_source_value__concept_id__source_vocab_concept_.05a987e39c": {"test_metadata": {"name": "relationships", "kwargs": {"to": "source('vocab', 'concept')", "field": "concept_id", "column_name": "condition_status_source_value", "model": "{{ get_where_subquery(ref('condition_occurrence')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_condition_occurrence_condition_status_source_value__concept_id__source_vocab_concept_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_condition_occurr_0058630cd4ab6cecd3d92b1e28337643.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_condition_occurrence_condition_status_source_value__concept_id__source_vocab_concept_.05a987e39c", "fqn": ["etl_synthea_dbt", "omop", "relationships_condition_occurrence_condition_status_source_value__concept_id__source_vocab_concept_"], "alias": "relationships_condition_occurr_0058630cd4ab6cecd3d92b1e28337643", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_condition_occurr_0058630cd4ab6cecd3d92b1e28337643", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_condition_occurr_0058630cd4ab6cecd3d92b1e28337643"}, "created_at": 1695616068.6672728, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_condition_occurr_0058630cd4ab6cecd3d92b1e28337643\") }}", "language": "sql", "refs": [{"name": "condition_occurrence", "package": null, "version": null}], "sources": [["vocab", "concept"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.etl_synthea_dbt.vocab.concept", "model.etl_synthea_dbt.condition_occurrence"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "condition_status_source_value", "file_key_name": "models.condition_occurrence", "attached_node": "model.etl_synthea_dbt.condition_occurrence"}, "test.etl_synthea_dbt.relationships_condition_occurrence_provider_id__provider_id__ref_provider_.b75b05445b": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('provider')", "field": "provider_id", "column_name": "provider_id", "model": "{{ get_where_subquery(ref('condition_occurrence')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_condition_occurrence_provider_id__provider_id__ref_provider_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_condition_occurr_0fa684bdd8f73e0c1ad8d1b92150cfbe.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_condition_occurrence_provider_id__provider_id__ref_provider_.b75b05445b", "fqn": ["etl_synthea_dbt", "omop", "relationships_condition_occurrence_provider_id__provider_id__ref_provider_"], "alias": "relationships_condition_occurr_0fa684bdd8f73e0c1ad8d1b92150cfbe", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_condition_occurr_0fa684bdd8f73e0c1ad8d1b92150cfbe", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_condition_occurr_0fa684bdd8f73e0c1ad8d1b92150cfbe"}, "created_at": 1695616068.6941175, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_condition_occurr_0fa684bdd8f73e0c1ad8d1b92150cfbe\") }}", "language": "sql", "refs": [{"name": "provider", "package": null, "version": null}, {"name": "condition_occurrence", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.etl_synthea_dbt.provider", "model.etl_synthea_dbt.condition_occurrence"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "provider_id", "file_key_name": "models.condition_occurrence", "attached_node": "model.etl_synthea_dbt.condition_occurrence"}, "test.etl_synthea_dbt.relationships_condition_occurrence_visit_occurrence_id__visit_occurrence_id__ref_visit_occurrence_.2e469f049b": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('visit_occurrence')", "field": "visit_occurrence_id", "column_name": "visit_occurrence_id", "model": "{{ get_where_subquery(ref('condition_occurrence')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_condition_occurrence_visit_occurrence_id__visit_occurrence_id__ref_visit_occurrence_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_condition_occurr_c350892fc7166adb09c751cb002215ce.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_condition_occurrence_visit_occurrence_id__visit_occurrence_id__ref_visit_occurrence_.2e469f049b", "fqn": ["etl_synthea_dbt", "omop", "relationships_condition_occurrence_visit_occurrence_id__visit_occurrence_id__ref_visit_occurrence_"], "alias": "relationships_condition_occurr_c350892fc7166adb09c751cb002215ce", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_condition_occurr_c350892fc7166adb09c751cb002215ce", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_condition_occurr_c350892fc7166adb09c751cb002215ce"}, "created_at": 1695616068.7214293, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_condition_occurr_c350892fc7166adb09c751cb002215ce\") }}", "language": "sql", "refs": [{"name": "visit_occurrence", "package": null, "version": null}, {"name": "condition_occurrence", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.etl_synthea_dbt.visit_occurrence", "model.etl_synthea_dbt.condition_occurrence"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "visit_occurrence_id", "file_key_name": "models.condition_occurrence", "attached_node": "model.etl_synthea_dbt.condition_occurrence"}, "test.etl_synthea_dbt.relationships_condition_occurrence_visit_detail_id__visit_detail_id__ref_visit_detail_.fc073d5579": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('visit_detail')", "field": "visit_detail_id", "column_name": "visit_detail_id", "model": "{{ get_where_subquery(ref('condition_occurrence')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_condition_occurrence_visit_detail_id__visit_detail_id__ref_visit_detail_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_condition_occurr_610f888bb45e77313bb70f261c28a924.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_condition_occurrence_visit_detail_id__visit_detail_id__ref_visit_detail_.fc073d5579", "fqn": ["etl_synthea_dbt", "omop", "relationships_condition_occurrence_visit_detail_id__visit_detail_id__ref_visit_detail_"], "alias": "relationships_condition_occurr_610f888bb45e77313bb70f261c28a924", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_condition_occurr_610f888bb45e77313bb70f261c28a924", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_condition_occurr_610f888bb45e77313bb70f261c28a924"}, "created_at": 1695616068.747543, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_condition_occurr_610f888bb45e77313bb70f261c28a924\") }}", "language": "sql", "refs": [{"name": "visit_detail", "package": null, "version": null}, {"name": "condition_occurrence", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.etl_synthea_dbt.visit_detail", "model.etl_synthea_dbt.condition_occurrence"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "visit_detail_id", "file_key_name": "models.condition_occurrence", "attached_node": "model.etl_synthea_dbt.condition_occurrence"}, "test.etl_synthea_dbt.relationships_condition_occurrence_condition_source_concept_id__concept_id__source_vocab_concept_.1f641311f0": {"test_metadata": {"name": "relationships", "kwargs": {"to": "source('vocab', 'concept')", "field": "concept_id", "column_name": "condition_source_concept_id", "model": "{{ get_where_subquery(ref('condition_occurrence')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_condition_occurrence_condition_source_concept_id__concept_id__source_vocab_concept_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_condition_occurr_c91e95c5a1d70bb37411686fa9dc924f.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_condition_occurrence_condition_source_concept_id__concept_id__source_vocab_concept_.1f641311f0", "fqn": ["etl_synthea_dbt", "omop", "relationships_condition_occurrence_condition_source_concept_id__concept_id__source_vocab_concept_"], "alias": "relationships_condition_occurr_c91e95c5a1d70bb37411686fa9dc924f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_condition_occurr_c91e95c5a1d70bb37411686fa9dc924f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_condition_occurr_c91e95c5a1d70bb37411686fa9dc924f"}, "created_at": 1695616068.7729564, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_condition_occurr_c91e95c5a1d70bb37411686fa9dc924f\") }}", "language": "sql", "refs": [{"name": "condition_occurrence", "package": null, "version": null}], "sources": [["vocab", "concept"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.etl_synthea_dbt.vocab.concept", "model.etl_synthea_dbt.condition_occurrence"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "condition_source_concept_id", "file_key_name": "models.condition_occurrence", "attached_node": "model.etl_synthea_dbt.condition_occurrence"}, "test.etl_synthea_dbt.unique_drug_exposure_drug_exposure_id.6e11199bfc": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "drug_exposure_id", "model": "{{ get_where_subquery(ref('drug_exposure')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "unique_drug_exposure_drug_exposure_id", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "unique_drug_exposure_drug_exposure_id.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.unique_drug_exposure_drug_exposure_id.6e11199bfc", "fqn": ["etl_synthea_dbt", "omop", "unique_drug_exposure_drug_exposure_id"], "alias": "unique_drug_exposure_drug_exposure_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695616068.799261, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "drug_exposure", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.etl_synthea_dbt.drug_exposure"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "drug_exposure_id", "file_key_name": "models.drug_exposure", "attached_node": "model.etl_synthea_dbt.drug_exposure"}, "test.etl_synthea_dbt.not_null_drug_exposure_drug_exposure_id.a57f0904e3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "drug_exposure_id", "model": "{{ get_where_subquery(ref('drug_exposure')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "not_null_drug_exposure_drug_exposure_id", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "not_null_drug_exposure_drug_exposure_id.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.not_null_drug_exposure_drug_exposure_id.a57f0904e3", "fqn": ["etl_synthea_dbt", "omop", "not_null_drug_exposure_drug_exposure_id"], "alias": "not_null_drug_exposure_drug_exposure_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695616068.809875, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "drug_exposure", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.etl_synthea_dbt.drug_exposure"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "drug_exposure_id", "file_key_name": "models.drug_exposure", "attached_node": "model.etl_synthea_dbt.drug_exposure"}, "test.etl_synthea_dbt.not_null_drug_exposure_person_id.e6d75aa2b9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "person_id", "model": "{{ get_where_subquery(ref('drug_exposure')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "not_null_drug_exposure_person_id", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "not_null_drug_exposure_person_id.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.not_null_drug_exposure_person_id.e6d75aa2b9", "fqn": ["etl_synthea_dbt", "omop", "not_null_drug_exposure_person_id"], "alias": "not_null_drug_exposure_person_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695616068.8204412, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "drug_exposure", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.etl_synthea_dbt.drug_exposure"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "person_id", "file_key_name": "models.drug_exposure", "attached_node": "model.etl_synthea_dbt.drug_exposure"}, "test.etl_synthea_dbt.relationships_drug_exposure_person_id__person_id__ref_person_.811ae7ceb8": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('person')", "field": "person_id", "column_name": "person_id", "model": "{{ get_where_subquery(ref('drug_exposure')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_drug_exposure_person_id__person_id__ref_person_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_drug_exposure_person_id__person_id__ref_person_.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_drug_exposure_person_id__person_id__ref_person_.811ae7ceb8", "fqn": ["etl_synthea_dbt", "omop", "relationships_drug_exposure_person_id__person_id__ref_person_"], "alias": "relationships_drug_exposure_person_id__person_id__ref_person_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695616068.8311439, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "person", "package": null, "version": null}, {"name": "drug_exposure", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.etl_synthea_dbt.person", "model.etl_synthea_dbt.drug_exposure"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "person_id", "file_key_name": "models.drug_exposure", "attached_node": "model.etl_synthea_dbt.drug_exposure"}, "test.etl_synthea_dbt.not_null_drug_exposure_drug_concept_id.f309abd476": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "drug_concept_id", "model": "{{ get_where_subquery(ref('drug_exposure')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "not_null_drug_exposure_drug_concept_id", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "not_null_drug_exposure_drug_concept_id.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.not_null_drug_exposure_drug_concept_id.f309abd476", "fqn": ["etl_synthea_dbt", "omop", "not_null_drug_exposure_drug_concept_id"], "alias": "not_null_drug_exposure_drug_concept_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695616068.8567593, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "drug_exposure", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.etl_synthea_dbt.drug_exposure"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "drug_concept_id", "file_key_name": "models.drug_exposure", "attached_node": "model.etl_synthea_dbt.drug_exposure"}, "test.etl_synthea_dbt.relationships_drug_exposure_drug_concept_id__concept_id__source_vocab_concept_.e3645bdcef": {"test_metadata": {"name": "relationships", "kwargs": {"to": "source('vocab', 'concept')", "field": "concept_id", "column_name": "drug_concept_id", "model": "{{ get_where_subquery(ref('drug_exposure')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_drug_exposure_drug_concept_id__concept_id__source_vocab_concept_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_drug_exposure_f90642b050c7d5443950a30504570815.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_drug_exposure_drug_concept_id__concept_id__source_vocab_concept_.e3645bdcef", "fqn": ["etl_synthea_dbt", "omop", "relationships_drug_exposure_drug_concept_id__concept_id__source_vocab_concept_"], "alias": "relationships_drug_exposure_f90642b050c7d5443950a30504570815", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_drug_exposure_f90642b050c7d5443950a30504570815", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_drug_exposure_f90642b050c7d5443950a30504570815"}, "created_at": 1695616068.8674574, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_drug_exposure_f90642b050c7d5443950a30504570815\") }}", "language": "sql", "refs": [{"name": "drug_exposure", "package": null, "version": null}], "sources": [["vocab", "concept"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.etl_synthea_dbt.vocab.concept", "model.etl_synthea_dbt.drug_exposure"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "drug_concept_id", "file_key_name": "models.drug_exposure", "attached_node": "model.etl_synthea_dbt.drug_exposure"}, "test.etl_synthea_dbt.not_null_drug_exposure_drug_exposure_start_date.61d182cfaa": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "drug_exposure_start_date", "model": "{{ get_where_subquery(ref('drug_exposure')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "not_null_drug_exposure_drug_exposure_start_date", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "not_null_drug_exposure_drug_exposure_start_date.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.not_null_drug_exposure_drug_exposure_start_date.61d182cfaa", "fqn": ["etl_synthea_dbt", "omop", "not_null_drug_exposure_drug_exposure_start_date"], "alias": "not_null_drug_exposure_drug_exposure_start_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695616068.894131, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "drug_exposure", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.etl_synthea_dbt.drug_exposure"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "drug_exposure_start_date", "file_key_name": "models.drug_exposure", "attached_node": "model.etl_synthea_dbt.drug_exposure"}, "test.etl_synthea_dbt.not_null_drug_exposure_drug_exposure_end_date.89e020fdd4": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "drug_exposure_end_date", "model": "{{ get_where_subquery(ref('drug_exposure')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "not_null_drug_exposure_drug_exposure_end_date", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "not_null_drug_exposure_drug_exposure_end_date.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.not_null_drug_exposure_drug_exposure_end_date.89e020fdd4", "fqn": ["etl_synthea_dbt", "omop", "not_null_drug_exposure_drug_exposure_end_date"], "alias": "not_null_drug_exposure_drug_exposure_end_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695616068.9048207, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "drug_exposure", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.etl_synthea_dbt.drug_exposure"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "drug_exposure_end_date", "file_key_name": "models.drug_exposure", "attached_node": "model.etl_synthea_dbt.drug_exposure"}, "test.etl_synthea_dbt.not_null_drug_exposure_drug_type_concept_id.5e130283b2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "drug_type_concept_id", "model": "{{ get_where_subquery(ref('drug_exposure')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "not_null_drug_exposure_drug_type_concept_id", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "not_null_drug_exposure_drug_type_concept_id.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.not_null_drug_exposure_drug_type_concept_id.5e130283b2", "fqn": ["etl_synthea_dbt", "omop", "not_null_drug_exposure_drug_type_concept_id"], "alias": "not_null_drug_exposure_drug_type_concept_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695616068.915714, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "drug_exposure", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.etl_synthea_dbt.drug_exposure"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "drug_type_concept_id", "file_key_name": "models.drug_exposure", "attached_node": "model.etl_synthea_dbt.drug_exposure"}, "test.etl_synthea_dbt.relationships_drug_exposure_drug_type_concept_id__concept_id__source_vocab_concept_.e775235ffd": {"test_metadata": {"name": "relationships", "kwargs": {"to": "source('vocab', 'concept')", "field": "concept_id", "column_name": "drug_type_concept_id", "model": "{{ get_where_subquery(ref('drug_exposure')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_drug_exposure_drug_type_concept_id__concept_id__source_vocab_concept_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_drug_exposure_5301526721e34c699414bed441fc4b02.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_drug_exposure_drug_type_concept_id__concept_id__source_vocab_concept_.e775235ffd", "fqn": ["etl_synthea_dbt", "omop", "relationships_drug_exposure_drug_type_concept_id__concept_id__source_vocab_concept_"], "alias": "relationships_drug_exposure_5301526721e34c699414bed441fc4b02", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_drug_exposure_5301526721e34c699414bed441fc4b02", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_drug_exposure_5301526721e34c699414bed441fc4b02"}, "created_at": 1695616068.9264886, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_drug_exposure_5301526721e34c699414bed441fc4b02\") }}", "language": "sql", "refs": [{"name": "drug_exposure", "package": null, "version": null}], "sources": [["vocab", "concept"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.etl_synthea_dbt.vocab.concept", "model.etl_synthea_dbt.drug_exposure"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "drug_type_concept_id", "file_key_name": "models.drug_exposure", "attached_node": "model.etl_synthea_dbt.drug_exposure"}, "test.etl_synthea_dbt.relationships_drug_exposure_route_concept_id__concept_id__source_vocab_concept_.67158eaf74": {"test_metadata": {"name": "relationships", "kwargs": {"to": "source('vocab', 'concept')", "field": "concept_id", "column_name": "route_concept_id", "model": "{{ get_where_subquery(ref('drug_exposure')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_drug_exposure_route_concept_id__concept_id__source_vocab_concept_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_drug_exposure_647dca0e114f4ef007bc10c56e9de6fe.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_drug_exposure_route_concept_id__concept_id__source_vocab_concept_.67158eaf74", "fqn": ["etl_synthea_dbt", "omop", "relationships_drug_exposure_route_concept_id__concept_id__source_vocab_concept_"], "alias": "relationships_drug_exposure_647dca0e114f4ef007bc10c56e9de6fe", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_drug_exposure_647dca0e114f4ef007bc10c56e9de6fe", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_drug_exposure_647dca0e114f4ef007bc10c56e9de6fe"}, "created_at": 1695616068.9533477, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_drug_exposure_647dca0e114f4ef007bc10c56e9de6fe\") }}", "language": "sql", "refs": [{"name": "drug_exposure", "package": null, "version": null}], "sources": [["vocab", "concept"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.etl_synthea_dbt.vocab.concept", "model.etl_synthea_dbt.drug_exposure"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "route_concept_id", "file_key_name": "models.drug_exposure", "attached_node": "model.etl_synthea_dbt.drug_exposure"}, "test.etl_synthea_dbt.relationships_drug_exposure_provider_id__provider_id__ref_provider_.022f932272": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('provider')", "field": "provider_id", "column_name": "provider_id", "model": "{{ get_where_subquery(ref('drug_exposure')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_drug_exposure_provider_id__provider_id__ref_provider_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_drug_exposure_efbb5dc3e2eef049933c2d58a56d666b.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_drug_exposure_provider_id__provider_id__ref_provider_.022f932272", "fqn": ["etl_synthea_dbt", "omop", "relationships_drug_exposure_provider_id__provider_id__ref_provider_"], "alias": "relationships_drug_exposure_efbb5dc3e2eef049933c2d58a56d666b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_drug_exposure_efbb5dc3e2eef049933c2d58a56d666b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_drug_exposure_efbb5dc3e2eef049933c2d58a56d666b"}, "created_at": 1695616068.9793997, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_drug_exposure_efbb5dc3e2eef049933c2d58a56d666b\") }}", "language": "sql", "refs": [{"name": "provider", "package": null, "version": null}, {"name": "drug_exposure", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.etl_synthea_dbt.provider", "model.etl_synthea_dbt.drug_exposure"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "provider_id", "file_key_name": "models.drug_exposure", "attached_node": "model.etl_synthea_dbt.drug_exposure"}, "test.etl_synthea_dbt.relationships_drug_exposure_visit_occurrence_id__visit_occurrence_id__ref_visit_occurrence_.a7ed7dfcb5": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('visit_occurrence')", "field": "visit_occurrence_id", "column_name": "visit_occurrence_id", "model": "{{ get_where_subquery(ref('drug_exposure')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_drug_exposure_visit_occurrence_id__visit_occurrence_id__ref_visit_occurrence_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_drug_exposure_5b56dd03399aa9313e62fcd30a813f24.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_drug_exposure_visit_occurrence_id__visit_occurrence_id__ref_visit_occurrence_.a7ed7dfcb5", "fqn": ["etl_synthea_dbt", "omop", "relationships_drug_exposure_visit_occurrence_id__visit_occurrence_id__ref_visit_occurrence_"], "alias": "relationships_drug_exposure_5b56dd03399aa9313e62fcd30a813f24", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_drug_exposure_5b56dd03399aa9313e62fcd30a813f24", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_drug_exposure_5b56dd03399aa9313e62fcd30a813f24"}, "created_at": 1695616069.0055537, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_drug_exposure_5b56dd03399aa9313e62fcd30a813f24\") }}", "language": "sql", "refs": [{"name": "visit_occurrence", "package": null, "version": null}, {"name": "drug_exposure", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.etl_synthea_dbt.visit_occurrence", "model.etl_synthea_dbt.drug_exposure"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "visit_occurrence_id", "file_key_name": "models.drug_exposure", "attached_node": "model.etl_synthea_dbt.drug_exposure"}, "test.etl_synthea_dbt.relationships_drug_exposure_visit_detail_id__visit_detail_id__ref_visit_detail_.770b0c9b99": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('visit_detail')", "field": "visit_detail_id", "column_name": "visit_detail_id", "model": "{{ get_where_subquery(ref('drug_exposure')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_drug_exposure_visit_detail_id__visit_detail_id__ref_visit_detail_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_drug_exposure_d448c555f288907cdbdb56d31d4c2a69.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_drug_exposure_visit_detail_id__visit_detail_id__ref_visit_detail_.770b0c9b99", "fqn": ["etl_synthea_dbt", "omop", "relationships_drug_exposure_visit_detail_id__visit_detail_id__ref_visit_detail_"], "alias": "relationships_drug_exposure_d448c555f288907cdbdb56d31d4c2a69", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_drug_exposure_d448c555f288907cdbdb56d31d4c2a69", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_drug_exposure_d448c555f288907cdbdb56d31d4c2a69"}, "created_at": 1695616069.031552, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_drug_exposure_d448c555f288907cdbdb56d31d4c2a69\") }}", "language": "sql", "refs": [{"name": "visit_detail", "package": null, "version": null}, {"name": "drug_exposure", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.etl_synthea_dbt.visit_detail", "model.etl_synthea_dbt.drug_exposure"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "visit_detail_id", "file_key_name": "models.drug_exposure", "attached_node": "model.etl_synthea_dbt.drug_exposure"}, "test.etl_synthea_dbt.relationships_drug_exposure_drug_source_concept_id__concept_id__source_vocab_concept_.7dff7fc1d2": {"test_metadata": {"name": "relationships", "kwargs": {"to": "source('vocab', 'concept')", "field": "concept_id", "column_name": "drug_source_concept_id", "model": "{{ get_where_subquery(ref('drug_exposure')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_drug_exposure_drug_source_concept_id__concept_id__source_vocab_concept_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_drug_exposure_404d4eb1ca62279b6e6d77d9a9c0bff3.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_drug_exposure_drug_source_concept_id__concept_id__source_vocab_concept_.7dff7fc1d2", "fqn": ["etl_synthea_dbt", "omop", "relationships_drug_exposure_drug_source_concept_id__concept_id__source_vocab_concept_"], "alias": "relationships_drug_exposure_404d4eb1ca62279b6e6d77d9a9c0bff3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_drug_exposure_404d4eb1ca62279b6e6d77d9a9c0bff3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_drug_exposure_404d4eb1ca62279b6e6d77d9a9c0bff3"}, "created_at": 1695616069.0570378, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_drug_exposure_404d4eb1ca62279b6e6d77d9a9c0bff3\") }}", "language": "sql", "refs": [{"name": "drug_exposure", "package": null, "version": null}], "sources": [["vocab", "concept"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.etl_synthea_dbt.vocab.concept", "model.etl_synthea_dbt.drug_exposure"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "drug_source_concept_id", "file_key_name": "models.drug_exposure", "attached_node": "model.etl_synthea_dbt.drug_exposure"}, "test.etl_synthea_dbt.unique_device_exposure_device_exposure_id.cdcba3488d": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "device_exposure_id", "model": "{{ get_where_subquery(ref('device_exposure')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "unique_device_exposure_device_exposure_id", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "unique_device_exposure_device_exposure_id.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.unique_device_exposure_device_exposure_id.cdcba3488d", "fqn": ["etl_synthea_dbt", "omop", "unique_device_exposure_device_exposure_id"], "alias": "unique_device_exposure_device_exposure_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695616069.4230525, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "device_exposure", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.etl_synthea_dbt.device_exposure"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "device_exposure_id", "file_key_name": "models.device_exposure", "attached_node": "model.etl_synthea_dbt.device_exposure"}, "test.etl_synthea_dbt.not_null_device_exposure_device_exposure_id.ab1d5a2fe5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "device_exposure_id", "model": "{{ get_where_subquery(ref('device_exposure')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "not_null_device_exposure_device_exposure_id", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "not_null_device_exposure_device_exposure_id.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.not_null_device_exposure_device_exposure_id.ab1d5a2fe5", "fqn": ["etl_synthea_dbt", "omop", "not_null_device_exposure_device_exposure_id"], "alias": "not_null_device_exposure_device_exposure_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695616069.4336107, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "device_exposure", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.etl_synthea_dbt.device_exposure"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "device_exposure_id", "file_key_name": "models.device_exposure", "attached_node": "model.etl_synthea_dbt.device_exposure"}, "test.etl_synthea_dbt.not_null_device_exposure_person_id.1330a61d39": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "person_id", "model": "{{ get_where_subquery(ref('device_exposure')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "not_null_device_exposure_person_id", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "not_null_device_exposure_person_id.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.not_null_device_exposure_person_id.1330a61d39", "fqn": ["etl_synthea_dbt", "omop", "not_null_device_exposure_person_id"], "alias": "not_null_device_exposure_person_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695616069.4465692, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "device_exposure", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.etl_synthea_dbt.device_exposure"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "person_id", "file_key_name": "models.device_exposure", "attached_node": "model.etl_synthea_dbt.device_exposure"}, "test.etl_synthea_dbt.relationships_device_exposure_person_id__person_id__ref_person_.894d3b47b9": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('person')", "field": "person_id", "column_name": "person_id", "model": "{{ get_where_subquery(ref('device_exposure')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_device_exposure_person_id__person_id__ref_person_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_device_exposure_person_id__person_id__ref_person_.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_device_exposure_person_id__person_id__ref_person_.894d3b47b9", "fqn": ["etl_synthea_dbt", "omop", "relationships_device_exposure_person_id__person_id__ref_person_"], "alias": "relationships_device_exposure_person_id__person_id__ref_person_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695616069.4602022, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "person", "package": null, "version": null}, {"name": "device_exposure", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.etl_synthea_dbt.person", "model.etl_synthea_dbt.device_exposure"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "person_id", "file_key_name": "models.device_exposure", "attached_node": "model.etl_synthea_dbt.device_exposure"}, "test.etl_synthea_dbt.not_null_device_exposure_device_concept_id.041c422e55": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "device_concept_id", "model": "{{ get_where_subquery(ref('device_exposure')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "not_null_device_exposure_device_concept_id", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "not_null_device_exposure_device_concept_id.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.not_null_device_exposure_device_concept_id.041c422e55", "fqn": ["etl_synthea_dbt", "omop", "not_null_device_exposure_device_concept_id"], "alias": "not_null_device_exposure_device_concept_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695616069.489223, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "device_exposure", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.etl_synthea_dbt.device_exposure"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "device_concept_id", "file_key_name": "models.device_exposure", "attached_node": "model.etl_synthea_dbt.device_exposure"}, "test.etl_synthea_dbt.relationships_device_exposure_device_concept_id__concept_id__source_vocab_concept_.2545c0bdf6": {"test_metadata": {"name": "relationships", "kwargs": {"to": "source('vocab', 'concept')", "field": "concept_id", "column_name": "device_concept_id", "model": "{{ get_where_subquery(ref('device_exposure')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_device_exposure_device_concept_id__concept_id__source_vocab_concept_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_device_exposure_9bf6fc156115af665b4412f1f7fba6cb.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_device_exposure_device_concept_id__concept_id__source_vocab_concept_.2545c0bdf6", "fqn": ["etl_synthea_dbt", "omop", "relationships_device_exposure_device_concept_id__concept_id__source_vocab_concept_"], "alias": "relationships_device_exposure_9bf6fc156115af665b4412f1f7fba6cb", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_device_exposure_9bf6fc156115af665b4412f1f7fba6cb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_device_exposure_9bf6fc156115af665b4412f1f7fba6cb"}, "created_at": 1695616069.5009203, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_device_exposure_9bf6fc156115af665b4412f1f7fba6cb\") }}", "language": "sql", "refs": [{"name": "device_exposure", "package": null, "version": null}], "sources": [["vocab", "concept"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.etl_synthea_dbt.vocab.concept", "model.etl_synthea_dbt.device_exposure"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "device_concept_id", "file_key_name": "models.device_exposure", "attached_node": "model.etl_synthea_dbt.device_exposure"}, "test.etl_synthea_dbt.not_null_device_exposure_device_exposure_start_date.23aa3e8aea": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "device_exposure_start_date", "model": "{{ get_where_subquery(ref('device_exposure')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "not_null_device_exposure_device_exposure_start_date", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "not_null_device_exposure_device_exposure_start_date.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.not_null_device_exposure_device_exposure_start_date.23aa3e8aea", "fqn": ["etl_synthea_dbt", "omop", "not_null_device_exposure_device_exposure_start_date"], "alias": "not_null_device_exposure_device_exposure_start_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695616069.5272524, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "device_exposure", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.etl_synthea_dbt.device_exposure"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "device_exposure_start_date", "file_key_name": "models.device_exposure", "attached_node": "model.etl_synthea_dbt.device_exposure"}, "test.etl_synthea_dbt.not_null_device_exposure_device_type_concept_id.9600b2592d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "device_type_concept_id", "model": "{{ get_where_subquery(ref('device_exposure')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "not_null_device_exposure_device_type_concept_id", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "not_null_device_exposure_device_type_concept_id.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.not_null_device_exposure_device_type_concept_id.9600b2592d", "fqn": ["etl_synthea_dbt", "omop", "not_null_device_exposure_device_type_concept_id"], "alias": "not_null_device_exposure_device_type_concept_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695616069.537976, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "device_exposure", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.etl_synthea_dbt.device_exposure"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "device_type_concept_id", "file_key_name": "models.device_exposure", "attached_node": "model.etl_synthea_dbt.device_exposure"}, "test.etl_synthea_dbt.relationships_device_exposure_device_type_concept_id__concept_id__source_vocab_concept_.e48c3d4798": {"test_metadata": {"name": "relationships", "kwargs": {"to": "source('vocab', 'concept')", "field": "concept_id", "column_name": "device_type_concept_id", "model": "{{ get_where_subquery(ref('device_exposure')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_device_exposure_device_type_concept_id__concept_id__source_vocab_concept_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_device_exposure_59cee649d50a1ada203df168158cd8ce.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_device_exposure_device_type_concept_id__concept_id__source_vocab_concept_.e48c3d4798", "fqn": ["etl_synthea_dbt", "omop", "relationships_device_exposure_device_type_concept_id__concept_id__source_vocab_concept_"], "alias": "relationships_device_exposure_59cee649d50a1ada203df168158cd8ce", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_device_exposure_59cee649d50a1ada203df168158cd8ce", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_device_exposure_59cee649d50a1ada203df168158cd8ce"}, "created_at": 1695616069.549616, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_device_exposure_59cee649d50a1ada203df168158cd8ce\") }}", "language": "sql", "refs": [{"name": "device_exposure", "package": null, "version": null}], "sources": [["vocab", "concept"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.etl_synthea_dbt.vocab.concept", "model.etl_synthea_dbt.device_exposure"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "device_type_concept_id", "file_key_name": "models.device_exposure", "attached_node": "model.etl_synthea_dbt.device_exposure"}, "test.etl_synthea_dbt.relationships_device_exposure_provider_id__provider_id__ref_provider_.23736ac216": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('provider')", "field": "provider_id", "column_name": "provider_id", "model": "{{ get_where_subquery(ref('device_exposure')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_device_exposure_provider_id__provider_id__ref_provider_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_device_exposure_c23d5b1e8be6f24b620097448dce7be1.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_device_exposure_provider_id__provider_id__ref_provider_.23736ac216", "fqn": ["etl_synthea_dbt", "omop", "relationships_device_exposure_provider_id__provider_id__ref_provider_"], "alias": "relationships_device_exposure_c23d5b1e8be6f24b620097448dce7be1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_device_exposure_c23d5b1e8be6f24b620097448dce7be1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_device_exposure_c23d5b1e8be6f24b620097448dce7be1"}, "created_at": 1695616069.5759192, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_device_exposure_c23d5b1e8be6f24b620097448dce7be1\") }}", "language": "sql", "refs": [{"name": "provider", "package": null, "version": null}, {"name": "device_exposure", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.etl_synthea_dbt.provider", "model.etl_synthea_dbt.device_exposure"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "provider_id", "file_key_name": "models.device_exposure", "attached_node": "model.etl_synthea_dbt.device_exposure"}, "test.etl_synthea_dbt.relationships_device_exposure_visit_occurrence_id__visit_occurrence_id__ref_visit_occurrence_.c993394705": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('visit_occurrence')", "field": "visit_occurrence_id", "column_name": "visit_occurrence_id", "model": "{{ get_where_subquery(ref('device_exposure')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_device_exposure_visit_occurrence_id__visit_occurrence_id__ref_visit_occurrence_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_device_exposure_1c796c22b2054fbd59571baecf3dbe2e.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_device_exposure_visit_occurrence_id__visit_occurrence_id__ref_visit_occurrence_.c993394705", "fqn": ["etl_synthea_dbt", "omop", "relationships_device_exposure_visit_occurrence_id__visit_occurrence_id__ref_visit_occurrence_"], "alias": "relationships_device_exposure_1c796c22b2054fbd59571baecf3dbe2e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_device_exposure_1c796c22b2054fbd59571baecf3dbe2e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_device_exposure_1c796c22b2054fbd59571baecf3dbe2e"}, "created_at": 1695616069.6024888, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_device_exposure_1c796c22b2054fbd59571baecf3dbe2e\") }}", "language": "sql", "refs": [{"name": "visit_occurrence", "package": null, "version": null}, {"name": "device_exposure", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.etl_synthea_dbt.visit_occurrence", "model.etl_synthea_dbt.device_exposure"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "visit_occurrence_id", "file_key_name": "models.device_exposure", "attached_node": "model.etl_synthea_dbt.device_exposure"}, "test.etl_synthea_dbt.relationships_device_exposure_visit_detail_id__visit_detail_id__ref_visit_detail_.c064b67cdb": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('visit_detail')", "field": "visit_detail_id", "column_name": "visit_detail_id", "model": "{{ get_where_subquery(ref('device_exposure')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_device_exposure_visit_detail_id__visit_detail_id__ref_visit_detail_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_device_exposure_dbcd379c23bdd6563c2a709cad11e5d4.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_device_exposure_visit_detail_id__visit_detail_id__ref_visit_detail_.c064b67cdb", "fqn": ["etl_synthea_dbt", "omop", "relationships_device_exposure_visit_detail_id__visit_detail_id__ref_visit_detail_"], "alias": "relationships_device_exposure_dbcd379c23bdd6563c2a709cad11e5d4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_device_exposure_dbcd379c23bdd6563c2a709cad11e5d4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_device_exposure_dbcd379c23bdd6563c2a709cad11e5d4"}, "created_at": 1695616069.6286645, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_device_exposure_dbcd379c23bdd6563c2a709cad11e5d4\") }}", "language": "sql", "refs": [{"name": "visit_detail", "package": null, "version": null}, {"name": "device_exposure", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.etl_synthea_dbt.visit_detail", "model.etl_synthea_dbt.device_exposure"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "visit_detail_id", "file_key_name": "models.device_exposure", "attached_node": "model.etl_synthea_dbt.device_exposure"}, "test.etl_synthea_dbt.relationships_device_exposure_device_source_concept_id__concept_id__source_vocab_concept_.d5577dca4c": {"test_metadata": {"name": "relationships", "kwargs": {"to": "source('vocab', 'concept')", "field": "concept_id", "column_name": "device_source_concept_id", "model": "{{ get_where_subquery(ref('device_exposure')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_device_exposure_device_source_concept_id__concept_id__source_vocab_concept_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_device_exposure_9cb556a55cca5a16fb4ad517c40a0f1f.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_device_exposure_device_source_concept_id__concept_id__source_vocab_concept_.d5577dca4c", "fqn": ["etl_synthea_dbt", "omop", "relationships_device_exposure_device_source_concept_id__concept_id__source_vocab_concept_"], "alias": "relationships_device_exposure_9cb556a55cca5a16fb4ad517c40a0f1f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_device_exposure_9cb556a55cca5a16fb4ad517c40a0f1f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_device_exposure_9cb556a55cca5a16fb4ad517c40a0f1f"}, "created_at": 1695616069.656765, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_device_exposure_9cb556a55cca5a16fb4ad517c40a0f1f\") }}", "language": "sql", "refs": [{"name": "device_exposure", "package": null, "version": null}], "sources": [["vocab", "concept"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.etl_synthea_dbt.vocab.concept", "model.etl_synthea_dbt.device_exposure"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "device_source_concept_id", "file_key_name": "models.device_exposure", "attached_node": "model.etl_synthea_dbt.device_exposure"}, "test.etl_synthea_dbt.relationships_device_exposure_unit_concept_id__concept_id__source_vocab_concept_.f445d0b9dd": {"test_metadata": {"name": "relationships", "kwargs": {"to": "source('vocab', 'concept')", "field": "concept_id", "column_name": "unit_concept_id", "model": "{{ get_where_subquery(ref('device_exposure')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_device_exposure_unit_concept_id__concept_id__source_vocab_concept_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_device_exposure_805937ebf44456d474387a9bb075240e.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_device_exposure_unit_concept_id__concept_id__source_vocab_concept_.f445d0b9dd", "fqn": ["etl_synthea_dbt", "omop", "relationships_device_exposure_unit_concept_id__concept_id__source_vocab_concept_"], "alias": "relationships_device_exposure_805937ebf44456d474387a9bb075240e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_device_exposure_805937ebf44456d474387a9bb075240e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_device_exposure_805937ebf44456d474387a9bb075240e"}, "created_at": 1695616069.6836865, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_device_exposure_805937ebf44456d474387a9bb075240e\") }}", "language": "sql", "refs": [{"name": "device_exposure", "package": null, "version": null}], "sources": [["vocab", "concept"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.etl_synthea_dbt.vocab.concept", "model.etl_synthea_dbt.device_exposure"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "unit_concept_id", "file_key_name": "models.device_exposure", "attached_node": "model.etl_synthea_dbt.device_exposure"}, "test.etl_synthea_dbt.relationships_device_exposure_unit_source_concept_id__concept_id__source_vocab_concept_.75df4b5f9f": {"test_metadata": {"name": "relationships", "kwargs": {"to": "source('vocab', 'concept')", "field": "concept_id", "column_name": "unit_source_concept_id", "model": "{{ get_where_subquery(ref('device_exposure')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_device_exposure_unit_source_concept_id__concept_id__source_vocab_concept_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_device_exposure_8091f4c5d2b127e8d09d4b163fa62b58.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_device_exposure_unit_source_concept_id__concept_id__source_vocab_concept_.75df4b5f9f", "fqn": ["etl_synthea_dbt", "omop", "relationships_device_exposure_unit_source_concept_id__concept_id__source_vocab_concept_"], "alias": "relationships_device_exposure_8091f4c5d2b127e8d09d4b163fa62b58", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_device_exposure_8091f4c5d2b127e8d09d4b163fa62b58", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_device_exposure_8091f4c5d2b127e8d09d4b163fa62b58"}, "created_at": 1695616069.7098553, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_device_exposure_8091f4c5d2b127e8d09d4b163fa62b58\") }}", "language": "sql", "refs": [{"name": "device_exposure", "package": null, "version": null}], "sources": [["vocab", "concept"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.etl_synthea_dbt.vocab.concept", "model.etl_synthea_dbt.device_exposure"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "unit_source_concept_id", "file_key_name": "models.device_exposure", "attached_node": "model.etl_synthea_dbt.device_exposure"}, "test.etl_synthea_dbt.unique_observation_observation_id.c7fcc2846f": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "observation_id", "model": "{{ get_where_subquery(ref('observation')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "unique_observation_observation_id", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "unique_observation_observation_id.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.unique_observation_observation_id.c7fcc2846f", "fqn": ["etl_synthea_dbt", "omop", "unique_observation_observation_id"], "alias": "unique_observation_observation_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695616070.1403825, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "observation", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.etl_synthea_dbt.observation"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "observation_id", "file_key_name": "models.observation", "attached_node": "model.etl_synthea_dbt.observation"}, "test.etl_synthea_dbt.not_null_observation_observation_id.efd24835d6": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "observation_id", "model": "{{ get_where_subquery(ref('observation')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "not_null_observation_observation_id", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "not_null_observation_observation_id.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.not_null_observation_observation_id.efd24835d6", "fqn": ["etl_synthea_dbt", "omop", "not_null_observation_observation_id"], "alias": "not_null_observation_observation_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695616070.1512868, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "observation", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.etl_synthea_dbt.observation"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "observation_id", "file_key_name": "models.observation", "attached_node": "model.etl_synthea_dbt.observation"}, "test.etl_synthea_dbt.not_null_observation_person_id.8fa7495344": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "person_id", "model": "{{ get_where_subquery(ref('observation')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "not_null_observation_person_id", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "not_null_observation_person_id.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.not_null_observation_person_id.8fa7495344", "fqn": ["etl_synthea_dbt", "omop", "not_null_observation_person_id"], "alias": "not_null_observation_person_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695616070.1638076, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "observation", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.etl_synthea_dbt.observation"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "person_id", "file_key_name": "models.observation", "attached_node": "model.etl_synthea_dbt.observation"}, "test.etl_synthea_dbt.relationships_observation_person_id__person_id__ref_person_.e1ae5f3106": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('person')", "field": "person_id", "column_name": "person_id", "model": "{{ get_where_subquery(ref('observation')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_observation_person_id__person_id__ref_person_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_observation_person_id__person_id__ref_person_.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_observation_person_id__person_id__ref_person_.e1ae5f3106", "fqn": ["etl_synthea_dbt", "omop", "relationships_observation_person_id__person_id__ref_person_"], "alias": "relationships_observation_person_id__person_id__ref_person_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695616070.1758757, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "person", "package": null, "version": null}, {"name": "observation", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.etl_synthea_dbt.person", "model.etl_synthea_dbt.observation"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "person_id", "file_key_name": "models.observation", "attached_node": "model.etl_synthea_dbt.observation"}, "test.etl_synthea_dbt.not_null_observation_observation_concept_id.4725260db7": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "observation_concept_id", "model": "{{ get_where_subquery(ref('observation')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "not_null_observation_observation_concept_id", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "not_null_observation_observation_concept_id.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.not_null_observation_observation_concept_id.4725260db7", "fqn": ["etl_synthea_dbt", "omop", "not_null_observation_observation_concept_id"], "alias": "not_null_observation_observation_concept_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695616070.2040932, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "observation", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.etl_synthea_dbt.observation"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "observation_concept_id", "file_key_name": "models.observation", "attached_node": "model.etl_synthea_dbt.observation"}, "test.etl_synthea_dbt.relationships_observation_observation_concept_id__concept_id__source_vocab_concept_.d6cdb5cd5e": {"test_metadata": {"name": "relationships", "kwargs": {"to": "source('vocab', 'concept')", "field": "concept_id", "column_name": "observation_concept_id", "model": "{{ get_where_subquery(ref('observation')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_observation_observation_concept_id__concept_id__source_vocab_concept_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_observation_e171aaffa66c3e3b7bb8df13962915fa.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_observation_observation_concept_id__concept_id__source_vocab_concept_.d6cdb5cd5e", "fqn": ["etl_synthea_dbt", "omop", "relationships_observation_observation_concept_id__concept_id__source_vocab_concept_"], "alias": "relationships_observation_e171aaffa66c3e3b7bb8df13962915fa", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_observation_e171aaffa66c3e3b7bb8df13962915fa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_observation_e171aaffa66c3e3b7bb8df13962915fa"}, "created_at": 1695616070.2165153, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_observation_e171aaffa66c3e3b7bb8df13962915fa\") }}", "language": "sql", "refs": [{"name": "observation", "package": null, "version": null}], "sources": [["vocab", "concept"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.etl_synthea_dbt.vocab.concept", "model.etl_synthea_dbt.observation"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "observation_concept_id", "file_key_name": "models.observation", "attached_node": "model.etl_synthea_dbt.observation"}, "test.etl_synthea_dbt.not_null_observation_observation_date.0cde7d2dd7": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "observation_date", "model": "{{ get_where_subquery(ref('observation')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "not_null_observation_observation_date", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "not_null_observation_observation_date.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.not_null_observation_observation_date.0cde7d2dd7", "fqn": ["etl_synthea_dbt", "omop", "not_null_observation_observation_date"], "alias": "not_null_observation_observation_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695616070.2441945, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "observation", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.etl_synthea_dbt.observation"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "observation_date", "file_key_name": "models.observation", "attached_node": "model.etl_synthea_dbt.observation"}, "test.etl_synthea_dbt.not_null_observation_observation_type_concept_id.3f8e08f159": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "observation_type_concept_id", "model": "{{ get_where_subquery(ref('observation')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "not_null_observation_observation_type_concept_id", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "not_null_observation_observation_type_concept_id.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.not_null_observation_observation_type_concept_id.3f8e08f159", "fqn": ["etl_synthea_dbt", "omop", "not_null_observation_observation_type_concept_id"], "alias": "not_null_observation_observation_type_concept_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695616070.2548597, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "observation", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.etl_synthea_dbt.observation"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "observation_type_concept_id", "file_key_name": "models.observation", "attached_node": "model.etl_synthea_dbt.observation"}, "test.etl_synthea_dbt.relationships_observation_observation_type_concept_id__concept_id__source_vocab_concept_.d6bea239d2": {"test_metadata": {"name": "relationships", "kwargs": {"to": "source('vocab', 'concept')", "field": "concept_id", "column_name": "observation_type_concept_id", "model": "{{ get_where_subquery(ref('observation')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_observation_observation_type_concept_id__concept_id__source_vocab_concept_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_observation_47e755456a1c81e034687c640c2dd0bf.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_observation_observation_type_concept_id__concept_id__source_vocab_concept_.d6bea239d2", "fqn": ["etl_synthea_dbt", "omop", "relationships_observation_observation_type_concept_id__concept_id__source_vocab_concept_"], "alias": "relationships_observation_47e755456a1c81e034687c640c2dd0bf", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_observation_47e755456a1c81e034687c640c2dd0bf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_observation_47e755456a1c81e034687c640c2dd0bf"}, "created_at": 1695616070.2669156, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_observation_47e755456a1c81e034687c640c2dd0bf\") }}", "language": "sql", "refs": [{"name": "observation", "package": null, "version": null}], "sources": [["vocab", "concept"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.etl_synthea_dbt.vocab.concept", "model.etl_synthea_dbt.observation"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "observation_type_concept_id", "file_key_name": "models.observation", "attached_node": "model.etl_synthea_dbt.observation"}, "test.etl_synthea_dbt.relationships_observation_value_as_concept_id__concept_id__source_vocab_concept_.14ce6d5d7c": {"test_metadata": {"name": "relationships", "kwargs": {"to": "source('vocab', 'concept')", "field": "concept_id", "column_name": "value_as_concept_id", "model": "{{ get_where_subquery(ref('observation')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_observation_value_as_concept_id__concept_id__source_vocab_concept_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_observation_4438f0c08b246a0224d618bd201aecdf.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_observation_value_as_concept_id__concept_id__source_vocab_concept_.14ce6d5d7c", "fqn": ["etl_synthea_dbt", "omop", "relationships_observation_value_as_concept_id__concept_id__source_vocab_concept_"], "alias": "relationships_observation_4438f0c08b246a0224d618bd201aecdf", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_observation_4438f0c08b246a0224d618bd201aecdf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_observation_4438f0c08b246a0224d618bd201aecdf"}, "created_at": 1695616070.2951028, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_observation_4438f0c08b246a0224d618bd201aecdf\") }}", "language": "sql", "refs": [{"name": "observation", "package": null, "version": null}], "sources": [["vocab", "concept"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.etl_synthea_dbt.vocab.concept", "model.etl_synthea_dbt.observation"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "value_as_concept_id", "file_key_name": "models.observation", "attached_node": "model.etl_synthea_dbt.observation"}, "test.etl_synthea_dbt.relationships_observation_qualifier_concept_id__concept_id__source_vocab_concept_.2145be4c80": {"test_metadata": {"name": "relationships", "kwargs": {"to": "source('vocab', 'concept')", "field": "concept_id", "column_name": "qualifier_concept_id", "model": "{{ get_where_subquery(ref('observation')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_observation_qualifier_concept_id__concept_id__source_vocab_concept_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_observation_41a7bed1605380f39334c158ce1ffab6.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_observation_qualifier_concept_id__concept_id__source_vocab_concept_.2145be4c80", "fqn": ["etl_synthea_dbt", "omop", "relationships_observation_qualifier_concept_id__concept_id__source_vocab_concept_"], "alias": "relationships_observation_41a7bed1605380f39334c158ce1ffab6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_observation_41a7bed1605380f39334c158ce1ffab6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_observation_41a7bed1605380f39334c158ce1ffab6"}, "created_at": 1695616070.3234537, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_observation_41a7bed1605380f39334c158ce1ffab6\") }}", "language": "sql", "refs": [{"name": "observation", "package": null, "version": null}], "sources": [["vocab", "concept"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.etl_synthea_dbt.vocab.concept", "model.etl_synthea_dbt.observation"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "qualifier_concept_id", "file_key_name": "models.observation", "attached_node": "model.etl_synthea_dbt.observation"}, "test.etl_synthea_dbt.relationships_observation_unit_concept_id__concept_id__source_vocab_concept_.4d3119aedd": {"test_metadata": {"name": "relationships", "kwargs": {"to": "source('vocab', 'concept')", "field": "concept_id", "column_name": "unit_concept_id", "model": "{{ get_where_subquery(ref('observation')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_observation_unit_concept_id__concept_id__source_vocab_concept_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_observation_91ea229bb5a3059fc75fe411b51aeab6.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_observation_unit_concept_id__concept_id__source_vocab_concept_.4d3119aedd", "fqn": ["etl_synthea_dbt", "omop", "relationships_observation_unit_concept_id__concept_id__source_vocab_concept_"], "alias": "relationships_observation_91ea229bb5a3059fc75fe411b51aeab6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_observation_91ea229bb5a3059fc75fe411b51aeab6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_observation_91ea229bb5a3059fc75fe411b51aeab6"}, "created_at": 1695616070.351384, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_observation_91ea229bb5a3059fc75fe411b51aeab6\") }}", "language": "sql", "refs": [{"name": "observation", "package": null, "version": null}], "sources": [["vocab", "concept"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.etl_synthea_dbt.vocab.concept", "model.etl_synthea_dbt.observation"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "unit_concept_id", "file_key_name": "models.observation", "attached_node": "model.etl_synthea_dbt.observation"}, "test.etl_synthea_dbt.relationships_observation_provider_id__provider_id__ref_provider_.531e2ef5ba": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('provider')", "field": "provider_id", "column_name": "provider_id", "model": "{{ get_where_subquery(ref('observation')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_observation_provider_id__provider_id__ref_provider_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_observation_da14f230eaf3c49eaf85d26ce29718f7.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_observation_provider_id__provider_id__ref_provider_.531e2ef5ba", "fqn": ["etl_synthea_dbt", "omop", "relationships_observation_provider_id__provider_id__ref_provider_"], "alias": "relationships_observation_da14f230eaf3c49eaf85d26ce29718f7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_observation_da14f230eaf3c49eaf85d26ce29718f7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_observation_da14f230eaf3c49eaf85d26ce29718f7"}, "created_at": 1695616070.3802693, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_observation_da14f230eaf3c49eaf85d26ce29718f7\") }}", "language": "sql", "refs": [{"name": "provider", "package": null, "version": null}, {"name": "observation", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.etl_synthea_dbt.provider", "model.etl_synthea_dbt.observation"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "provider_id", "file_key_name": "models.observation", "attached_node": "model.etl_synthea_dbt.observation"}, "test.etl_synthea_dbt.relationships_observation_visit_occurrence_id__visit_occurrence_id__ref_visit_occurrence_.6929746e26": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('visit_occurrence')", "field": "visit_occurrence_id", "column_name": "visit_occurrence_id", "model": "{{ get_where_subquery(ref('observation')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_observation_visit_occurrence_id__visit_occurrence_id__ref_visit_occurrence_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_observation_612bbb2e6546edb90db4d761ec47ae40.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_observation_visit_occurrence_id__visit_occurrence_id__ref_visit_occurrence_.6929746e26", "fqn": ["etl_synthea_dbt", "omop", "relationships_observation_visit_occurrence_id__visit_occurrence_id__ref_visit_occurrence_"], "alias": "relationships_observation_612bbb2e6546edb90db4d761ec47ae40", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_observation_612bbb2e6546edb90db4d761ec47ae40", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_observation_612bbb2e6546edb90db4d761ec47ae40"}, "created_at": 1695616070.406595, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_observation_612bbb2e6546edb90db4d761ec47ae40\") }}", "language": "sql", "refs": [{"name": "visit_occurrence", "package": null, "version": null}, {"name": "observation", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.etl_synthea_dbt.visit_occurrence", "model.etl_synthea_dbt.observation"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "visit_occurrence_id", "file_key_name": "models.observation", "attached_node": "model.etl_synthea_dbt.observation"}, "test.etl_synthea_dbt.relationships_observation_visit_detail_id__visit_detail_id__ref_visit_detail_.b9b6665fca": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('visit_detail')", "field": "visit_detail_id", "column_name": "visit_detail_id", "model": "{{ get_where_subquery(ref('observation')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_observation_visit_detail_id__visit_detail_id__ref_visit_detail_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_observation_c4fbb2da6635ab9a96a4567eb5d386f4.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_observation_visit_detail_id__visit_detail_id__ref_visit_detail_.b9b6665fca", "fqn": ["etl_synthea_dbt", "omop", "relationships_observation_visit_detail_id__visit_detail_id__ref_visit_detail_"], "alias": "relationships_observation_c4fbb2da6635ab9a96a4567eb5d386f4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_observation_c4fbb2da6635ab9a96a4567eb5d386f4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_observation_c4fbb2da6635ab9a96a4567eb5d386f4"}, "created_at": 1695616070.432333, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_observation_c4fbb2da6635ab9a96a4567eb5d386f4\") }}", "language": "sql", "refs": [{"name": "visit_detail", "package": null, "version": null}, {"name": "observation", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.etl_synthea_dbt.visit_detail", "model.etl_synthea_dbt.observation"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "visit_detail_id", "file_key_name": "models.observation", "attached_node": "model.etl_synthea_dbt.observation"}, "test.etl_synthea_dbt.relationships_observation_observation_source_concept_id__concept_id__source_vocab_concept_.cc7ef061f3": {"test_metadata": {"name": "relationships", "kwargs": {"to": "source('vocab', 'concept')", "field": "concept_id", "column_name": "observation_source_concept_id", "model": "{{ get_where_subquery(ref('observation')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_observation_observation_source_concept_id__concept_id__source_vocab_concept_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_observation_1e281579414cbacfb6efcf65a36d4070.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_observation_observation_source_concept_id__concept_id__source_vocab_concept_.cc7ef061f3", "fqn": ["etl_synthea_dbt", "omop", "relationships_observation_observation_source_concept_id__concept_id__source_vocab_concept_"], "alias": "relationships_observation_1e281579414cbacfb6efcf65a36d4070", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_observation_1e281579414cbacfb6efcf65a36d4070", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_observation_1e281579414cbacfb6efcf65a36d4070"}, "created_at": 1695616070.458908, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_observation_1e281579414cbacfb6efcf65a36d4070\") }}", "language": "sql", "refs": [{"name": "observation", "package": null, "version": null}], "sources": [["vocab", "concept"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.etl_synthea_dbt.vocab.concept", "model.etl_synthea_dbt.observation"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "observation_source_concept_id", "file_key_name": "models.observation", "attached_node": "model.etl_synthea_dbt.observation"}, "test.etl_synthea_dbt.relationships_observation_obs_event_field_concept_id__concept_id__source_vocab_concept_.1c7bfac6f6": {"test_metadata": {"name": "relationships", "kwargs": {"to": "source('vocab', 'concept')", "field": "concept_id", "column_name": "obs_event_field_concept_id", "model": "{{ get_where_subquery(ref('observation')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_observation_obs_event_field_concept_id__concept_id__source_vocab_concept_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_observation_5bb7c79c87d5221a76b4a3a9b9ab3ddc.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_observation_obs_event_field_concept_id__concept_id__source_vocab_concept_.1c7bfac6f6", "fqn": ["etl_synthea_dbt", "omop", "relationships_observation_obs_event_field_concept_id__concept_id__source_vocab_concept_"], "alias": "relationships_observation_5bb7c79c87d5221a76b4a3a9b9ab3ddc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_observation_5bb7c79c87d5221a76b4a3a9b9ab3ddc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_observation_5bb7c79c87d5221a76b4a3a9b9ab3ddc"}, "created_at": 1695616070.4865136, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_observation_5bb7c79c87d5221a76b4a3a9b9ab3ddc\") }}", "language": "sql", "refs": [{"name": "observation", "package": null, "version": null}], "sources": [["vocab", "concept"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.etl_synthea_dbt.vocab.concept", "model.etl_synthea_dbt.observation"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "obs_event_field_concept_id", "file_key_name": "models.observation", "attached_node": "model.etl_synthea_dbt.observation"}, "test.etl_synthea_dbt.unique_drug_era_drug_era_id.e3b01c38b2": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "drug_era_id", "model": "{{ get_where_subquery(ref('drug_era')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "unique_drug_era_drug_era_id", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "unique_drug_era_drug_era_id.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.unique_drug_era_drug_era_id.e3b01c38b2", "fqn": ["etl_synthea_dbt", "omop", "unique_drug_era_drug_era_id"], "alias": "unique_drug_era_drug_era_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695616070.627212, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "drug_era", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.etl_synthea_dbt.drug_era"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "drug_era_id", "file_key_name": "models.drug_era", "attached_node": "model.etl_synthea_dbt.drug_era"}, "test.etl_synthea_dbt.not_null_drug_era_drug_era_id.69fa2cd6fe": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "drug_era_id", "model": "{{ get_where_subquery(ref('drug_era')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "not_null_drug_era_drug_era_id", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "not_null_drug_era_drug_era_id.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.not_null_drug_era_drug_era_id.69fa2cd6fe", "fqn": ["etl_synthea_dbt", "omop", "not_null_drug_era_drug_era_id"], "alias": "not_null_drug_era_drug_era_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695616070.6378808, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "drug_era", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.etl_synthea_dbt.drug_era"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "drug_era_id", "file_key_name": "models.drug_era", "attached_node": "model.etl_synthea_dbt.drug_era"}, "test.etl_synthea_dbt.not_null_drug_era_person_id.e848e282a5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "person_id", "model": "{{ get_where_subquery(ref('drug_era')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "not_null_drug_era_person_id", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "not_null_drug_era_person_id.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.not_null_drug_era_person_id.e848e282a5", "fqn": ["etl_synthea_dbt", "omop", "not_null_drug_era_person_id"], "alias": "not_null_drug_era_person_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695616070.6497371, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "drug_era", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.etl_synthea_dbt.drug_era"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "person_id", "file_key_name": "models.drug_era", "attached_node": "model.etl_synthea_dbt.drug_era"}, "test.etl_synthea_dbt.relationships_drug_era_person_id__person_id__ref_person_.a3cad7938a": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('person')", "field": "person_id", "column_name": "person_id", "model": "{{ get_where_subquery(ref('drug_era')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_drug_era_person_id__person_id__ref_person_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_drug_era_person_id__person_id__ref_person_.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_drug_era_person_id__person_id__ref_person_.a3cad7938a", "fqn": ["etl_synthea_dbt", "omop", "relationships_drug_era_person_id__person_id__ref_person_"], "alias": "relationships_drug_era_person_id__person_id__ref_person_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695616070.6610367, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "person", "package": null, "version": null}, {"name": "drug_era", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.etl_synthea_dbt.person", "model.etl_synthea_dbt.drug_era"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "person_id", "file_key_name": "models.drug_era", "attached_node": "model.etl_synthea_dbt.drug_era"}, "test.etl_synthea_dbt.not_null_drug_era_drug_concept_id.f7daf926d4": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "drug_concept_id", "model": "{{ get_where_subquery(ref('drug_era')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "not_null_drug_era_drug_concept_id", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "not_null_drug_era_drug_concept_id.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.not_null_drug_era_drug_concept_id.f7daf926d4", "fqn": ["etl_synthea_dbt", "omop", "not_null_drug_era_drug_concept_id"], "alias": "not_null_drug_era_drug_concept_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695616070.6892555, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "drug_era", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.etl_synthea_dbt.drug_era"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "drug_concept_id", "file_key_name": "models.drug_era", "attached_node": "model.etl_synthea_dbt.drug_era"}, "test.etl_synthea_dbt.relationships_drug_era_drug_concept_id__concept_id__source_vocab_concept_.91ffe5fbde": {"test_metadata": {"name": "relationships", "kwargs": {"to": "source('vocab', 'concept')", "field": "concept_id", "column_name": "drug_concept_id", "model": "{{ get_where_subquery(ref('drug_era')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_drug_era_drug_concept_id__concept_id__source_vocab_concept_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_drug_era_d558959f50faef2fa20f002c1afee96b.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_drug_era_drug_concept_id__concept_id__source_vocab_concept_.91ffe5fbde", "fqn": ["etl_synthea_dbt", "omop", "relationships_drug_era_drug_concept_id__concept_id__source_vocab_concept_"], "alias": "relationships_drug_era_d558959f50faef2fa20f002c1afee96b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_drug_era_d558959f50faef2fa20f002c1afee96b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_drug_era_d558959f50faef2fa20f002c1afee96b"}, "created_at": 1695616070.70191, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_drug_era_d558959f50faef2fa20f002c1afee96b\") }}", "language": "sql", "refs": [{"name": "drug_era", "package": null, "version": null}], "sources": [["vocab", "concept"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.etl_synthea_dbt.vocab.concept", "model.etl_synthea_dbt.drug_era"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "drug_concept_id", "file_key_name": "models.drug_era", "attached_node": "model.etl_synthea_dbt.drug_era"}, "test.etl_synthea_dbt.not_null_drug_era_drug_era_start_date.7321b828f3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "drug_era_start_date", "model": "{{ get_where_subquery(ref('drug_era')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "not_null_drug_era_drug_era_start_date", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "not_null_drug_era_drug_era_start_date.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.not_null_drug_era_drug_era_start_date.7321b828f3", "fqn": ["etl_synthea_dbt", "omop", "not_null_drug_era_drug_era_start_date"], "alias": "not_null_drug_era_drug_era_start_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695616070.732412, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "drug_era", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.etl_synthea_dbt.drug_era"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "drug_era_start_date", "file_key_name": "models.drug_era", "attached_node": "model.etl_synthea_dbt.drug_era"}, "test.etl_synthea_dbt.not_null_drug_era_drug_era_end_date.ec78b5bf14": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "drug_era_end_date", "model": "{{ get_where_subquery(ref('drug_era')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "not_null_drug_era_drug_era_end_date", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "not_null_drug_era_drug_era_end_date.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.not_null_drug_era_drug_era_end_date.ec78b5bf14", "fqn": ["etl_synthea_dbt", "omop", "not_null_drug_era_drug_era_end_date"], "alias": "not_null_drug_era_drug_era_end_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695616070.7432346, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "drug_era", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.etl_synthea_dbt.drug_era"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "drug_era_end_date", "file_key_name": "models.drug_era", "attached_node": "model.etl_synthea_dbt.drug_era"}, "test.etl_synthea_dbt.unique_condition_era_condition_era_id.cd3b6005dd": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "condition_era_id", "model": "{{ get_where_subquery(ref('condition_era')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "unique_condition_era_condition_era_id", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "unique_condition_era_condition_era_id.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.unique_condition_era_condition_era_id.cd3b6005dd", "fqn": ["etl_synthea_dbt", "omop", "unique_condition_era_condition_era_id"], "alias": "unique_condition_era_condition_era_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695616070.7550178, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "condition_era", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.etl_synthea_dbt.condition_era"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "condition_era_id", "file_key_name": "models.condition_era", "attached_node": "model.etl_synthea_dbt.condition_era"}, "test.etl_synthea_dbt.not_null_condition_era_condition_era_id.7a62c16f99": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "condition_era_id", "model": "{{ get_where_subquery(ref('condition_era')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "not_null_condition_era_condition_era_id", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "not_null_condition_era_condition_era_id.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.not_null_condition_era_condition_era_id.7a62c16f99", "fqn": ["etl_synthea_dbt", "omop", "not_null_condition_era_condition_era_id"], "alias": "not_null_condition_era_condition_era_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695616070.765985, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "condition_era", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.etl_synthea_dbt.condition_era"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "condition_era_id", "file_key_name": "models.condition_era", "attached_node": "model.etl_synthea_dbt.condition_era"}, "test.etl_synthea_dbt.not_null_condition_era_person_id.0c539c09d2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "person_id", "model": "{{ get_where_subquery(ref('condition_era')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "not_null_condition_era_person_id", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "not_null_condition_era_person_id.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.not_null_condition_era_person_id.0c539c09d2", "fqn": ["etl_synthea_dbt", "omop", "not_null_condition_era_person_id"], "alias": "not_null_condition_era_person_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695616070.776693, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "condition_era", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.etl_synthea_dbt.condition_era"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "person_id", "file_key_name": "models.condition_era", "attached_node": "model.etl_synthea_dbt.condition_era"}, "test.etl_synthea_dbt.relationships_condition_era_person_id__person_id__ref_person_.e1a24435e6": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('person')", "field": "person_id", "column_name": "person_id", "model": "{{ get_where_subquery(ref('condition_era')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_condition_era_person_id__person_id__ref_person_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_condition_era_person_id__person_id__ref_person_.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_condition_era_person_id__person_id__ref_person_.e1a24435e6", "fqn": ["etl_synthea_dbt", "omop", "relationships_condition_era_person_id__person_id__ref_person_"], "alias": "relationships_condition_era_person_id__person_id__ref_person_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695616070.787461, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "person", "package": null, "version": null}, {"name": "condition_era", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.etl_synthea_dbt.person", "model.etl_synthea_dbt.condition_era"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "person_id", "file_key_name": "models.condition_era", "attached_node": "model.etl_synthea_dbt.condition_era"}, "test.etl_synthea_dbt.not_null_condition_era_condition_concept_id.e3da2b562c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "condition_concept_id", "model": "{{ get_where_subquery(ref('condition_era')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "not_null_condition_era_condition_concept_id", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "not_null_condition_era_condition_concept_id.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.not_null_condition_era_condition_concept_id.e3da2b562c", "fqn": ["etl_synthea_dbt", "omop", "not_null_condition_era_condition_concept_id"], "alias": "not_null_condition_era_condition_concept_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695616070.8131025, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "condition_era", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.etl_synthea_dbt.condition_era"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "condition_concept_id", "file_key_name": "models.condition_era", "attached_node": "model.etl_synthea_dbt.condition_era"}, "test.etl_synthea_dbt.relationships_condition_era_condition_concept_id__concept_id__source_vocab_concept_.3e586bc15f": {"test_metadata": {"name": "relationships", "kwargs": {"to": "source('vocab', 'concept')", "field": "concept_id", "column_name": "condition_concept_id", "model": "{{ get_where_subquery(ref('condition_era')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_condition_era_condition_concept_id__concept_id__source_vocab_concept_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_condition_era_b5109bd12e1f6ec847c7026343802689.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_condition_era_condition_concept_id__concept_id__source_vocab_concept_.3e586bc15f", "fqn": ["etl_synthea_dbt", "omop", "relationships_condition_era_condition_concept_id__concept_id__source_vocab_concept_"], "alias": "relationships_condition_era_b5109bd12e1f6ec847c7026343802689", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_condition_era_b5109bd12e1f6ec847c7026343802689", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_condition_era_b5109bd12e1f6ec847c7026343802689"}, "created_at": 1695616070.823917, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_condition_era_b5109bd12e1f6ec847c7026343802689\") }}", "language": "sql", "refs": [{"name": "condition_era", "package": null, "version": null}], "sources": [["vocab", "concept"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.etl_synthea_dbt.vocab.concept", "model.etl_synthea_dbt.condition_era"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "condition_concept_id", "file_key_name": "models.condition_era", "attached_node": "model.etl_synthea_dbt.condition_era"}, "test.etl_synthea_dbt.not_null_condition_era_condition_era_start_date.479245d393": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "condition_era_start_date", "model": "{{ get_where_subquery(ref('condition_era')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "not_null_condition_era_condition_era_start_date", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "not_null_condition_era_condition_era_start_date.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.not_null_condition_era_condition_era_start_date.479245d393", "fqn": ["etl_synthea_dbt", "omop", "not_null_condition_era_condition_era_start_date"], "alias": "not_null_condition_era_condition_era_start_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695616070.8498416, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "condition_era", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.etl_synthea_dbt.condition_era"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "condition_era_start_date", "file_key_name": "models.condition_era", "attached_node": "model.etl_synthea_dbt.condition_era"}, "test.etl_synthea_dbt.not_null_condition_era_condition_era_end_date.de0da8b839": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "condition_era_end_date", "model": "{{ get_where_subquery(ref('condition_era')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "not_null_condition_era_condition_era_end_date", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "not_null_condition_era_condition_era_end_date.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.not_null_condition_era_condition_era_end_date.de0da8b839", "fqn": ["etl_synthea_dbt", "omop", "not_null_condition_era_condition_era_end_date"], "alias": "not_null_condition_era_condition_era_end_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695616070.8612788, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "condition_era", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.etl_synthea_dbt.condition_era"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "condition_era_end_date", "file_key_name": "models.condition_era", "attached_node": "model.etl_synthea_dbt.condition_era"}, "model.etl_synthea_dbt.source_to_standard_vocab_map": {"database": "dbt", "schema": "stg", "name": "source_to_standard_vocab_map", "resource_type": "model", "package_name": "etl_synthea_dbt", "path": "staging/source_to_standard_vocab_map.sql", "original_file_path": "models/staging/source_to_standard_vocab_map.sql", "unique_id": "model.etl_synthea_dbt.source_to_standard_vocab_map", "fqn": ["etl_synthea_dbt", "staging", "source_to_standard_vocab_map"], "alias": "source_to_standard_vocab_map", "checksum": {"name": "sha256", "checksum": "65e1da6c59a0c780f98be189e4f9e5165cd617763b55aea09eed122d3e90babb"}, "config": {"enabled": true, "alias": null, "schema": "stg", "database": null, "tags": ["mapping"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "indexes": [{"columns": ["source_code"]}, {"columns": ["target_domain_id", "target_vocabulary_id", "target_standard_concept", "source_vocabulary_id", "source_domain_id"], "type": "btree"}], "post-hook": [], "pre-hook": []}, "tags": ["mapping"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg", "materialized": "table", "tags": "mapping", "indexes": [{"columns": ["source_code"]}, {"columns": ["target_domain_id", "target_vocabulary_id", "target_standard_concept", "source_vocabulary_id", "source_domain_id"], "type": "btree"}]}, "created_at": 1695616507.7813776, "relation_name": "\"dbt\".\"stg\".\"source_to_standard_vocab_map\"", "raw_code": "{{ config(\n    materialized = 'table',\n    tags = 'mapping',\n    indexes=[\n      {'columns': ['source_code']},\n      {'columns': ['target_domain_id', 'target_vocabulary_id', 'target_standard_concept', 'source_vocabulary_id', 'source_domain_id'], 'type': 'btree'}\n    ]\n) }} \n\n\n-- Create mapping table as per logic in 3.1.2 Source to Standard Terminology\n-- found in Truven_CCAE_and_MDCR_ETL_CDM_V5.2.0.doc\n\n\nWITH CTE_VOCAB_MAP AS (\n    SELECT\n        c.concept_code AS source_code,\n        c.concept_id AS source_concept_id,\n        c.concept_name AS source_code_description,\n        c.vocabulary_id AS source_vocabulary_id,\n        c.domain_id AS source_domain_id,\n        c.concept_class_id AS source_concept_class_id,\n        c.valid_start_date AS source_valid_start_date,\n        c.valid_end_date AS source_valid_end_date,\n        c.invalid_reason AS source_invalid_reason,\n        c1.concept_id AS target_concept_id,\n        c1.concept_name AS target_concept_name,\n        c1.vocabulary_id AS target_vocabulary_id,\n        c1.domain_id AS target_domain_id,\n        c1.concept_class_id AS target_concept_class_id,\n        c1.invalid_reason AS target_invalid_reason,\n        c1.standard_concept AS target_standard_concept\n    FROM {{ source('vocab', 'concept') }} AS c\n    INNER JOIN {{ source('vocab', 'concept_relationship') }} AS cr\n        ON c.concept_id = cr.concept_id_1\n            AND cr.invalid_reason IS NULL\n            AND lower(cr.relationship_id) = 'maps to'\n    INNER JOIN {{ source('vocab', 'concept') }} AS c1\n        ON cr.concept_id_2 = c1.concept_id\n            AND c1.invalid_reason IS NULL\n)\n\nSELECT * FROM CTE_VOCAB_MAP", "language": "sql", "refs": [], "sources": [["vocab", "concept"], ["vocab", "concept_relationship"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.etl_synthea_dbt.vocab.concept", "source.etl_synthea_dbt.vocab.concept_relationship"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.etl_synthea_dbt.source_to_source_vocab_map": {"database": "dbt", "schema": "stg", "name": "source_to_source_vocab_map", "resource_type": "model", "package_name": "etl_synthea_dbt", "path": "staging/source_to_source_vocab_map.sql", "original_file_path": "models/staging/source_to_source_vocab_map.sql", "unique_id": "model.etl_synthea_dbt.source_to_source_vocab_map", "fqn": ["etl_synthea_dbt", "staging", "source_to_source_vocab_map"], "alias": "source_to_source_vocab_map", "checksum": {"name": "sha256", "checksum": "e197c2a1b6270c68d97c60da49e52751e27a9a8300d508b07b7166b3e23f99fe"}, "config": {"enabled": true, "alias": null, "schema": "stg", "database": null, "tags": ["mapping"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "indexes": [{"columns": ["source_code"]}, {"type": "btree", "columns": ["target_domain_id", "target_vocabulary_id", "source_vocabulary_id", "target_standard_concept", "target_invalid_reason"]}], "post-hook": [], "pre-hook": []}, "tags": ["mapping"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "stg", "materialized": "table", "tags": "mapping", "indexes": [{"columns": ["source_code"]}, {"type": "btree", "columns": ["target_domain_id", "target_vocabulary_id", "source_vocabulary_id", "target_standard_concept", "target_invalid_reason"]}]}, "created_at": 1695616520.106864, "relation_name": "\"dbt\".\"stg\".\"source_to_source_vocab_map\"", "raw_code": "{{ config(\n    materialized = 'table',\n    tags = 'mapping',\n    indexes=[\n      {'columns': ['source_code']},\n      {'columns': ['target_domain_id', 'target_vocabulary_id', 'source_vocabulary_id', 'target_standard_concept', 'target_invalid_reason'], 'type': 'btree'}\n    ]\n) }} \n\n\n--Use this code to map source codes to source concept ids;\n\nWITH CTE_VOCAB_MAP AS (\n    SELECT\n        c.concept_code AS source_code,\n        c.concept_id AS source_concept_id,\n        c.concept_name AS source_code_description,\n        c.vocabulary_id AS source_vocabulary_id,\n        c.domain_id AS source_domain_id,\n        c.concept_class_id AS source_concept_class_id,\n        c.valid_start_date AS source_valid_start_date,\n        c.valid_end_date AS source_valid_end_date,\n        c.invalid_reason AS source_invalid_reason,\n        c.concept_id AS target_concept_id,\n        c.concept_name AS target_concept_name,\n        c.vocabulary_id AS target_vocabulary_id,\n        c.domain_id AS target_domain_id,\n        c.concept_class_id AS target_concept_class_id,\n        c.invalid_reason AS target_invalid_reason,\n        c.standard_concept AS target_standard_concept\n    FROM {{ source('vocab', 'concept') }} AS c\n    \n)\n\nSELECT * FROM CTE_VOCAB_MAP", "language": "sql", "refs": [], "sources": [["vocab", "concept"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.etl_synthea_dbt.vocab.concept"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.etl_synthea_dbt.procedure_occurrence": {"database": "dbt", "schema": "main", "name": "procedure_occurrence", "resource_type": "model", "package_name": "etl_synthea_dbt", "path": "omop/procedure_occurrence.sql", "original_file_path": "models/omop/procedure_occurrence.sql", "unique_id": "model.etl_synthea_dbt.procedure_occurrence", "fqn": ["etl_synthea_dbt", "omop", "procedure_occurrence"], "alias": "procedure_occurrence", "checksum": {"name": "sha256", "checksum": "d585e3894942ae4a089666fa32355f653ea5762b3a8a9fa5fb73423f8bd3d6d0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["STEM_tbl"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["STEM_tbl"], "description": "", "columns": {"procedure_occurrence_id": {"name": "procedure_occurrence_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "person_id": {"name": "person_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "procedure_concept_id": {"name": "procedure_concept_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "procedure_date": {"name": "procedure_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "procedure_type_concept_id": {"name": "procedure_type_concept_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "modifier_concept_id": {"name": "modifier_concept_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "provider_id": {"name": "provider_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visit_occurrence_id": {"name": "visit_occurrence_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visit_detail_id": {"name": "visit_detail_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "procedure_source_concept_id": {"name": "procedure_source_concept_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "etl_synthea_dbt://models/omop/omop.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": "STEM_tbl"}, "created_at": 1695616901.079912, "relation_name": "\"dbt\".\"main\".\"procedure_occurrence\"", "raw_code": "{{ config(\n    tags = 'STEM_tbl',\n) }} \n\nSELECT\n    row_number()OVER(ORDER BY p.person_id) AS procedure_occurrence_id,\n    p.person_id AS person_id,\n    srctostdvm.target_concept_id AS procedure_concept_id,\n    pr.start AS procedure_date,\n    pr.start AS procedure_datetime,\n    38000267 AS procedure_type_concept_id,\n    0 AS modifier_concept_id,\n    cast(NULL AS integer) AS quantity,\n    prv.provider_id AS provider_id,\n    fv.visit_occurrence_id_new AS visit_occurrence_id,\n    fv.visit_occurrence_id_new + 1000000 AS visit_detail_id,\n    pr.code AS procedure_source_value,\n    srctosrcvm.source_concept_id AS procedure_source_concept_id,\n    NULL AS modifier_source_value\nFROM {{ source('synthea', 'procedures') }} AS pr\nINNER JOIN {{ ref('source_to_standard_vocab_map') }} AS srctostdvm\n    ON srctostdvm.source_code = pr.code\n       AND srctostdvm.target_domain_id = 'Procedure'\n       AND srctostdvm.target_vocabulary_id = 'SNOMED'\n       AND srctostdvm.source_vocabulary_id = 'SNOMED'\n       AND srctostdvm.target_standard_concept = 'S'\n       AND srctostdvm.target_invalid_reason IS NULL\nINNER JOIN {{ ref('source_to_source_vocab_map') }} AS srctosrcvm\n    ON srctosrcvm.source_code = pr.code\n       AND srctosrcvm.source_vocabulary_id = 'SNOMED'\nLEFT JOIN {{ ref('final_visit_ids') }} AS fv\n    ON fv.encounter_id = pr.encounter\nLEFT JOIN {{ source('synthea', 'encounters') }} AS e\n    ON pr.encounter = e.id\n       AND pr.patient = e.patient\nLEFT JOIN {{ ref('provider') }} AS prv \n    ON e.provider = prv.provider_source_value\nINNER JOIN {{ ref('person') }} AS p\n    ON p.person_source_value = pr.patient", "language": "sql", "refs": [{"name": "source_to_standard_vocab_map", "package": null, "version": null}, {"name": "source_to_source_vocab_map", "package": null, "version": null}, {"name": "final_visit_ids", "package": null, "version": null}, {"name": "provider", "package": null, "version": null}, {"name": "person", "package": null, "version": null}], "sources": [["synthea", "procedures"], ["synthea", "encounters"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.etl_synthea_dbt.synthea.procedures", "source.etl_synthea_dbt.synthea.encounters", "model.etl_synthea_dbt.source_to_standard_vocab_map", "model.etl_synthea_dbt.source_to_source_vocab_map", "model.etl_synthea_dbt.final_visit_ids", "model.etl_synthea_dbt.provider", "model.etl_synthea_dbt.person"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "test.etl_synthea_dbt.unique_procedure_occurrence_procedure_occurrence_id.fb0663ac66": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "procedure_occurrence_id", "model": "{{ get_where_subquery(ref('procedure_occurrence')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "unique_procedure_occurrence_procedure_occurrence_id", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "unique_procedure_occurrence_procedure_occurrence_id.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.unique_procedure_occurrence_procedure_occurrence_id.fb0663ac66", "fqn": ["etl_synthea_dbt", "omop", "unique_procedure_occurrence_procedure_occurrence_id"], "alias": "unique_procedure_occurrence_procedure_occurrence_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695616901.085316, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "procedure_occurrence", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.etl_synthea_dbt.procedure_occurrence"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "procedure_occurrence_id", "file_key_name": "models.procedure_occurrence", "attached_node": "model.etl_synthea_dbt.procedure_occurrence"}, "test.etl_synthea_dbt.not_null_procedure_occurrence_procedure_occurrence_id.e3b1d90a98": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "procedure_occurrence_id", "model": "{{ get_where_subquery(ref('procedure_occurrence')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "not_null_procedure_occurrence_procedure_occurrence_id", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "not_null_procedure_occurrence_procedure_occurrence_id.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.not_null_procedure_occurrence_procedure_occurrence_id.e3b1d90a98", "fqn": ["etl_synthea_dbt", "omop", "not_null_procedure_occurrence_procedure_occurrence_id"], "alias": "not_null_procedure_occurrence_procedure_occurrence_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695616901.097118, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "procedure_occurrence", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.etl_synthea_dbt.procedure_occurrence"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "procedure_occurrence_id", "file_key_name": "models.procedure_occurrence", "attached_node": "model.etl_synthea_dbt.procedure_occurrence"}, "test.etl_synthea_dbt.not_null_procedure_occurrence_person_id.95f33a8709": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "person_id", "model": "{{ get_where_subquery(ref('procedure_occurrence')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "not_null_procedure_occurrence_person_id", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "not_null_procedure_occurrence_person_id.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.not_null_procedure_occurrence_person_id.95f33a8709", "fqn": ["etl_synthea_dbt", "omop", "not_null_procedure_occurrence_person_id"], "alias": "not_null_procedure_occurrence_person_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695616901.1087358, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "procedure_occurrence", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.etl_synthea_dbt.procedure_occurrence"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "person_id", "file_key_name": "models.procedure_occurrence", "attached_node": "model.etl_synthea_dbt.procedure_occurrence"}, "test.etl_synthea_dbt.relationships_procedure_occurrence_person_id__person_id__ref_person_.901403d0b9": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('person')", "field": "person_id", "column_name": "person_id", "model": "{{ get_where_subquery(ref('procedure_occurrence')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_procedure_occurrence_person_id__person_id__ref_person_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_procedure_occurr_c0f7c582ce51858852b9638a950652e0.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_procedure_occurrence_person_id__person_id__ref_person_.901403d0b9", "fqn": ["etl_synthea_dbt", "omop", "relationships_procedure_occurrence_person_id__person_id__ref_person_"], "alias": "relationships_procedure_occurr_c0f7c582ce51858852b9638a950652e0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_procedure_occurr_c0f7c582ce51858852b9638a950652e0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_procedure_occurr_c0f7c582ce51858852b9638a950652e0"}, "created_at": 1695616901.1209397, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_procedure_occurr_c0f7c582ce51858852b9638a950652e0\") }}", "language": "sql", "refs": [{"name": "person", "package": null, "version": null}, {"name": "procedure_occurrence", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.etl_synthea_dbt.person", "model.etl_synthea_dbt.procedure_occurrence"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "person_id", "file_key_name": "models.procedure_occurrence", "attached_node": "model.etl_synthea_dbt.procedure_occurrence"}, "test.etl_synthea_dbt.not_null_procedure_occurrence_procedure_concept_id.39a7f862ab": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "procedure_concept_id", "model": "{{ get_where_subquery(ref('procedure_occurrence')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "not_null_procedure_occurrence_procedure_concept_id", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "not_null_procedure_occurrence_procedure_concept_id.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.not_null_procedure_occurrence_procedure_concept_id.39a7f862ab", "fqn": ["etl_synthea_dbt", "omop", "not_null_procedure_occurrence_procedure_concept_id"], "alias": "not_null_procedure_occurrence_procedure_concept_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695616901.1519778, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "procedure_occurrence", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.etl_synthea_dbt.procedure_occurrence"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "procedure_concept_id", "file_key_name": "models.procedure_occurrence", "attached_node": "model.etl_synthea_dbt.procedure_occurrence"}, "test.etl_synthea_dbt.relationships_procedure_occurrence_procedure_concept_id__concept_id__source_vocab_concept_.1d83da347f": {"test_metadata": {"name": "relationships", "kwargs": {"to": "source('vocab', 'concept')", "field": "concept_id", "column_name": "procedure_concept_id", "model": "{{ get_where_subquery(ref('procedure_occurrence')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_procedure_occurrence_procedure_concept_id__concept_id__source_vocab_concept_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_procedure_occurr_f86b5f005c2ba9dc43a76742f3ccd591.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_procedure_occurrence_procedure_concept_id__concept_id__source_vocab_concept_.1d83da347f", "fqn": ["etl_synthea_dbt", "omop", "relationships_procedure_occurrence_procedure_concept_id__concept_id__source_vocab_concept_"], "alias": "relationships_procedure_occurr_f86b5f005c2ba9dc43a76742f3ccd591", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_procedure_occurr_f86b5f005c2ba9dc43a76742f3ccd591", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_procedure_occurr_f86b5f005c2ba9dc43a76742f3ccd591"}, "created_at": 1695616901.163956, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_procedure_occurr_f86b5f005c2ba9dc43a76742f3ccd591\") }}", "language": "sql", "refs": [{"name": "procedure_occurrence", "package": null, "version": null}], "sources": [["vocab", "concept"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.etl_synthea_dbt.vocab.concept", "model.etl_synthea_dbt.procedure_occurrence"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "procedure_concept_id", "file_key_name": "models.procedure_occurrence", "attached_node": "model.etl_synthea_dbt.procedure_occurrence"}, "test.etl_synthea_dbt.not_null_procedure_occurrence_procedure_date.7e26c7adde": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "procedure_date", "model": "{{ get_where_subquery(ref('procedure_occurrence')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "not_null_procedure_occurrence_procedure_date", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "not_null_procedure_occurrence_procedure_date.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.not_null_procedure_occurrence_procedure_date.7e26c7adde", "fqn": ["etl_synthea_dbt", "omop", "not_null_procedure_occurrence_procedure_date"], "alias": "not_null_procedure_occurrence_procedure_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695616901.1925368, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "procedure_occurrence", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.etl_synthea_dbt.procedure_occurrence"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "procedure_date", "file_key_name": "models.procedure_occurrence", "attached_node": "model.etl_synthea_dbt.procedure_occurrence"}, "test.etl_synthea_dbt.not_null_procedure_occurrence_procedure_type_concept_id.697b6199fb": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "procedure_type_concept_id", "model": "{{ get_where_subquery(ref('procedure_occurrence')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "not_null_procedure_occurrence_procedure_type_concept_id", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "not_null_procedure_occurrence_procedure_type_concept_id.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.not_null_procedure_occurrence_procedure_type_concept_id.697b6199fb", "fqn": ["etl_synthea_dbt", "omop", "not_null_procedure_occurrence_procedure_type_concept_id"], "alias": "not_null_procedure_occurrence_procedure_type_concept_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695616901.204899, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "procedure_occurrence", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.etl_synthea_dbt.procedure_occurrence"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "procedure_type_concept_id", "file_key_name": "models.procedure_occurrence", "attached_node": "model.etl_synthea_dbt.procedure_occurrence"}, "test.etl_synthea_dbt.relationships_procedure_occurrence_procedure_type_concept_id__concept_id__source_vocab_concept_.1183d8fa7c": {"test_metadata": {"name": "relationships", "kwargs": {"to": "source('vocab', 'concept')", "field": "concept_id", "column_name": "procedure_type_concept_id", "model": "{{ get_where_subquery(ref('procedure_occurrence')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_procedure_occurrence_procedure_type_concept_id__concept_id__source_vocab_concept_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_procedure_occurr_8c08f06c7e2c4c24e9c8350c4b1bd09c.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_procedure_occurrence_procedure_type_concept_id__concept_id__source_vocab_concept_.1183d8fa7c", "fqn": ["etl_synthea_dbt", "omop", "relationships_procedure_occurrence_procedure_type_concept_id__concept_id__source_vocab_concept_"], "alias": "relationships_procedure_occurr_8c08f06c7e2c4c24e9c8350c4b1bd09c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_procedure_occurr_8c08f06c7e2c4c24e9c8350c4b1bd09c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_procedure_occurr_8c08f06c7e2c4c24e9c8350c4b1bd09c"}, "created_at": 1695616901.2166276, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_procedure_occurr_8c08f06c7e2c4c24e9c8350c4b1bd09c\") }}", "language": "sql", "refs": [{"name": "procedure_occurrence", "package": null, "version": null}], "sources": [["vocab", "concept"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.etl_synthea_dbt.vocab.concept", "model.etl_synthea_dbt.procedure_occurrence"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "procedure_type_concept_id", "file_key_name": "models.procedure_occurrence", "attached_node": "model.etl_synthea_dbt.procedure_occurrence"}, "test.etl_synthea_dbt.relationships_procedure_occurrence_modifier_concept_id__concept_id__source_vocab_concept_.a73220f756": {"test_metadata": {"name": "relationships", "kwargs": {"to": "source('vocab', 'concept')", "field": "concept_id", "column_name": "modifier_concept_id", "model": "{{ get_where_subquery(ref('procedure_occurrence')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_procedure_occurrence_modifier_concept_id__concept_id__source_vocab_concept_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_procedure_occurr_616924c92aa664162e08a2e91799fb53.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_procedure_occurrence_modifier_concept_id__concept_id__source_vocab_concept_.a73220f756", "fqn": ["etl_synthea_dbt", "omop", "relationships_procedure_occurrence_modifier_concept_id__concept_id__source_vocab_concept_"], "alias": "relationships_procedure_occurr_616924c92aa664162e08a2e91799fb53", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_procedure_occurr_616924c92aa664162e08a2e91799fb53", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_procedure_occurr_616924c92aa664162e08a2e91799fb53"}, "created_at": 1695616901.2454743, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_procedure_occurr_616924c92aa664162e08a2e91799fb53\") }}", "language": "sql", "refs": [{"name": "procedure_occurrence", "package": null, "version": null}], "sources": [["vocab", "concept"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.etl_synthea_dbt.vocab.concept", "model.etl_synthea_dbt.procedure_occurrence"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "modifier_concept_id", "file_key_name": "models.procedure_occurrence", "attached_node": "model.etl_synthea_dbt.procedure_occurrence"}, "test.etl_synthea_dbt.relationships_procedure_occurrence_provider_id__provider_id__ref_provider_.c610ac14c8": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('provider')", "field": "provider_id", "column_name": "provider_id", "model": "{{ get_where_subquery(ref('procedure_occurrence')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_procedure_occurrence_provider_id__provider_id__ref_provider_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_procedure_occurr_26c3f61268149a804127d8524783d9cc.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_procedure_occurrence_provider_id__provider_id__ref_provider_.c610ac14c8", "fqn": ["etl_synthea_dbt", "omop", "relationships_procedure_occurrence_provider_id__provider_id__ref_provider_"], "alias": "relationships_procedure_occurr_26c3f61268149a804127d8524783d9cc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_procedure_occurr_26c3f61268149a804127d8524783d9cc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_procedure_occurr_26c3f61268149a804127d8524783d9cc"}, "created_at": 1695616901.2746317, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_procedure_occurr_26c3f61268149a804127d8524783d9cc\") }}", "language": "sql", "refs": [{"name": "provider", "package": null, "version": null}, {"name": "procedure_occurrence", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.etl_synthea_dbt.provider", "model.etl_synthea_dbt.procedure_occurrence"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "provider_id", "file_key_name": "models.procedure_occurrence", "attached_node": "model.etl_synthea_dbt.procedure_occurrence"}, "test.etl_synthea_dbt.relationships_procedure_occurrence_visit_occurrence_id__visit_occurrence_id__ref_visit_occurrence_.57f0006526": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('visit_occurrence')", "field": "visit_occurrence_id", "column_name": "visit_occurrence_id", "model": "{{ get_where_subquery(ref('procedure_occurrence')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_procedure_occurrence_visit_occurrence_id__visit_occurrence_id__ref_visit_occurrence_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_procedure_occurr_5cc29478b035d1c0e7e17573773359a2.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_procedure_occurrence_visit_occurrence_id__visit_occurrence_id__ref_visit_occurrence_.57f0006526", "fqn": ["etl_synthea_dbt", "omop", "relationships_procedure_occurrence_visit_occurrence_id__visit_occurrence_id__ref_visit_occurrence_"], "alias": "relationships_procedure_occurr_5cc29478b035d1c0e7e17573773359a2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_procedure_occurr_5cc29478b035d1c0e7e17573773359a2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_procedure_occurr_5cc29478b035d1c0e7e17573773359a2"}, "created_at": 1695616901.3064935, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_procedure_occurr_5cc29478b035d1c0e7e17573773359a2\") }}", "language": "sql", "refs": [{"name": "visit_occurrence", "package": null, "version": null}, {"name": "procedure_occurrence", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.etl_synthea_dbt.visit_occurrence", "model.etl_synthea_dbt.procedure_occurrence"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "visit_occurrence_id", "file_key_name": "models.procedure_occurrence", "attached_node": "model.etl_synthea_dbt.procedure_occurrence"}, "test.etl_synthea_dbt.relationships_procedure_occurrence_visit_detail_id__visit_detail_id__ref_visit_detail_.aad4bd00c4": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('visit_detail')", "field": "visit_detail_id", "column_name": "visit_detail_id", "model": "{{ get_where_subquery(ref('procedure_occurrence')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_procedure_occurrence_visit_detail_id__visit_detail_id__ref_visit_detail_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_procedure_occurr_9ae3e976a88ca06733c40c0b9c1b81ed.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_procedure_occurrence_visit_detail_id__visit_detail_id__ref_visit_detail_.aad4bd00c4", "fqn": ["etl_synthea_dbt", "omop", "relationships_procedure_occurrence_visit_detail_id__visit_detail_id__ref_visit_detail_"], "alias": "relationships_procedure_occurr_9ae3e976a88ca06733c40c0b9c1b81ed", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_procedure_occurr_9ae3e976a88ca06733c40c0b9c1b81ed", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_procedure_occurr_9ae3e976a88ca06733c40c0b9c1b81ed"}, "created_at": 1695616901.336148, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_procedure_occurr_9ae3e976a88ca06733c40c0b9c1b81ed\") }}", "language": "sql", "refs": [{"name": "visit_detail", "package": null, "version": null}, {"name": "procedure_occurrence", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.etl_synthea_dbt.visit_detail", "model.etl_synthea_dbt.procedure_occurrence"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "visit_detail_id", "file_key_name": "models.procedure_occurrence", "attached_node": "model.etl_synthea_dbt.procedure_occurrence"}, "test.etl_synthea_dbt.relationships_procedure_occurrence_procedure_source_concept_id__concept_id__source_vocab_concept_.9c4ee06eea": {"test_metadata": {"name": "relationships", "kwargs": {"to": "source('vocab', 'concept')", "field": "concept_id", "column_name": "procedure_source_concept_id", "model": "{{ get_where_subquery(ref('procedure_occurrence')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_procedure_occurrence_procedure_source_concept_id__concept_id__source_vocab_concept_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_procedure_occurr_24200ae1fc29d329b63cd0d6ddd02c13.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_procedure_occurrence_procedure_source_concept_id__concept_id__source_vocab_concept_.9c4ee06eea", "fqn": ["etl_synthea_dbt", "omop", "relationships_procedure_occurrence_procedure_source_concept_id__concept_id__source_vocab_concept_"], "alias": "relationships_procedure_occurr_24200ae1fc29d329b63cd0d6ddd02c13", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_procedure_occurr_24200ae1fc29d329b63cd0d6ddd02c13", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_procedure_occurr_24200ae1fc29d329b63cd0d6ddd02c13"}, "created_at": 1695616901.3643262, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_procedure_occurr_24200ae1fc29d329b63cd0d6ddd02c13\") }}", "language": "sql", "refs": [{"name": "procedure_occurrence", "package": null, "version": null}], "sources": [["vocab", "concept"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.etl_synthea_dbt.vocab.concept", "model.etl_synthea_dbt.procedure_occurrence"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "procedure_source_concept_id", "file_key_name": "models.procedure_occurrence", "attached_node": "model.etl_synthea_dbt.procedure_occurrence"}, "model.etl_synthea_dbt.person": {"database": "dbt", "schema": "main", "name": "person", "resource_type": "model", "package_name": "etl_synthea_dbt", "path": "omop/person.sql", "original_file_path": "models/omop/person.sql", "unique_id": "model.etl_synthea_dbt.person", "fqn": ["etl_synthea_dbt", "omop", "person"], "alias": "person", "checksum": {"name": "sha256", "checksum": "12b3efd076554e6eda9d56156f58eb14014e99f1fc6b41c552cc9e5d3645bec1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"person_id": {"name": "person_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gender_concept_id": {"name": "gender_concept_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "year_of_birth": {"name": "year_of_birth", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "race_concept_id": {"name": "race_concept_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ethnicity_concept_id": {"name": "ethnicity_concept_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gender_source_concept_id": {"name": "gender_source_concept_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "race_source_concept_id": {"name": "race_source_concept_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ethnicity_source_concept_id": {"name": "ethnicity_source_concept_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "etl_synthea_dbt://models/omop/omop.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1695624527.0086877, "relation_name": "\"dbt\".\"main\".\"person\"", "raw_code": "WITH cte_concept_code AS\n(\n    SELECT\n        *,\n\n        CASE p.gender\n            WHEN 'M' THEN p.gender\n            WHEN 'F' THEN p.gender\n            ELSE 'No matching concept'\n        END AS gender_concept_code,\n        CASE p.race\n            WHEN 'white' THEN '5'\n            WHEN 'black' THEN '3'\n            WHEN 'asian' THEN '2'\n            ELSE 'No matching concept'\n        END AS race_concept_code,\n        CASE p.ethnicity\n            WHEN 'hispanic' THEN 'Hispanic'\n            WHEN 'nonhispanic' THEN 'Not Hispanic'\n            ELSE 'No matching concept'\n        END AS ethnicity_concept_code\n    FROM {{ source('synthea', 'patients') }} AS p\n    --WHERE p.gender IS NOT NULL\n)\nSELECT\n    ROW_NUMBER()OVER(ORDER BY person.id) AS person_id,\n    gender_concept.concept_id AS gender_concept_id,\n    DATE_PART('year', person.birthdate) AS year_of_birth,\n    DATE_PART('month', person.birthdate) AS month_of_birth,\n    DATE_PART('day', person.birthdate) AS day_of_birth,\n    person.birthdate AS birth_datetime,\n    race_concept.concept_id AS race_concept_id,\n    ethnicity_concept.concept_id AS ethnicity_concept_id,\n    cast(NULL as integer) AS location_id,\n    cast(NULL as integer) AS provider_id,\n    cast(NULL as integer) AS care_site_id,\n    person.id AS person_source_value,\n    person.gender AS gender_source_value,\n    COALESCE(NULL, 0) AS gender_source_concept_id,\n    person.race AS race_source_value,\n    COALESCE(NULL, 0) AS race_source_concept_id,\n    person.ethnicity AS ethnicity_source_value,\n    COALESCE(NULL, 0) AS ethnicity_source_concept_id\nFROM cte_concept_code AS person\n{{ map_concept(cdm_table='person', vocabulary_id='Gender', concept_code_field='gender_concept_code') }}\n{{ map_concept(cdm_table='person', vocabulary_id='Race', concept_code_field='race_concept_code') }}\n{{ map_concept(cdm_table='person', vocabulary_id='Ethnicity', concept_code_field='ethnicity_concept_code') }}\n--WHERE p.gender IS NOT NULL", "language": "sql", "refs": [], "sources": [["synthea", "patients"], ["vocab", "concept"], ["vocab", "concept"], ["vocab", "concept"]], "metrics": [], "depends_on": {"macros": ["macro.etl_synthea_dbt.map_concept"], "nodes": ["source.etl_synthea_dbt.synthea.patients", "source.etl_synthea_dbt.vocab.concept"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "test.etl_synthea_dbt.not_null_person_year_of_birth.03ea95e466": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "year_of_birth", "model": "{{ get_where_subquery(ref('person')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "not_null_person_year_of_birth", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "not_null_person_year_of_birth.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.not_null_person_year_of_birth.03ea95e466", "fqn": ["etl_synthea_dbt", "omop", "not_null_person_year_of_birth"], "alias": "not_null_person_year_of_birth", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695624527.0140116, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "person", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.etl_synthea_dbt.person"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "year_of_birth", "file_key_name": "models.person", "attached_node": "model.etl_synthea_dbt.person"}, "test.etl_synthea_dbt.relationships_person_gender_source_concept_id__concept_id__source_vocab_concept_.871883de16": {"test_metadata": {"name": "relationships", "kwargs": {"to": "source('vocab', 'concept')", "field": "concept_id", "column_name": "gender_source_concept_id", "model": "{{ get_where_subquery(ref('person')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_person_gender_source_concept_id__concept_id__source_vocab_concept_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_person_4d430642c15c7177f2c7c80ec15a4725.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_person_gender_source_concept_id__concept_id__source_vocab_concept_.871883de16", "fqn": ["etl_synthea_dbt", "omop", "relationships_person_gender_source_concept_id__concept_id__source_vocab_concept_"], "alias": "relationships_person_4d430642c15c7177f2c7c80ec15a4725", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_person_4d430642c15c7177f2c7c80ec15a4725", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_person_4d430642c15c7177f2c7c80ec15a4725"}, "created_at": 1695624527.0252266, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_person_4d430642c15c7177f2c7c80ec15a4725\") }}", "language": "sql", "refs": [{"name": "person", "package": null, "version": null}], "sources": [["vocab", "concept"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.etl_synthea_dbt.vocab.concept", "model.etl_synthea_dbt.person"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "gender_source_concept_id", "file_key_name": "models.person", "attached_node": "model.etl_synthea_dbt.person"}, "test.etl_synthea_dbt.relationships_person_race_source_concept_id__concept_id__source_vocab_concept_.cd59f4fb08": {"test_metadata": {"name": "relationships", "kwargs": {"to": "source('vocab', 'concept')", "field": "concept_id", "column_name": "race_source_concept_id", "model": "{{ get_where_subquery(ref('person')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_person_race_source_concept_id__concept_id__source_vocab_concept_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_person_129071cc012519f10f93f6b453844629.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_person_race_source_concept_id__concept_id__source_vocab_concept_.cd59f4fb08", "fqn": ["etl_synthea_dbt", "omop", "relationships_person_race_source_concept_id__concept_id__source_vocab_concept_"], "alias": "relationships_person_129071cc012519f10f93f6b453844629", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_person_129071cc012519f10f93f6b453844629", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_person_129071cc012519f10f93f6b453844629"}, "created_at": 1695624527.0520177, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_person_129071cc012519f10f93f6b453844629\") }}", "language": "sql", "refs": [{"name": "person", "package": null, "version": null}], "sources": [["vocab", "concept"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.etl_synthea_dbt.vocab.concept", "model.etl_synthea_dbt.person"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "race_source_concept_id", "file_key_name": "models.person", "attached_node": "model.etl_synthea_dbt.person"}, "test.etl_synthea_dbt.relationships_person_ethnicity_source_concept_id__concept_id__source_vocab_concept_.c1e57c3f06": {"test_metadata": {"name": "relationships", "kwargs": {"to": "source('vocab', 'concept')", "field": "concept_id", "column_name": "ethnicity_source_concept_id", "model": "{{ get_where_subquery(ref('person')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_person_ethnicity_source_concept_id__concept_id__source_vocab_concept_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_person_249b1afec696faf9ad150e86c0c165c9.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_person_ethnicity_source_concept_id__concept_id__source_vocab_concept_.c1e57c3f06", "fqn": ["etl_synthea_dbt", "omop", "relationships_person_ethnicity_source_concept_id__concept_id__source_vocab_concept_"], "alias": "relationships_person_249b1afec696faf9ad150e86c0c165c9", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_person_249b1afec696faf9ad150e86c0c165c9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_person_249b1afec696faf9ad150e86c0c165c9"}, "created_at": 1695624527.0799105, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_person_249b1afec696faf9ad150e86c0c165c9\") }}", "language": "sql", "refs": [{"name": "person", "package": null, "version": null}], "sources": [["vocab", "concept"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.etl_synthea_dbt.vocab.concept", "model.etl_synthea_dbt.person"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "ethnicity_source_concept_id", "file_key_name": "models.person", "attached_node": "model.etl_synthea_dbt.person"}, "model.etl_synthea_dbt.measurement": {"database": "dbt", "schema": "main", "name": "measurement", "resource_type": "model", "package_name": "etl_synthea_dbt", "path": "omop/measurement.sql", "original_file_path": "models/omop/measurement.sql", "unique_id": "model.etl_synthea_dbt.measurement", "fqn": ["etl_synthea_dbt", "omop", "measurement"], "alias": "measurement", "checksum": {"name": "sha256", "checksum": "f55211ad3ade46dfa42d014db901afd2afb489c62b9d8c01d15c69084cf43bfb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["STEM_tbl"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["STEM_tbl"], "description": "", "columns": {"measurement_id": {"name": "measurement_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "person_id": {"name": "person_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "measurement_concept_id": {"name": "measurement_concept_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "measurement_date": {"name": "measurement_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "measurement_type_concept_id": {"name": "measurement_type_concept_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "operator_concept_id": {"name": "operator_concept_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "value_as_concept_id": {"name": "value_as_concept_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "unit_concept_id": {"name": "unit_concept_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "provider_id": {"name": "provider_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visit_occurrence_id": {"name": "visit_occurrence_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visit_detail_id": {"name": "visit_detail_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "measurement_source_concept_id": {"name": "measurement_source_concept_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "unit_source_concept_id": {"name": "unit_source_concept_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "meas_event_field_concept_id": {"name": "meas_event_field_concept_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "etl_synthea_dbt://models/omop/omop.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": "STEM_tbl"}, "created_at": 1695624610.129208, "relation_name": "\"dbt\".\"main\".\"measurement\"", "raw_code": "{{ config(\n    tags = 'STEM_tbl',\n) }} \n\nSELECT \n    row_number()OVER(ORDER BY person_id) AS measurement_id,\n    person_id,\n    measurement_concept_id,\n    measurement_date,\n    measurement_datetime,\n    measurement_time,\n    measurement_type_concept_id,\n    operator_concept_id,\n    value_as_number,\n    value_as_concept_id,\n    unit_concept_id,\n    range_low,\n    range_high,\n    provider_id,\n    visit_occurrence_id,\n    visit_detail_id,\n    measurement_source_value,\n    measurement_source_concept_id,\n    unit_source_value,\n    value_source_value\nFROM (\n    SELECT\n        p.person_id AS person_id,\n        srctostdvm.target_concept_id AS measurement_concept_id,\n        pr.start AS measurement_date,\n        pr.start AS measurement_datetime,\n        pr.start AS measurement_time,\n        38000267 AS measurement_type_concept_id,\n        0 AS operator_concept_id,\n        cast(NULL AS float) AS value_as_number,\n        0 AS value_as_concept_id,\n        0 AS unit_concept_id,\n        cast(NULL AS float) AS range_low,\n        cast(NULL AS float) AS range_high,\n        prv.provider_id AS provider_id,\n        fv.visit_occurrence_id_new AS visit_occurrence_id,\n        fv.visit_occurrence_id_new + 1000000 AS visit_detail_id,\n        pr.code AS measurement_source_value,\n        srctosrcvm.source_concept_id AS measurement_source_concept_id,\n        cast(NULL AS varchar) AS unit_source_value,\n        cast(NULL AS varchar) AS value_source_value\n    FROM {{ source('synthea', 'procedures') }} AS pr\n    INNER JOIN {{ ref('source_to_standard_vocab_map') }} AS srctostdvm\n        ON srctostdvm.source_code = pr.code\n            AND srctostdvm.target_domain_id = 'Measurement'\n            AND srctostdvm.source_vocabulary_id = 'SNOMED'\n            AND srctostdvm.target_standard_concept = 'S'\n            AND srctostdvm.target_invalid_reason IS NULL\n    INNER JOIN {{ ref('source_to_source_vocab_map') }} AS srctosrcvm\n        ON srctosrcvm.source_code = pr.code\n            AND srctosrcvm.source_vocabulary_id = 'SNOMED'\n    LEFT JOIN {{ ref('final_visit_ids') }} AS fv\n        ON fv.encounter_id = pr.encounter\n    LEFT JOIN {{ source('synthea', 'encounters') }} AS e\n        ON pr.encounter = e.id\n            AND pr.patient = e.patient\n    LEFT JOIN {{ ref('provider') }} AS prv \n        ON e.provider = prv.provider_source_value\n    INNER JOIN {{ ref('person') }} AS p\n        ON p.person_source_value = pr.patient\n  \n    UNION ALL\n\n    SELECT\n        p.person_id AS person_id,\n        srctostdvm.target_concept_id AS measurement_concept_id,\n        o.date AS measurement_date,\n        o.date AS measurement_datetime,\n        o.date AS measurement_time,\n        38000267 AS measurement_type_concept_id,\n        0 AS operator_concept_id,\n        CASE \n            WHEN o.value ~ '^([0-9]+[.]?[0-9]*|[.][0-9]+)$' = '1'\n                THEN cast(o.value AS float) \n            ELSE cast(NULL AS float) \n        END AS value_as_number,\n        coalesce(srcmap2.target_concept_id, 0) AS value_as_concept_id,\n        coalesce(srcmap1.target_concept_id, 0) AS unit_concept_id,\n        cast(NULL AS float) AS range_low,\n        cast(NULL AS float) AS range_high,\n        pr.provider_id AS provider_id,\n        fv.visit_occurrence_id_new AS visit_occurrence_id,\n        fv.visit_occurrence_id_new + 1000000 AS visit_detail_id,\n        o.code AS measurement_source_value,\n        coalesce(srctosrcvm.source_concept_id, 0) AS measurement_source_concept_id,\n        o.units AS unit_source_value,\n        o.value AS value_source_value\n    FROM {{ source('synthea', 'observations') }} AS o\n    INNER JOIN {{ ref('source_to_standard_vocab_map') }} AS srctostdvm\n        ON srctostdvm.source_code = o.code\n            AND srctostdvm.target_domain_id = 'Measurement'\n            AND srctostdvm.source_vocabulary_id = 'LOINC'\n            AND srctostdvm.target_standard_concept = 'S'\n            AND srctostdvm.target_invalid_reason IS NULL\n    LEFT JOIN {{ ref('source_to_standard_vocab_map') }} AS srcmap1\n        ON srcmap1.source_code = o.units\n            AND srcmap1.target_vocabulary_id = 'UCUM'\n            AND srcmap1.source_vocabulary_id = 'UCUM'\n            AND srcmap1.target_standard_concept = 'S'\n            AND srcmap1.target_invalid_reason IS NULL \n    LEFT JOIN {{ ref('source_to_standard_vocab_map') }} AS srcmap2\n        ON srcmap2.source_code = o.value\n            AND srcmap2.target_domain_id = 'Meas value'\n            AND srcmap2.target_standard_concept = 'S'\n            AND srcmap2.target_invalid_reason IS NULL \n    LEFT JOIN {{ ref('source_to_source_vocab_map') }} AS srctosrcvm\n        ON srctosrcvm.source_code = o.code\n            AND srctosrcvm.source_vocabulary_id = 'LOINC'\n    LEFT JOIN {{ ref('final_visit_ids') }} AS fv\n        ON fv.encounter_id = o.encounter\n    LEFT JOIN {{ source('synthea', 'encounters') }} AS e\n        ON o.encounter = e.id\n            AND o.patient = e.patient\n    LEFT JOIN {{ ref('provider') }} AS pr \n        ON e.provider = pr.provider_source_value\n    INNER JOIN {{ ref('person') }} AS p\n        ON p.person_source_value = o.patient\n    ) AS tmp", "language": "sql", "refs": [{"name": "source_to_standard_vocab_map", "package": null, "version": null}, {"name": "source_to_source_vocab_map", "package": null, "version": null}, {"name": "final_visit_ids", "package": null, "version": null}, {"name": "provider", "package": null, "version": null}, {"name": "person", "package": null, "version": null}, {"name": "source_to_standard_vocab_map", "package": null, "version": null}, {"name": "source_to_standard_vocab_map", "package": null, "version": null}, {"name": "source_to_standard_vocab_map", "package": null, "version": null}, {"name": "source_to_source_vocab_map", "package": null, "version": null}, {"name": "final_visit_ids", "package": null, "version": null}, {"name": "provider", "package": null, "version": null}, {"name": "person", "package": null, "version": null}], "sources": [["synthea", "procedures"], ["synthea", "encounters"], ["synthea", "observations"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.etl_synthea_dbt.synthea.procedures", "source.etl_synthea_dbt.synthea.encounters", "source.etl_synthea_dbt.synthea.observations", "model.etl_synthea_dbt.source_to_standard_vocab_map", "model.etl_synthea_dbt.source_to_source_vocab_map", "model.etl_synthea_dbt.final_visit_ids", "model.etl_synthea_dbt.provider", "model.etl_synthea_dbt.person"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "test.etl_synthea_dbt.unique_measurement_measurement_id.a3f1e8466d": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "measurement_id", "model": "{{ get_where_subquery(ref('measurement')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "unique_measurement_measurement_id", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "unique_measurement_measurement_id.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.unique_measurement_measurement_id.a3f1e8466d", "fqn": ["etl_synthea_dbt", "omop", "unique_measurement_measurement_id"], "alias": "unique_measurement_measurement_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695624610.134897, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "measurement", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.etl_synthea_dbt.measurement"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "measurement_id", "file_key_name": "models.measurement", "attached_node": "model.etl_synthea_dbt.measurement"}, "test.etl_synthea_dbt.not_null_measurement_measurement_id.80b56c4597": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "measurement_id", "model": "{{ get_where_subquery(ref('measurement')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "not_null_measurement_measurement_id", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "not_null_measurement_measurement_id.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.not_null_measurement_measurement_id.80b56c4597", "fqn": ["etl_synthea_dbt", "omop", "not_null_measurement_measurement_id"], "alias": "not_null_measurement_measurement_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695624610.1466944, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "measurement", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.etl_synthea_dbt.measurement"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "measurement_id", "file_key_name": "models.measurement", "attached_node": "model.etl_synthea_dbt.measurement"}, "test.etl_synthea_dbt.not_null_measurement_person_id.7cf48be66f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "person_id", "model": "{{ get_where_subquery(ref('measurement')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "not_null_measurement_person_id", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "not_null_measurement_person_id.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.not_null_measurement_person_id.7cf48be66f", "fqn": ["etl_synthea_dbt", "omop", "not_null_measurement_person_id"], "alias": "not_null_measurement_person_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695624610.1583176, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "measurement", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.etl_synthea_dbt.measurement"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "person_id", "file_key_name": "models.measurement", "attached_node": "model.etl_synthea_dbt.measurement"}, "test.etl_synthea_dbt.relationships_measurement_person_id__person_id__ref_person_.b9201b5f92": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('person')", "field": "person_id", "column_name": "person_id", "model": "{{ get_where_subquery(ref('measurement')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_measurement_person_id__person_id__ref_person_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_measurement_person_id__person_id__ref_person_.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_measurement_person_id__person_id__ref_person_.b9201b5f92", "fqn": ["etl_synthea_dbt", "omop", "relationships_measurement_person_id__person_id__ref_person_"], "alias": "relationships_measurement_person_id__person_id__ref_person_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695624610.1694777, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "person", "package": null, "version": null}, {"name": "measurement", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.etl_synthea_dbt.person", "model.etl_synthea_dbt.measurement"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "person_id", "file_key_name": "models.measurement", "attached_node": "model.etl_synthea_dbt.measurement"}, "test.etl_synthea_dbt.not_null_measurement_measurement_concept_id.d63d0b284a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "measurement_concept_id", "model": "{{ get_where_subquery(ref('measurement')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "not_null_measurement_measurement_concept_id", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "not_null_measurement_measurement_concept_id.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.not_null_measurement_measurement_concept_id.d63d0b284a", "fqn": ["etl_synthea_dbt", "omop", "not_null_measurement_measurement_concept_id"], "alias": "not_null_measurement_measurement_concept_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695624610.1980367, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "measurement", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.etl_synthea_dbt.measurement"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "measurement_concept_id", "file_key_name": "models.measurement", "attached_node": "model.etl_synthea_dbt.measurement"}, "test.etl_synthea_dbt.relationships_measurement_measurement_concept_id__concept_id__source_vocab_concept_.0fc77178f1": {"test_metadata": {"name": "relationships", "kwargs": {"to": "source('vocab', 'concept')", "field": "concept_id", "column_name": "measurement_concept_id", "model": "{{ get_where_subquery(ref('measurement')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_measurement_measurement_concept_id__concept_id__source_vocab_concept_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_measurement_6847b4a202550a470988be6623a3cf44.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_measurement_measurement_concept_id__concept_id__source_vocab_concept_.0fc77178f1", "fqn": ["etl_synthea_dbt", "omop", "relationships_measurement_measurement_concept_id__concept_id__source_vocab_concept_"], "alias": "relationships_measurement_6847b4a202550a470988be6623a3cf44", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_measurement_6847b4a202550a470988be6623a3cf44", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_measurement_6847b4a202550a470988be6623a3cf44"}, "created_at": 1695624610.2104993, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_measurement_6847b4a202550a470988be6623a3cf44\") }}", "language": "sql", "refs": [{"name": "measurement", "package": null, "version": null}], "sources": [["vocab", "concept"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.etl_synthea_dbt.vocab.concept", "model.etl_synthea_dbt.measurement"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "measurement_concept_id", "file_key_name": "models.measurement", "attached_node": "model.etl_synthea_dbt.measurement"}, "test.etl_synthea_dbt.not_null_measurement_measurement_date.f0992e3082": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "measurement_date", "model": "{{ get_where_subquery(ref('measurement')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "not_null_measurement_measurement_date", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "not_null_measurement_measurement_date.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.not_null_measurement_measurement_date.f0992e3082", "fqn": ["etl_synthea_dbt", "omop", "not_null_measurement_measurement_date"], "alias": "not_null_measurement_measurement_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695624610.2410114, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "measurement", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.etl_synthea_dbt.measurement"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "measurement_date", "file_key_name": "models.measurement", "attached_node": "model.etl_synthea_dbt.measurement"}, "test.etl_synthea_dbt.not_null_measurement_measurement_type_concept_id.d32d33e40c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "measurement_type_concept_id", "model": "{{ get_where_subquery(ref('measurement')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "not_null_measurement_measurement_type_concept_id", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "not_null_measurement_measurement_type_concept_id.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.not_null_measurement_measurement_type_concept_id.d32d33e40c", "fqn": ["etl_synthea_dbt", "omop", "not_null_measurement_measurement_type_concept_id"], "alias": "not_null_measurement_measurement_type_concept_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695624610.2547877, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "measurement", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.etl_synthea_dbt.measurement"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "measurement_type_concept_id", "file_key_name": "models.measurement", "attached_node": "model.etl_synthea_dbt.measurement"}, "test.etl_synthea_dbt.relationships_measurement_measurement_type_concept_id__concept_id__source_vocab_concept_.05f3b90252": {"test_metadata": {"name": "relationships", "kwargs": {"to": "source('vocab', 'concept')", "field": "concept_id", "column_name": "measurement_type_concept_id", "model": "{{ get_where_subquery(ref('measurement')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_measurement_measurement_type_concept_id__concept_id__source_vocab_concept_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_measurement_d9c525772ff7d624c868c8ab9f3957df.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_measurement_measurement_type_concept_id__concept_id__source_vocab_concept_.05f3b90252", "fqn": ["etl_synthea_dbt", "omop", "relationships_measurement_measurement_type_concept_id__concept_id__source_vocab_concept_"], "alias": "relationships_measurement_d9c525772ff7d624c868c8ab9f3957df", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_measurement_d9c525772ff7d624c868c8ab9f3957df", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_measurement_d9c525772ff7d624c868c8ab9f3957df"}, "created_at": 1695624610.2687922, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_measurement_d9c525772ff7d624c868c8ab9f3957df\") }}", "language": "sql", "refs": [{"name": "measurement", "package": null, "version": null}], "sources": [["vocab", "concept"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.etl_synthea_dbt.vocab.concept", "model.etl_synthea_dbt.measurement"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "measurement_type_concept_id", "file_key_name": "models.measurement", "attached_node": "model.etl_synthea_dbt.measurement"}, "test.etl_synthea_dbt.relationships_measurement_operator_concept_id__concept_id__source_vocab_concept_.fd5f030894": {"test_metadata": {"name": "relationships", "kwargs": {"to": "source('vocab', 'concept')", "field": "concept_id", "column_name": "operator_concept_id", "model": "{{ get_where_subquery(ref('measurement')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_measurement_operator_concept_id__concept_id__source_vocab_concept_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_measurement_4cceb3e44c6fcfd20015117c901e1367.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_measurement_operator_concept_id__concept_id__source_vocab_concept_.fd5f030894", "fqn": ["etl_synthea_dbt", "omop", "relationships_measurement_operator_concept_id__concept_id__source_vocab_concept_"], "alias": "relationships_measurement_4cceb3e44c6fcfd20015117c901e1367", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_measurement_4cceb3e44c6fcfd20015117c901e1367", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_measurement_4cceb3e44c6fcfd20015117c901e1367"}, "created_at": 1695624610.3010032, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_measurement_4cceb3e44c6fcfd20015117c901e1367\") }}", "language": "sql", "refs": [{"name": "measurement", "package": null, "version": null}], "sources": [["vocab", "concept"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.etl_synthea_dbt.vocab.concept", "model.etl_synthea_dbt.measurement"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "operator_concept_id", "file_key_name": "models.measurement", "attached_node": "model.etl_synthea_dbt.measurement"}, "test.etl_synthea_dbt.relationships_measurement_value_as_concept_id__concept_id__source_vocab_concept_.85566490c4": {"test_metadata": {"name": "relationships", "kwargs": {"to": "source('vocab', 'concept')", "field": "concept_id", "column_name": "value_as_concept_id", "model": "{{ get_where_subquery(ref('measurement')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_measurement_value_as_concept_id__concept_id__source_vocab_concept_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_measurement_7cd67747d7f66e66902d19c068acd432.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_measurement_value_as_concept_id__concept_id__source_vocab_concept_.85566490c4", "fqn": ["etl_synthea_dbt", "omop", "relationships_measurement_value_as_concept_id__concept_id__source_vocab_concept_"], "alias": "relationships_measurement_7cd67747d7f66e66902d19c068acd432", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_measurement_7cd67747d7f66e66902d19c068acd432", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_measurement_7cd67747d7f66e66902d19c068acd432"}, "created_at": 1695624610.3329961, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_measurement_7cd67747d7f66e66902d19c068acd432\") }}", "language": "sql", "refs": [{"name": "measurement", "package": null, "version": null}], "sources": [["vocab", "concept"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.etl_synthea_dbt.vocab.concept", "model.etl_synthea_dbt.measurement"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "value_as_concept_id", "file_key_name": "models.measurement", "attached_node": "model.etl_synthea_dbt.measurement"}, "test.etl_synthea_dbt.relationships_measurement_unit_concept_id__concept_id__source_vocab_concept_.ddb1f5242b": {"test_metadata": {"name": "relationships", "kwargs": {"to": "source('vocab', 'concept')", "field": "concept_id", "column_name": "unit_concept_id", "model": "{{ get_where_subquery(ref('measurement')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_measurement_unit_concept_id__concept_id__source_vocab_concept_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_measurement_3cc9f32e9f58b84e5c5a1e82874e4873.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_measurement_unit_concept_id__concept_id__source_vocab_concept_.ddb1f5242b", "fqn": ["etl_synthea_dbt", "omop", "relationships_measurement_unit_concept_id__concept_id__source_vocab_concept_"], "alias": "relationships_measurement_3cc9f32e9f58b84e5c5a1e82874e4873", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_measurement_3cc9f32e9f58b84e5c5a1e82874e4873", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_measurement_3cc9f32e9f58b84e5c5a1e82874e4873"}, "created_at": 1695624610.3613882, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_measurement_3cc9f32e9f58b84e5c5a1e82874e4873\") }}", "language": "sql", "refs": [{"name": "measurement", "package": null, "version": null}], "sources": [["vocab", "concept"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.etl_synthea_dbt.vocab.concept", "model.etl_synthea_dbt.measurement"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "unit_concept_id", "file_key_name": "models.measurement", "attached_node": "model.etl_synthea_dbt.measurement"}, "test.etl_synthea_dbt.relationships_measurement_provider_id__provider_id__ref_provider_.1f264234a4": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('provider')", "field": "provider_id", "column_name": "provider_id", "model": "{{ get_where_subquery(ref('measurement')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_measurement_provider_id__provider_id__ref_provider_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_measurement_0a8440ae9a533d417e5dffc8d0e3b4d2.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_measurement_provider_id__provider_id__ref_provider_.1f264234a4", "fqn": ["etl_synthea_dbt", "omop", "relationships_measurement_provider_id__provider_id__ref_provider_"], "alias": "relationships_measurement_0a8440ae9a533d417e5dffc8d0e3b4d2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_measurement_0a8440ae9a533d417e5dffc8d0e3b4d2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_measurement_0a8440ae9a533d417e5dffc8d0e3b4d2"}, "created_at": 1695624610.3881981, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_measurement_0a8440ae9a533d417e5dffc8d0e3b4d2\") }}", "language": "sql", "refs": [{"name": "provider", "package": null, "version": null}, {"name": "measurement", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.etl_synthea_dbt.provider", "model.etl_synthea_dbt.measurement"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "provider_id", "file_key_name": "models.measurement", "attached_node": "model.etl_synthea_dbt.measurement"}, "test.etl_synthea_dbt.relationships_measurement_visit_occurrence_id__visit_occurrence_id__ref_visit_occurrence_.4fb747555a": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('visit_occurrence')", "field": "visit_occurrence_id", "column_name": "visit_occurrence_id", "model": "{{ get_where_subquery(ref('measurement')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_measurement_visit_occurrence_id__visit_occurrence_id__ref_visit_occurrence_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_measurement_85fe220011c53426eaec1fbac4b5b662.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_measurement_visit_occurrence_id__visit_occurrence_id__ref_visit_occurrence_.4fb747555a", "fqn": ["etl_synthea_dbt", "omop", "relationships_measurement_visit_occurrence_id__visit_occurrence_id__ref_visit_occurrence_"], "alias": "relationships_measurement_85fe220011c53426eaec1fbac4b5b662", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_measurement_85fe220011c53426eaec1fbac4b5b662", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_measurement_85fe220011c53426eaec1fbac4b5b662"}, "created_at": 1695624610.4160862, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_measurement_85fe220011c53426eaec1fbac4b5b662\") }}", "language": "sql", "refs": [{"name": "visit_occurrence", "package": null, "version": null}, {"name": "measurement", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.etl_synthea_dbt.visit_occurrence", "model.etl_synthea_dbt.measurement"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "visit_occurrence_id", "file_key_name": "models.measurement", "attached_node": "model.etl_synthea_dbt.measurement"}, "test.etl_synthea_dbt.relationships_measurement_visit_detail_id__visit_detail_id__ref_visit_detail_.d4200ff3e2": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('visit_detail')", "field": "visit_detail_id", "column_name": "visit_detail_id", "model": "{{ get_where_subquery(ref('measurement')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_measurement_visit_detail_id__visit_detail_id__ref_visit_detail_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_measurement_1111648ea96002f71a7e90015eb8ae15.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_measurement_visit_detail_id__visit_detail_id__ref_visit_detail_.d4200ff3e2", "fqn": ["etl_synthea_dbt", "omop", "relationships_measurement_visit_detail_id__visit_detail_id__ref_visit_detail_"], "alias": "relationships_measurement_1111648ea96002f71a7e90015eb8ae15", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_measurement_1111648ea96002f71a7e90015eb8ae15", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_measurement_1111648ea96002f71a7e90015eb8ae15"}, "created_at": 1695624610.4437332, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_measurement_1111648ea96002f71a7e90015eb8ae15\") }}", "language": "sql", "refs": [{"name": "visit_detail", "package": null, "version": null}, {"name": "measurement", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.etl_synthea_dbt.visit_detail", "model.etl_synthea_dbt.measurement"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "visit_detail_id", "file_key_name": "models.measurement", "attached_node": "model.etl_synthea_dbt.measurement"}, "test.etl_synthea_dbt.relationships_measurement_measurement_source_concept_id__concept_id__source_vocab_concept_.438766d6d3": {"test_metadata": {"name": "relationships", "kwargs": {"to": "source('vocab', 'concept')", "field": "concept_id", "column_name": "measurement_source_concept_id", "model": "{{ get_where_subquery(ref('measurement')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_measurement_measurement_source_concept_id__concept_id__source_vocab_concept_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_measurement_aadbafb484321c72f5207876fd438717.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_measurement_measurement_source_concept_id__concept_id__source_vocab_concept_.438766d6d3", "fqn": ["etl_synthea_dbt", "omop", "relationships_measurement_measurement_source_concept_id__concept_id__source_vocab_concept_"], "alias": "relationships_measurement_aadbafb484321c72f5207876fd438717", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_measurement_aadbafb484321c72f5207876fd438717", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_measurement_aadbafb484321c72f5207876fd438717"}, "created_at": 1695624610.4734123, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_measurement_aadbafb484321c72f5207876fd438717\") }}", "language": "sql", "refs": [{"name": "measurement", "package": null, "version": null}], "sources": [["vocab", "concept"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.etl_synthea_dbt.vocab.concept", "model.etl_synthea_dbt.measurement"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "measurement_source_concept_id", "file_key_name": "models.measurement", "attached_node": "model.etl_synthea_dbt.measurement"}, "model.etl_synthea_dbt.provider": {"database": "dbt", "schema": "main", "name": "provider", "resource_type": "model", "package_name": "etl_synthea_dbt", "path": "omop/provider.sql", "original_file_path": "models/omop/provider.sql", "unique_id": "model.etl_synthea_dbt.provider", "fqn": ["etl_synthea_dbt", "omop", "provider"], "alias": "provider", "checksum": {"name": "sha256", "checksum": "08d4e193ad11bcbbf98ebf9f04a0fa09df790700a63c1aded67ae28343f9ea08"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"provider_id": {"name": "provider_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "specialty_concept_id": {"name": "specialty_concept_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gender_concept_id": {"name": "gender_concept_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "specialty_source_concept_id": {"name": "specialty_source_concept_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "etl_synthea_dbt://models/omop/omop.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1695624661.2916834, "relation_name": "\"dbt\".\"main\".\"provider\"", "raw_code": "SELECT\n    ROW_NUMBER()OVER(ORDER BY (SELECT NULL)) AS provider_id,\n    name AS provider_name,\n    CAST(NULL AS varchar(20)) AS npi,\n    CAST(NULL AS varchar(20)) AS dea,\n    38004446 AS specialty_concept_id,\n    CAST(NULL AS integer) AS care_site_id,\n    CAST(NULL AS integer) AS year_of_birth,\n    CASE UPPER(gender)\n        WHEN 'M' THEN 8507\n        WHEN 'F' THEN 8532\n    END AS gender_concept_id,\n    id AS provider_source_value,\n    speciality AS specialty_source_value,\n    38004446 AS specialty_source_concept_id,\n    gender AS gender_source_value,\n    CASE UPPER(gender)\n        WHEN 'M' THEN 8507\n        WHEN 'F' THEN 8532\n    END AS gender_source_concept_id\nFROM {{ source('synthea', 'providers') }}", "language": "sql", "refs": [], "sources": [["synthea", "providers"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.etl_synthea_dbt.synthea.providers"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "test.etl_synthea_dbt.unique_provider_provider_id.b08928e435": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "provider_id", "model": "{{ get_where_subquery(ref('provider')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "unique_provider_provider_id", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "unique_provider_provider_id.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.unique_provider_provider_id.b08928e435", "fqn": ["etl_synthea_dbt", "omop", "unique_provider_provider_id"], "alias": "unique_provider_provider_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695624661.2972665, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "provider", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.etl_synthea_dbt.provider"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "provider_id", "file_key_name": "models.provider", "attached_node": "model.etl_synthea_dbt.provider"}, "test.etl_synthea_dbt.not_null_provider_provider_id.3b46670424": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "provider_id", "model": "{{ get_where_subquery(ref('provider')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "not_null_provider_provider_id", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "not_null_provider_provider_id.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.not_null_provider_provider_id.3b46670424", "fqn": ["etl_synthea_dbt", "omop", "not_null_provider_provider_id"], "alias": "not_null_provider_provider_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695624661.3095977, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "provider", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.etl_synthea_dbt.provider"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "provider_id", "file_key_name": "models.provider", "attached_node": "model.etl_synthea_dbt.provider"}, "model.etl_synthea_dbt.visit_detail": {"database": "dbt", "schema": "main", "name": "visit_detail", "resource_type": "model", "package_name": "etl_synthea_dbt", "path": "omop/visit_detail.sql", "original_file_path": "models/omop/visit_detail.sql", "unique_id": "model.etl_synthea_dbt.visit_detail", "fqn": ["etl_synthea_dbt", "omop", "visit_detail"], "alias": "visit_detail", "checksum": {"name": "sha256", "checksum": "0f6ddd01510590975b79fdfbe1419a026a462c9f57510a1bd46e14b8d60b27fe"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"visit_detail_id": {"name": "visit_detail_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "person_id": {"name": "person_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visit_detail_concept_id": {"name": "visit_detail_concept_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visit_detail_start_date": {"name": "visit_detail_start_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visit_detail_end_date": {"name": "visit_detail_end_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visit_detail_type_concept_id": {"name": "visit_detail_type_concept_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "provider_id": {"name": "provider_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visit_detail_source_concept_id": {"name": "visit_detail_source_concept_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "admitting_source_concept_id": {"name": "admitting_source_concept_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discharge_to_concept_id": {"name": "discharge_to_concept_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "preceding_visit_detail_id": {"name": "preceding_visit_detail_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "parent_visit_detail_id": {"name": "parent_visit_detail_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "visit_occurrence_id": {"name": "visit_occurrence_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "etl_synthea_dbt://models/omop/omop.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1695624800.816647, "relation_name": "\"dbt\".\"main\".\"visit_detail\"", "raw_code": "-- For testing purposes, create populate VISIT_DETAIL\n-- such that it's basically a copy of VISIT_OCCURRENCE\n\n\nSELECT\n    av.visit_occurrence_id + 1000000 AS visit_detail_id,\n    p.person_id AS person_id, \n\n    CASE lower(av.encounterclass) \n        WHEN 'ambulatory' THEN 9202\n        WHEN 'emergency' THEN 9203\n        WHEN 'inpatient' THEN 9201\n        WHEN 'wellness' THEN 9202\n        WHEN 'urgentcare' THEN 9203 \n        WHEN 'outpatient' THEN 9202\n        ELSE 0\n    END AS visit_detail_concept_id,\n    \n    av.visit_start_date AS visit_detail_start_date,\n    av.visit_start_date AS visit_detail_start_datetime,\n    av.visit_end_date AS visit_detail_end_date,\n    av.visit_end_date AS visit_detail_end_datetime,\n    44818517 AS visit_detail_type_concept_id, \n    pr.provider_id AS provider_id, \n    NULL AS care_site_id, \n    0 AS admitting_source_concept_id,\n    0 AS discharge_to_concept_id, \n    lag(av.visit_occurrence_id) \n    OVER(PARTITION BY p.person_id\n                      ORDER BY av.visit_start_date) + 1000000 AS preceding_visit_detail_id,\n    av.encounter_id AS visit_detail_source_value,\n    0 AS visit_detail_source_concept_id, \n    NULL AS admitting_source_value, \n    NULL AS discharge_to_source_value,\n    cast(NULL as integer) AS parent_visit_detail_id,\n    av.visit_occurrence_id AS visit_occurrence_id\nFROM {{ ref('all_visits') }} AS av\nINNER JOIN {{ ref('person') }} AS p\n    ON av.patient = p.person_source_value\nINNER JOIN {{ source('synthea', 'encounters') }} AS e\n    ON av.encounter_id = e.id\n        AND av.patient = e.patient\nINNER JOIN {{ ref('provider') }} AS pr \n    ON e.provider = pr.provider_source_value\nWHERE av.visit_occurrence_id IN (\n    SELECT DISTINCT visit_occurrence_id_new\n    FROM {{ ref('final_visit_ids') }})", "language": "sql", "refs": [{"name": "all_visits", "package": null, "version": null}, {"name": "person", "package": null, "version": null}, {"name": "provider", "package": null, "version": null}, {"name": "final_visit_ids", "package": null, "version": null}], "sources": [["synthea", "encounters"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.etl_synthea_dbt.synthea.encounters", "model.etl_synthea_dbt.all_visits", "model.etl_synthea_dbt.person", "model.etl_synthea_dbt.provider", "model.etl_synthea_dbt.final_visit_ids"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "test.etl_synthea_dbt.unique_visit_detail_visit_detail_id.1f90f95601": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "visit_detail_id", "model": "{{ get_where_subquery(ref('visit_detail')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "unique_visit_detail_visit_detail_id", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "unique_visit_detail_visit_detail_id.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.unique_visit_detail_visit_detail_id.1f90f95601", "fqn": ["etl_synthea_dbt", "omop", "unique_visit_detail_visit_detail_id"], "alias": "unique_visit_detail_visit_detail_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695624800.8227355, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "visit_detail", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.etl_synthea_dbt.visit_detail"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "visit_detail_id", "file_key_name": "models.visit_detail", "attached_node": "model.etl_synthea_dbt.visit_detail"}, "test.etl_synthea_dbt.not_null_visit_detail_visit_detail_id.e5b9e9d282": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "visit_detail_id", "model": "{{ get_where_subquery(ref('visit_detail')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "not_null_visit_detail_visit_detail_id", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "not_null_visit_detail_visit_detail_id.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.not_null_visit_detail_visit_detail_id.e5b9e9d282", "fqn": ["etl_synthea_dbt", "omop", "not_null_visit_detail_visit_detail_id"], "alias": "not_null_visit_detail_visit_detail_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695624800.8346112, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "visit_detail", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.etl_synthea_dbt.visit_detail"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "visit_detail_id", "file_key_name": "models.visit_detail", "attached_node": "model.etl_synthea_dbt.visit_detail"}, "test.etl_synthea_dbt.not_null_visit_detail_person_id.f40d29958e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "person_id", "model": "{{ get_where_subquery(ref('visit_detail')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "not_null_visit_detail_person_id", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "not_null_visit_detail_person_id.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.not_null_visit_detail_person_id.f40d29958e", "fqn": ["etl_synthea_dbt", "omop", "not_null_visit_detail_person_id"], "alias": "not_null_visit_detail_person_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695624800.8462234, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "visit_detail", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.etl_synthea_dbt.visit_detail"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "person_id", "file_key_name": "models.visit_detail", "attached_node": "model.etl_synthea_dbt.visit_detail"}, "test.etl_synthea_dbt.relationships_visit_detail_person_id__person_id__ref_person_.a572cd3588": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('person')", "field": "person_id", "column_name": "person_id", "model": "{{ get_where_subquery(ref('visit_detail')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_visit_detail_person_id__person_id__ref_person_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_visit_detail_person_id__person_id__ref_person_.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_visit_detail_person_id__person_id__ref_person_.a572cd3588", "fqn": ["etl_synthea_dbt", "omop", "relationships_visit_detail_person_id__person_id__ref_person_"], "alias": "relationships_visit_detail_person_id__person_id__ref_person_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695624800.8577304, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "person", "package": null, "version": null}, {"name": "visit_detail", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.etl_synthea_dbt.person", "model.etl_synthea_dbt.visit_detail"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "person_id", "file_key_name": "models.visit_detail", "attached_node": "model.etl_synthea_dbt.visit_detail"}, "test.etl_synthea_dbt.not_null_visit_detail_visit_detail_concept_id.11df83fc24": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "visit_detail_concept_id", "model": "{{ get_where_subquery(ref('visit_detail')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "not_null_visit_detail_visit_detail_concept_id", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "not_null_visit_detail_visit_detail_concept_id.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.not_null_visit_detail_visit_detail_concept_id.11df83fc24", "fqn": ["etl_synthea_dbt", "omop", "not_null_visit_detail_visit_detail_concept_id"], "alias": "not_null_visit_detail_visit_detail_concept_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695624800.884969, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "visit_detail", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.etl_synthea_dbt.visit_detail"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "visit_detail_concept_id", "file_key_name": "models.visit_detail", "attached_node": "model.etl_synthea_dbt.visit_detail"}, "test.etl_synthea_dbt.relationships_visit_detail_visit_detail_concept_id__concept_id__source_vocab_concept_.f6539e5bad": {"test_metadata": {"name": "relationships", "kwargs": {"to": "source('vocab', 'concept')", "field": "concept_id", "column_name": "visit_detail_concept_id", "model": "{{ get_where_subquery(ref('visit_detail')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_visit_detail_visit_detail_concept_id__concept_id__source_vocab_concept_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_visit_detail_7da3d7017d541eb06e86c72a5d6aea3a.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_visit_detail_visit_detail_concept_id__concept_id__source_vocab_concept_.f6539e5bad", "fqn": ["etl_synthea_dbt", "omop", "relationships_visit_detail_visit_detail_concept_id__concept_id__source_vocab_concept_"], "alias": "relationships_visit_detail_7da3d7017d541eb06e86c72a5d6aea3a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_visit_detail_7da3d7017d541eb06e86c72a5d6aea3a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_visit_detail_7da3d7017d541eb06e86c72a5d6aea3a"}, "created_at": 1695624800.8964415, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_visit_detail_7da3d7017d541eb06e86c72a5d6aea3a\") }}", "language": "sql", "refs": [{"name": "visit_detail", "package": null, "version": null}], "sources": [["vocab", "concept"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.etl_synthea_dbt.vocab.concept", "model.etl_synthea_dbt.visit_detail"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "visit_detail_concept_id", "file_key_name": "models.visit_detail", "attached_node": "model.etl_synthea_dbt.visit_detail"}, "test.etl_synthea_dbt.not_null_visit_detail_visit_detail_start_date.cc3c8c51a7": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "visit_detail_start_date", "model": "{{ get_where_subquery(ref('visit_detail')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "not_null_visit_detail_visit_detail_start_date", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "not_null_visit_detail_visit_detail_start_date.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.not_null_visit_detail_visit_detail_start_date.cc3c8c51a7", "fqn": ["etl_synthea_dbt", "omop", "not_null_visit_detail_visit_detail_start_date"], "alias": "not_null_visit_detail_visit_detail_start_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695624800.9272182, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "visit_detail", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.etl_synthea_dbt.visit_detail"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "visit_detail_start_date", "file_key_name": "models.visit_detail", "attached_node": "model.etl_synthea_dbt.visit_detail"}, "test.etl_synthea_dbt.not_null_visit_detail_visit_detail_end_date.fbf8c3e1c7": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "visit_detail_end_date", "model": "{{ get_where_subquery(ref('visit_detail')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "not_null_visit_detail_visit_detail_end_date", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "not_null_visit_detail_visit_detail_end_date.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.not_null_visit_detail_visit_detail_end_date.fbf8c3e1c7", "fqn": ["etl_synthea_dbt", "omop", "not_null_visit_detail_visit_detail_end_date"], "alias": "not_null_visit_detail_visit_detail_end_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695624800.939713, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "visit_detail", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.etl_synthea_dbt.visit_detail"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "visit_detail_end_date", "file_key_name": "models.visit_detail", "attached_node": "model.etl_synthea_dbt.visit_detail"}, "test.etl_synthea_dbt.not_null_visit_detail_visit_detail_type_concept_id.31ca3f2172": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "visit_detail_type_concept_id", "model": "{{ get_where_subquery(ref('visit_detail')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "not_null_visit_detail_visit_detail_type_concept_id", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "not_null_visit_detail_visit_detail_type_concept_id.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.not_null_visit_detail_visit_detail_type_concept_id.31ca3f2172", "fqn": ["etl_synthea_dbt", "omop", "not_null_visit_detail_visit_detail_type_concept_id"], "alias": "not_null_visit_detail_visit_detail_type_concept_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1695624800.953179, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "visit_detail", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.etl_synthea_dbt.visit_detail"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "visit_detail_type_concept_id", "file_key_name": "models.visit_detail", "attached_node": "model.etl_synthea_dbt.visit_detail"}, "test.etl_synthea_dbt.relationships_visit_detail_visit_detail_type_concept_id__concept_id__source_vocab_concept_.0564ecbaa6": {"test_metadata": {"name": "relationships", "kwargs": {"to": "source('vocab', 'concept')", "field": "concept_id", "column_name": "visit_detail_type_concept_id", "model": "{{ get_where_subquery(ref('visit_detail')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_visit_detail_visit_detail_type_concept_id__concept_id__source_vocab_concept_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_visit_detail_2242132d7df55970c7b048bf8ac18218.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_visit_detail_visit_detail_type_concept_id__concept_id__source_vocab_concept_.0564ecbaa6", "fqn": ["etl_synthea_dbt", "omop", "relationships_visit_detail_visit_detail_type_concept_id__concept_id__source_vocab_concept_"], "alias": "relationships_visit_detail_2242132d7df55970c7b048bf8ac18218", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_visit_detail_2242132d7df55970c7b048bf8ac18218", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_visit_detail_2242132d7df55970c7b048bf8ac18218"}, "created_at": 1695624800.96577, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_visit_detail_2242132d7df55970c7b048bf8ac18218\") }}", "language": "sql", "refs": [{"name": "visit_detail", "package": null, "version": null}], "sources": [["vocab", "concept"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.etl_synthea_dbt.vocab.concept", "model.etl_synthea_dbt.visit_detail"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "visit_detail_type_concept_id", "file_key_name": "models.visit_detail", "attached_node": "model.etl_synthea_dbt.visit_detail"}, "test.etl_synthea_dbt.relationships_visit_detail_provider_id__provider_id__ref_provider_.7393623c5e": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('provider')", "field": "provider_id", "column_name": "provider_id", "model": "{{ get_where_subquery(ref('visit_detail')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_visit_detail_provider_id__provider_id__ref_provider_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_visit_detail_18d1c2242a15f76414c6bb29d64a29d1.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_visit_detail_provider_id__provider_id__ref_provider_.7393623c5e", "fqn": ["etl_synthea_dbt", "omop", "relationships_visit_detail_provider_id__provider_id__ref_provider_"], "alias": "relationships_visit_detail_18d1c2242a15f76414c6bb29d64a29d1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_visit_detail_18d1c2242a15f76414c6bb29d64a29d1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_visit_detail_18d1c2242a15f76414c6bb29d64a29d1"}, "created_at": 1695624800.9946861, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_visit_detail_18d1c2242a15f76414c6bb29d64a29d1\") }}", "language": "sql", "refs": [{"name": "provider", "package": null, "version": null}, {"name": "visit_detail", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.etl_synthea_dbt.provider", "model.etl_synthea_dbt.visit_detail"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "provider_id", "file_key_name": "models.visit_detail", "attached_node": "model.etl_synthea_dbt.visit_detail"}, "test.etl_synthea_dbt.relationships_visit_detail_visit_detail_source_concept_id__concept_id__source_vocab_concept_.90e855b8ea": {"test_metadata": {"name": "relationships", "kwargs": {"to": "source('vocab', 'concept')", "field": "concept_id", "column_name": "visit_detail_source_concept_id", "model": "{{ get_where_subquery(ref('visit_detail')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_visit_detail_visit_detail_source_concept_id__concept_id__source_vocab_concept_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_visit_detail_703d3350a843411d64c417e10d5ca204.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_visit_detail_visit_detail_source_concept_id__concept_id__source_vocab_concept_.90e855b8ea", "fqn": ["etl_synthea_dbt", "omop", "relationships_visit_detail_visit_detail_source_concept_id__concept_id__source_vocab_concept_"], "alias": "relationships_visit_detail_703d3350a843411d64c417e10d5ca204", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_visit_detail_703d3350a843411d64c417e10d5ca204", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_visit_detail_703d3350a843411d64c417e10d5ca204"}, "created_at": 1695624801.02229, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_visit_detail_703d3350a843411d64c417e10d5ca204\") }}", "language": "sql", "refs": [{"name": "visit_detail", "package": null, "version": null}], "sources": [["vocab", "concept"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.etl_synthea_dbt.vocab.concept", "model.etl_synthea_dbt.visit_detail"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "visit_detail_source_concept_id", "file_key_name": "models.visit_detail", "attached_node": "model.etl_synthea_dbt.visit_detail"}, "test.etl_synthea_dbt.relationships_visit_detail_admitting_source_concept_id__concept_id__source_vocab_concept_.7433619460": {"test_metadata": {"name": "relationships", "kwargs": {"to": "source('vocab', 'concept')", "field": "concept_id", "column_name": "admitting_source_concept_id", "model": "{{ get_where_subquery(ref('visit_detail')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_visit_detail_admitting_source_concept_id__concept_id__source_vocab_concept_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_visit_detail_e7ae2bcfdd4eabcc33af9345e5ecc168.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_visit_detail_admitting_source_concept_id__concept_id__source_vocab_concept_.7433619460", "fqn": ["etl_synthea_dbt", "omop", "relationships_visit_detail_admitting_source_concept_id__concept_id__source_vocab_concept_"], "alias": "relationships_visit_detail_e7ae2bcfdd4eabcc33af9345e5ecc168", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_visit_detail_e7ae2bcfdd4eabcc33af9345e5ecc168", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_visit_detail_e7ae2bcfdd4eabcc33af9345e5ecc168"}, "created_at": 1695624801.0512002, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_visit_detail_e7ae2bcfdd4eabcc33af9345e5ecc168\") }}", "language": "sql", "refs": [{"name": "visit_detail", "package": null, "version": null}], "sources": [["vocab", "concept"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.etl_synthea_dbt.vocab.concept", "model.etl_synthea_dbt.visit_detail"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "admitting_source_concept_id", "file_key_name": "models.visit_detail", "attached_node": "model.etl_synthea_dbt.visit_detail"}, "test.etl_synthea_dbt.relationships_visit_detail_discharge_to_concept_id__concept_id__source_vocab_concept_.dff6013593": {"test_metadata": {"name": "relationships", "kwargs": {"to": "source('vocab', 'concept')", "field": "concept_id", "column_name": "discharge_to_concept_id", "model": "{{ get_where_subquery(ref('visit_detail')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_visit_detail_discharge_to_concept_id__concept_id__source_vocab_concept_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_visit_detail_bcd77d767f803b15eb6f1d7a0fef243d.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_visit_detail_discharge_to_concept_id__concept_id__source_vocab_concept_.dff6013593", "fqn": ["etl_synthea_dbt", "omop", "relationships_visit_detail_discharge_to_concept_id__concept_id__source_vocab_concept_"], "alias": "relationships_visit_detail_bcd77d767f803b15eb6f1d7a0fef243d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_visit_detail_bcd77d767f803b15eb6f1d7a0fef243d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_visit_detail_bcd77d767f803b15eb6f1d7a0fef243d"}, "created_at": 1695624801.0787418, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_visit_detail_bcd77d767f803b15eb6f1d7a0fef243d\") }}", "language": "sql", "refs": [{"name": "visit_detail", "package": null, "version": null}], "sources": [["vocab", "concept"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.etl_synthea_dbt.vocab.concept", "model.etl_synthea_dbt.visit_detail"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "discharge_to_concept_id", "file_key_name": "models.visit_detail", "attached_node": "model.etl_synthea_dbt.visit_detail"}, "test.etl_synthea_dbt.relationships_visit_detail_preceding_visit_detail_id__visit_detail_id__ref_visit_detail_.c17ffa5654": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('visit_detail')", "field": "visit_detail_id", "column_name": "preceding_visit_detail_id", "model": "{{ get_where_subquery(ref('visit_detail')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_visit_detail_preceding_visit_detail_id__visit_detail_id__ref_visit_detail_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_visit_detail_6f3785caa53d1eacf0f9d7906453f22d.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_visit_detail_preceding_visit_detail_id__visit_detail_id__ref_visit_detail_.c17ffa5654", "fqn": ["etl_synthea_dbt", "omop", "relationships_visit_detail_preceding_visit_detail_id__visit_detail_id__ref_visit_detail_"], "alias": "relationships_visit_detail_6f3785caa53d1eacf0f9d7906453f22d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_visit_detail_6f3785caa53d1eacf0f9d7906453f22d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_visit_detail_6f3785caa53d1eacf0f9d7906453f22d"}, "created_at": 1695624801.1069543, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_visit_detail_6f3785caa53d1eacf0f9d7906453f22d\") }}", "language": "sql", "refs": [{"name": "visit_detail", "package": null, "version": null}, {"name": "visit_detail", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.etl_synthea_dbt.visit_detail"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "preceding_visit_detail_id", "file_key_name": "models.visit_detail", "attached_node": "model.etl_synthea_dbt.visit_detail"}, "test.etl_synthea_dbt.relationships_visit_detail_parent_visit_detail_id__visit_detail_id__ref_visit_detail_.3f45535d08": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('visit_detail')", "field": "visit_detail_id", "column_name": "parent_visit_detail_id", "model": "{{ get_where_subquery(ref('visit_detail')) }}"}, "namespace": null}, "database": "dbt", "schema": "dbt_test__audit", "name": "relationships_visit_detail_parent_visit_detail_id__visit_detail_id__ref_visit_detail_", "resource_type": "test", "package_name": "etl_synthea_dbt", "path": "relationships_visit_detail_a5bc5fe71533e2b2bafbb473bd2b4b70.sql", "original_file_path": "models/omop/omop.yml", "unique_id": "test.etl_synthea_dbt.relationships_visit_detail_parent_visit_detail_id__visit_detail_id__ref_visit_detail_.3f45535d08", "fqn": ["etl_synthea_dbt", "omop", "relationships_visit_detail_parent_visit_detail_id__visit_detail_id__ref_visit_detail_"], "alias": "relationships_visit_detail_a5bc5fe71533e2b2bafbb473bd2b4b70", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_visit_detail_a5bc5fe71533e2b2bafbb473bd2b4b70", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_visit_detail_a5bc5fe71533e2b2bafbb473bd2b4b70"}, "created_at": 1695624801.1360335, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_visit_detail_a5bc5fe71533e2b2bafbb473bd2b4b70\") }}", "language": "sql", "refs": [{"name": "visit_detail", "package": null, "version": null}, {"name": "visit_detail", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.etl_synthea_dbt.visit_detail"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "parent_visit_detail_id", "file_key_name": "models.visit_detail", "attached_node": "model.etl_synthea_dbt.visit_detail"}}, "sources": {"source.etl_synthea_dbt.synthea.patients": {"database": "dbt", "schema": "source", "name": "patients", "resource_type": "source", "package_name": "etl_synthea_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.etl_synthea_dbt.synthea.patients", "fqn": ["etl_synthea_dbt", "synthea", "patients"], "source_name": "synthea", "source_description": "", "loader": "", "identifier": "patients", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dbt\".\"source\".\"patients\"", "created_at": 1695616070.8708193}, "source.etl_synthea_dbt.synthea.encounters": {"database": "dbt", "schema": "source", "name": "encounters", "resource_type": "source", "package_name": "etl_synthea_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.etl_synthea_dbt.synthea.encounters", "fqn": ["etl_synthea_dbt", "synthea", "encounters"], "source_name": "synthea", "source_description": "", "loader": "", "identifier": "encounters", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dbt\".\"source\".\"encounters\"", "created_at": 1695616070.871695}, "source.etl_synthea_dbt.synthea.providers": {"database": "dbt", "schema": "source", "name": "providers", "resource_type": "source", "package_name": "etl_synthea_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.etl_synthea_dbt.synthea.providers", "fqn": ["etl_synthea_dbt", "synthea", "providers"], "source_name": "synthea", "source_description": "", "loader": "", "identifier": "providers", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dbt\".\"source\".\"providers\"", "created_at": 1695616070.872479}, "source.etl_synthea_dbt.synthea.conditions": {"database": "dbt", "schema": "source", "name": "conditions", "resource_type": "source", "package_name": "etl_synthea_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.etl_synthea_dbt.synthea.conditions", "fqn": ["etl_synthea_dbt", "synthea", "conditions"], "source_name": "synthea", "source_description": "", "loader": "", "identifier": "conditions", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dbt\".\"source\".\"conditions\"", "created_at": 1695616070.8732483}, "source.etl_synthea_dbt.synthea.allergies": {"database": "dbt", "schema": "source", "name": "allergies", "resource_type": "source", "package_name": "etl_synthea_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.etl_synthea_dbt.synthea.allergies", "fqn": ["etl_synthea_dbt", "synthea", "allergies"], "source_name": "synthea", "source_description": "", "loader": "", "identifier": "allergies", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dbt\".\"source\".\"allergies\"", "created_at": 1695616070.873993}, "source.etl_synthea_dbt.synthea.observations": {"database": "dbt", "schema": "source", "name": "observations", "resource_type": "source", "package_name": "etl_synthea_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.etl_synthea_dbt.synthea.observations", "fqn": ["etl_synthea_dbt", "synthea", "observations"], "source_name": "synthea", "source_description": "", "loader": "", "identifier": "observations", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dbt\".\"source\".\"observations\"", "created_at": 1695616070.8747225}, "source.etl_synthea_dbt.synthea.procedures": {"database": "dbt", "schema": "source", "name": "procedures", "resource_type": "source", "package_name": "etl_synthea_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.etl_synthea_dbt.synthea.procedures", "fqn": ["etl_synthea_dbt", "synthea", "procedures"], "source_name": "synthea", "source_description": "", "loader": "", "identifier": "procedures", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dbt\".\"source\".\"procedures\"", "created_at": 1695616070.875459}, "source.etl_synthea_dbt.synthea.devices": {"database": "dbt", "schema": "source", "name": "devices", "resource_type": "source", "package_name": "etl_synthea_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.etl_synthea_dbt.synthea.devices", "fqn": ["etl_synthea_dbt", "synthea", "devices"], "source_name": "synthea", "source_description": "", "loader": "", "identifier": "devices", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dbt\".\"source\".\"devices\"", "created_at": 1695616070.8762543}, "source.etl_synthea_dbt.synthea.medications": {"database": "dbt", "schema": "source", "name": "medications", "resource_type": "source", "package_name": "etl_synthea_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.etl_synthea_dbt.synthea.medications", "fqn": ["etl_synthea_dbt", "synthea", "medications"], "source_name": "synthea", "source_description": "", "loader": "", "identifier": "medications", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dbt\".\"source\".\"medications\"", "created_at": 1695616070.8769975}, "source.etl_synthea_dbt.synthea.immunizations": {"database": "dbt", "schema": "source", "name": "immunizations", "resource_type": "source", "package_name": "etl_synthea_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.etl_synthea_dbt.synthea.immunizations", "fqn": ["etl_synthea_dbt", "synthea", "immunizations"], "source_name": "synthea", "source_description": "", "loader": "", "identifier": "immunizations", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dbt\".\"source\".\"immunizations\"", "created_at": 1695616070.877673}, "source.etl_synthea_dbt.vocab.concept": {"database": "dbt", "schema": "cdm", "name": "concept", "resource_type": "source", "package_name": "etl_synthea_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.etl_synthea_dbt.vocab.concept", "fqn": ["etl_synthea_dbt", "vocab", "concept"], "source_name": "vocab", "source_description": "", "loader": "", "identifier": "concept", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dbt\".\"cdm\".\"concept\"", "created_at": 1695616070.8783529}, "source.etl_synthea_dbt.vocab.concept_relationship": {"database": "dbt", "schema": "cdm", "name": "concept_relationship", "resource_type": "source", "package_name": "etl_synthea_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.etl_synthea_dbt.vocab.concept_relationship", "fqn": ["etl_synthea_dbt", "vocab", "concept_relationship"], "source_name": "vocab", "source_description": "", "loader": "", "identifier": "concept_relationship", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dbt\".\"cdm\".\"concept_relationship\"", "created_at": 1695616070.87903}, "source.etl_synthea_dbt.vocab.concept_ancestor": {"database": "dbt", "schema": "cdm", "name": "concept_ancestor", "resource_type": "source", "package_name": "etl_synthea_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.etl_synthea_dbt.vocab.concept_ancestor", "fqn": ["etl_synthea_dbt", "vocab", "concept_ancestor"], "source_name": "vocab", "source_description": "", "loader": "", "identifier": "concept_ancestor", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dbt\".\"cdm\".\"concept_ancestor\"", "created_at": 1695616070.879695}, "source.etl_synthea_dbt.vocab.source_to_concept_map": {"database": "dbt", "schema": "cdm", "name": "source_to_concept_map", "resource_type": "source", "package_name": "etl_synthea_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.etl_synthea_dbt.vocab.source_to_concept_map", "fqn": ["etl_synthea_dbt", "vocab", "source_to_concept_map"], "source_name": "vocab", "source_description": "", "loader": "", "identifier": "source_to_concept_map", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dbt\".\"cdm\".\"source_to_concept_map\"", "created_at": 1695616070.8803716}, "source.etl_synthea_dbt.vocab.vocabulary": {"database": "dbt", "schema": "cdm", "name": "vocabulary", "resource_type": "source", "package_name": "etl_synthea_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.etl_synthea_dbt.vocab.vocabulary", "fqn": ["etl_synthea_dbt", "vocab", "vocabulary"], "source_name": "vocab", "source_description": "", "loader": "", "identifier": "vocabulary", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dbt\".\"cdm\".\"vocabulary\"", "created_at": 1695616070.8810465}}, "macros": {"macro.etl_synthea_dbt.map_concept": {"name": "map_concept", "resource_type": "macro", "package_name": "etl_synthea_dbt", "path": "macros/map_concept.sql", "original_file_path": "macros/map_concept.sql", "unique_id": "macro.etl_synthea_dbt.map_concept", "macro_sql": "{%- macro map_concept(cdm_table=\"\", vocabulary_id=\"\", concept_code_field=\"\") -%}\n\nLEFT JOIN {{ source('vocab', 'concept') }} AS {{vocabulary_id}}_concept\nON \n    (\n        {{cdm_table}}.{{concept_code_field}} = {{vocabulary_id}}_concept.concept_code\n        AND {{vocabulary_id}}_concept.vocabulary_id = '{{vocabulary_id}}'\n    )\n    OR\n\t(\n\t\t{{cdm_table}}.{{concept_code_field}} = {{vocabulary_id}}_concept.concept_code\n\t\tAND {{vocabulary_id}}_concept.concept_code = 'No matching concept'\n\t)\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.0052493, "supported_languages": null}, "macro.etl_synthea_dbt.map_src_to_std_vocab": {"name": "map_src_to_std_vocab", "resource_type": "macro", "package_name": "etl_synthea_dbt", "path": "macros/map_concept.sql", "original_file_path": "macros/map_concept.sql", "unique_id": "macro.etl_synthea_dbt.map_src_to_std_vocab", "macro_sql": "{%- macro map_src_to_std_vocab(alias=\"\", from=\"\", target_domain_id=\"\", target_vocabulary_id=\"\", source_vocabulary_id=\"\") -%}\n\nINNER JOIN {{ ref('source_to_standard_vocab_map') }} AS {{alias}}\n    ON {{alias}}.source_code = {{from}}.code\n        AND {{alias}}.target_domain_id = '{{target_domain_id}}'\n        AND {{alias}}.target_vocabulary_id = '{{target_vocabulary_id}}'\n        AND {{alias}}.source_vocabulary_id = '{{source_vocabulary_id}}'\n        AND {{alias}}.target_standard_concept = 'S'\n        AND {{alias}}.target_invalid_reason IS NULL\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.0108154, "supported_languages": null}, "macro.etl_synthea_dbt.map_src_to_src_vocab": {"name": "map_src_to_src_vocab", "resource_type": "macro", "package_name": "etl_synthea_dbt", "path": "macros/map_concept.sql", "original_file_path": "macros/map_concept.sql", "unique_id": "macro.etl_synthea_dbt.map_src_to_src_vocab", "macro_sql": "{%- macro map_src_to_src_vocab(alias=\"\", from=\"\", source_vocabulary_id=\"\", source_domain_id=\"\") -%}\nINNER JOIN {{ ref('source_to_source_vocab_map') }} AS {{alias}}\n    ON {{alias}}.source_code = {{from}}.code\n        AND {{alias}}.source_vocabulary_id = '{{source_vocabulary_id}}'\n        AND {{alias}}.source_domain_id = '{{source_domain_id}}'\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.0150456, "supported_languages": null}, "macro.etl_synthea_dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "etl_synthea_dbt", "path": "macros/override_default_macros.sql", "original_file_path": "macros/override_default_macros.sql", "unique_id": "macro.etl_synthea_dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n    {%- set default_schema = target.schema -%}\n    \n    {%- if custom_schema_name is none -%}\n        {{ default_schema }}\n        {{ log(\"Setting Default Schema: {0}\".format(target.schema)) }}\n    {%- else -%}\n        {{ custom_schema_name | trim }}\n        {{ log(\"Setting Custom Schema: {0}\".format(custom_schema_name | trim)) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.0224314, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_binding_char": {"name": "duckdb__get_binding_char", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/seed.sql", "original_file_path": "macros/seed.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_binding_char", "macro_sql": "{% macro duckdb__get_binding_char() %}\n  {{ return(adapter.get_binding_char()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.0424266, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_batch_size": {"name": "duckdb__get_batch_size", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/seed.sql", "original_file_path": "macros/seed.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_batch_size", "macro_sql": "{% macro duckdb__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.0437858, "supported_languages": null}, "macro.dbt_duckdb.duckdb__load_csv_rows": {"name": "duckdb__load_csv_rows", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/seed.sql", "original_file_path": "macros/seed.sql", "unique_id": "macro.dbt_duckdb.duckdb__load_csv_rows", "macro_sql": "{% macro duckdb__load_csv_rows(model, agate_table) %}\n    {% if config.get('fast', true) %}\n        {% set seed_file_path = adapter.get_seed_file_path(model) %}\n        {% set sql %}\n          COPY {{ this.render() }} FROM '{{ seed_file_path }}' (FORMAT CSV, HEADER TRUE)\n        {% endset %}\n        {% do adapter.add_query(sql, abridge_sql_log=True) %}\n        {{ return(sql) }}\n    {% endif %}\n\n    {% set batch_size = get_batch_size() %}\n    {% set agate_table = adapter.convert_datetimes_to_strs(agate_table) %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    {{ get_binding_char() }}\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.0656395, "supported_languages": null}, "macro.dbt_duckdb.duckdb__alter_relation_add_remove_columns": {"name": "duckdb__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/columns.sql", "original_file_path": "macros/columns.sql", "unique_id": "macro.dbt_duckdb.duckdb__alter_relation_add_remove_columns", "macro_sql": "{% macro duckdb__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns %}\n    {% for column in add_columns %}\n      {% set sql -%}\n         alter {{ relation.type }} {{ relation }} add column\n           {{ column.name }} {{ column.data_type }}\n      {%- endset -%}\n      {% do run_query(sql) %}\n    {% endfor %}\n  {% endif %}\n\n  {% if remove_columns %}\n    {% for column in remove_columns %}\n      {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n          {{ column.name }}\n      {%- endset -%}\n      {% do run_query(sql) %}\n    {% endfor %}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.0784264, "supported_languages": null}, "macro.dbt_duckdb.duckdb__snapshot_merge_sql": {"name": "duckdb__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/snapshot_helper.sql", "original_file_path": "macros/snapshot_helper.sql", "unique_id": "macro.dbt_duckdb.duckdb__snapshot_merge_sql", "macro_sql": "{% macro duckdb__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    update {{ target }} as DBT_INTERNAL_TARGET\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_scd_id::text = DBT_INTERNAL_TARGET.dbt_scd_id::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      and DBT_INTERNAL_TARGET.dbt_valid_to is null;\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.089968, "supported_languages": null}, "macro.dbt_duckdb.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/snapshot_helper.sql", "original_file_path": "macros/snapshot_helper.sql", "unique_id": "macro.dbt_duckdb.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(False, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.0949993, "supported_languages": null}, "macro.dbt_duckdb.duckdb__post_snapshot": {"name": "duckdb__post_snapshot", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/snapshot_helper.sql", "original_file_path": "macros/snapshot_helper.sql", "unique_id": "macro.dbt_duckdb.duckdb__post_snapshot", "macro_sql": "{% macro duckdb__post_snapshot(staging_relation) %}\n    {% do return(drop_relation(staging_relation)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.0973475, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_delete_insert_merge_sql": {"name": "duckdb__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/incremental_helper.sql", "original_file_path": "macros/incremental_helper.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_delete_insert_merge_sql", "macro_sql": "{% macro duckdb__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }} as DBT_INCREMENTAL_TARGET\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = DBT_INCREMENTAL_TARGET.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.1232843, "supported_languages": null}, "macro.dbt_duckdb.duckdb__create_schema": {"name": "duckdb__create_schema", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__create_schema", "macro_sql": "{% macro duckdb__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.2234027, "supported_languages": null}, "macro.dbt_duckdb.duckdb__drop_schema": {"name": "duckdb__drop_schema", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__drop_schema", "macro_sql": "{% macro duckdb__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.2259066, "supported_languages": null}, "macro.dbt_duckdb.duckdb__list_schemas": {"name": "duckdb__list_schemas", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__list_schemas", "macro_sql": "{% macro duckdb__list_schemas(database) -%}\n  {% set sql %}\n    select schema_name\n    from system.information_schema.schemata\n    {% if database is not none %}\n    where catalog_name = '{{ database }}'\n    {% endif %}\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.2293646, "supported_languages": null}, "macro.dbt_duckdb.duckdb__check_schema_exists": {"name": "duckdb__check_schema_exists", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__check_schema_exists", "macro_sql": "{% macro duckdb__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from system.information_schema.schemata\n        where schema_name = '{{ schema }}'\n        and catalog_name = '{{ information_schema.database }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.2323656, "supported_languages": null}, "macro.dbt_duckdb.get_column_names": {"name": "get_column_names", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.get_column_names", "macro_sql": "{% macro get_column_names() %}\n  {# loop through user_provided_columns to get column names #}\n    {%- set user_provided_columns = model['columns'] -%}\n    (\n    {% for i in user_provided_columns %}\n      {% set col = user_provided_columns[i] %}\n      {{ col['name'] }} {{ \",\" if not loop.last }}\n    {% endfor %}\n  )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.2371275, "supported_languages": null}, "macro.dbt_duckdb.duckdb__create_table_as": {"name": "duckdb__create_table_as", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__create_table_as", "macro_sql": "{% macro duckdb__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(compiled_code) }}\n    {% endif %}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n    create {% if temporary: -%}temporary{%- endif %} table\n      {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% if contract_config.enforced and not temporary %}\n    {#-- DuckDB doesnt support constraints on temp tables --#}\n    {{ get_table_columns_and_constraints() }} ;\n    insert into {{ relation }} {{ get_column_names() }} (\n      {{ get_select_subquery(compiled_code) }}\n    );\n  {% else %}\n    as (\n      {{ compiled_code }}\n    );\n  {% endif %}\n  {%- elif language == 'python' -%}\n    {{ py_write_table(temporary=temporary, relation=relation, compiled_code=compiled_code) }}\n  {%- else -%}\n      {% do exceptions.raise_compiler_error(\"duckdb__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt_duckdb.get_column_names", "macro.dbt.get_select_subquery", "macro.dbt_duckdb.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.2517848, "supported_languages": null}, "macro.dbt_duckdb.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.py_write_table", "macro_sql": "{% macro py_write_table(temporary, relation, compiled_code) -%}\n{{ compiled_code }}\n\ndef materialize(df, con):\n    try:\n        import pyarrow\n        pyarrow_available = True\n    except ImportError:\n        pyarrow_available = False\n    finally:\n        if pyarrow_available and isinstance(df, pyarrow.Table):\n            # https://github.com/duckdb/duckdb/issues/6584\n            import pyarrow.dataset\n    con.execute('create table {{ relation }} as select * from df')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.2546325, "supported_languages": null}, "macro.dbt_duckdb.duckdb__create_view_as": {"name": "duckdb__create_view_as", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__create_view_as", "macro_sql": "{% macro duckdb__create_view_as(relation, sql) -%}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced %}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.2605636, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_columns_in_relation": {"name": "duckdb__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_columns_in_relation", "macro_sql": "{% macro duckdb__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from system.information_schema.columns\n      where table_name = '{{ relation.identifier }}'\n      {% if relation.schema %}\n      and table_schema = '{{ relation.schema }}'\n      {% endif %}\n      {% if relation.database %}\n      and table_catalog = '{{ relation.database }}'\n      {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.267313, "supported_languages": null}, "macro.dbt_duckdb.duckdb__list_relations_without_caching": {"name": "duckdb__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__list_relations_without_caching", "macro_sql": "{% macro duckdb__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      table_name as name,\n      table_schema as schema,\n      CASE table_type\n        WHEN 'BASE TABLE' THEN 'table'\n        WHEN 'VIEW' THEN 'view'\n        WHEN 'LOCAL TEMPORARY' THEN 'table'\n        END as type\n    from system.information_schema.tables\n    where table_schema = '{{ schema_relation.schema }}'\n    and table_catalog = '{{ schema_relation.database }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.2726822, "supported_languages": null}, "macro.dbt_duckdb.duckdb__drop_relation": {"name": "duckdb__drop_relation", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__drop_relation", "macro_sql": "{% macro duckdb__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.2756536, "supported_languages": null}, "macro.dbt_duckdb.duckdb__rename_relation": {"name": "duckdb__rename_relation", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__rename_relation", "macro_sql": "{% macro duckdb__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter {{ to_relation.type }} {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.2793145, "supported_languages": null}, "macro.dbt_duckdb.duckdb__make_temp_relation": {"name": "duckdb__make_temp_relation", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__make_temp_relation", "macro_sql": "{% macro duckdb__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix ~ py_current_timestring() %}\n    {% do return(base_relation.incorporate(\n                                  path={\n                                    \"identifier\": tmp_identifier,\n                                    \"schema\": none,\n                                    \"database\": none\n                                  })) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.py_current_timestring"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.2838764, "supported_languages": null}, "macro.dbt_duckdb.duckdb__current_timestamp": {"name": "duckdb__current_timestamp", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__current_timestamp", "macro_sql": "{% macro duckdb__current_timestamp() -%}\n  now()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.2849114, "supported_languages": null}, "macro.dbt_duckdb.duckdb__snapshot_string_as_time": {"name": "duckdb__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__snapshot_string_as_time", "macro_sql": "{% macro duckdb__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.2870355, "supported_languages": null}, "macro.dbt_duckdb.duckdb__snapshot_get_time": {"name": "duckdb__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__snapshot_get_time", "macro_sql": "{% macro duckdb__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.2882864, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_incremental_default_sql": {"name": "duckdb__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_incremental_default_sql", "macro_sql": "{% macro duckdb__get_incremental_default_sql(arg_dict) %}\n  {% do return(get_incremental_delete_insert_sql(arg_dict)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.2900982, "supported_languages": null}, "macro.dbt_duckdb.location_exists": {"name": "location_exists", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.location_exists", "macro_sql": "{% macro location_exists(location) -%}\n  {% do return(adapter.location_exists(location)) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.2919776, "supported_languages": null}, "macro.dbt_duckdb.write_to_file": {"name": "write_to_file", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.write_to_file", "macro_sql": "{% macro write_to_file(relation, location, options) -%}\n  {% call statement('write_to_file') -%}\n    copy {{ relation }} to '{{ location }}' ({{ options }})\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.2948508, "supported_languages": null}, "macro.dbt_duckdb.store_relation": {"name": "store_relation", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.store_relation", "macro_sql": "{% macro store_relation(plugin, relation, location, format) -%}\n  {%- set column_list = adapter.get_columns_in_relation(relation) -%}\n  {% do adapter.store_relation(plugin, relation, column_list, location, format) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.2982533, "supported_languages": null}, "macro.dbt_duckdb.render_write_options": {"name": "render_write_options", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.render_write_options", "macro_sql": "{% macro render_write_options(config) -%}\n  {% set options = config.get('options', {}) %}\n  {% for k in options %}\n    {% if options[k] is string %}\n      {% set _ = options.update({k: render(options[k])}) %}\n    {% else %}\n      {% set _ = options.update({k: render(options[k])}) %}\n    {% endif %}\n  {% endfor %}\n\n  {# legacy top-level write options #}\n  {% if config.get('format') %}\n    {% set _ = options.update({'format': render(config.get('format'))}) %}\n  {% endif %}\n  {% if config.get('delimiter') %}\n    {% set _ = options.update({'delimiter': render(config.get('delimiter'))}) %}\n  {% endif %}\n\n  {% do return(options) %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.311047, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_catalog": {"name": "duckdb__get_catalog", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_catalog", "macro_sql": "{% macro duckdb__get_catalog(information_schema, schemas) -%}\n  {%- call statement('catalog', fetch_result=True) -%}\n    select\n        '{{ database }}' as table_database,\n        t.table_schema,\n        t.table_name,\n        t.table_type,\n        '' as table_comment,\n        c.column_name,\n        c.ordinal_position as column_index,\n        c.data_type column_type,\n        '' as column_comment,\n        '' as table_owner\n    FROM information_schema.tables t JOIN information_schema.columns c ON t.table_schema = c.table_schema AND t.table_name = c.table_name\n    WHERE (\n        {%- for schema in schemas -%}\n          upper(t.table_schema) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n    )\n    AND t.table_type IN ('BASE TABLE', 'VIEW')\n    ORDER BY\n        t.table_schema,\n        t.table_name,\n        c.ordinal_position\n  {%- endcall -%}\n  {{ return(load_result('catalog').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.319853, "supported_languages": null}, "macro.dbt_duckdb.materialization_external_duckdb": {"name": "materialization_external_duckdb", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/materializations/external.sql", "original_file_path": "macros/materializations/external.sql", "unique_id": "macro.dbt_duckdb.materialization_external_duckdb", "macro_sql": "{% materialization external, adapter=\"duckdb\", supported_languages=['sql', 'python'] %}\n\n  {%- set location = render(config.get('location', default=external_location(this, config))) -%})\n  {%- set rendered_options = render_write_options(config) -%}\n  {%- set format = config.get('format', 'parquet') -%}\n  {%- set write_options = adapter.external_write_options(location, rendered_options) -%}\n  {%- set read_location = adapter.external_read_location(location, rendered_options) -%}\n\n  -- set language - python or sql\n  {%- set language = model['language'] -%}\n\n  {%- set target_relation = this.incorporate(type='view') %}\n\n  -- Continue as normal materialization\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set temp_relation =  make_intermediate_relation(this.incorporate(type='table'), suffix='__dbt_tmp') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation, suffix='__dbt_int') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_temp_relation = load_cached_relation(temp_relation) -%}\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_temp_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('create_table', language=language) -%}\n    {{- create_table_as(False, temp_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  -- write an temp relation into file\n  {{ write_to_file(temp_relation, location, write_options) }}\n  -- create a view on top of the location\n  {% call statement('main', language='sql') -%}\n    create or replace view {{ intermediate_relation }} as (\n        select * from '{{ read_location }}'\n    );\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n  {{ drop_relation_if_exists(temp_relation) }}\n\n  -- register table into glue\n  {%- set plugin_name = config.get('plugin') -%}\n  {%- set glue_register = config.get('glue_register', default=false) -%}\n  {% if plugin_name is not none or glue_register is true %}\n    {% if glue_register %}\n      {# legacy hack to set the glue database name, deprecate this #}\n      {%- set plugin_name = 'glue|' ~ config.get('glue_database', 'default') -%}\n    {% endif %}\n    {% do store_relation(plugin_name, target_relation, location, format) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_duckdb.external_location", "macro.dbt_duckdb.render_write_options", "macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_duckdb.write_to_file", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_duckdb.store_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.3856356, "supported_languages": ["sql", "python"]}, "macro.dbt_duckdb.materialization_table_duckdb": {"name": "materialization_table_duckdb", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_duckdb.materialization_table_duckdb", "macro_sql": "{% materialization table, adapter=\"duckdb\", supported_languages=['sql', 'python'] %}\n\n  {%- set language = model['language'] -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main', language=language) -%}\n    {{- create_table_as(False, intermediate_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.4209452, "supported_languages": ["sql", "python"]}, "macro.dbt_duckdb.materialization_incremental_duckdb": {"name": "materialization_incremental_duckdb", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_duckdb.materialization_incremental_duckdb", "macro_sql": "{% materialization incremental, adapter=\"duckdb\", supported_languages=['sql', 'python'] -%}\n\n  {%- set language = model['language'] -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n    {% set build_sql = create_table_as(False, target_relation, compiled_code, language) %}\n  {% elif full_refresh_mode %}\n    {% set build_sql = create_table_as(False, intermediate_relation, compiled_code, language) %}\n    {% set need_swap = true %}\n  {% else %}\n    {% if language == 'python' %}\n      {% set build_python = create_table_as(False, temp_relation, compiled_code, language) %}\n      {% call statement(\"pre\", language=language) %}\n        {{- build_python }}\n      {% endcall %}\n    {% else %} {# SQL #}\n      {% do run_query(create_table_as(True, temp_relation, compiled_code, language)) %}\n    {% endif %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n    {% set language = \"sql\" %}\n\n  {% endif %}\n\n  {% call statement(\"main\", language=language) %}\n      {{- build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.statement", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.4933193, "supported_languages": ["sql", "python"]}, "macro.dbt_duckdb.duckdb__any_value": {"name": "duckdb__any_value", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt_duckdb.duckdb__any_value", "macro_sql": "{% macro duckdb__any_value(expression) -%}\n\n    arbitrary({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.495391, "supported_languages": null}, "macro.dbt_duckdb.duckdb__datediff": {"name": "duckdb__datediff", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_duckdb.duckdb__datediff", "macro_sql": "{% macro duckdb__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.5361464, "supported_languages": null}, "macro.dbt_duckdb.duckdb__listagg": {"name": "duckdb__listagg", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt_duckdb.duckdb__listagg", "macro_sql": "{% macro duckdb__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n    {% if limit_num -%}\n    list_aggr(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        'string_agg',\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.5438905, "supported_languages": null}, "macro.dbt_duckdb.duckdb__last_day": {"name": "duckdb__last_day", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/lastday.sql", "original_file_path": "macros/utils/lastday.sql", "unique_id": "macro.dbt_duckdb.duckdb__last_day", "macro_sql": "{% macro duckdb__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- duckdb dateadd does not support quarter interval.\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd('month', '3', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc", "macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.5499558, "supported_languages": null}, "macro.dbt_duckdb.duckdb__split_part": {"name": "duckdb__split_part", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/splitpart.sql", "original_file_path": "macros/utils/splitpart.sql", "unique_id": "macro.dbt_duckdb.duckdb__split_part", "macro_sql": "{% macro duckdb__split_part(string_text, delimiter_text, part_number) %}\n    string_split({{ string_text }}, {{ delimiter_text }})[ {{ part_number }} ]\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.552906, "supported_languages": null}, "macro.dbt_duckdb.external_location": {"name": "external_location", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/external_location.sql", "original_file_path": "macros/utils/external_location.sql", "unique_id": "macro.dbt_duckdb.external_location", "macro_sql": "{%- macro external_location(relation, config) -%}\n  {%- if config.get('options', {}).get('partition_by') is none -%}\n    {%- set format = config.get('format', 'parquet') -%}\n    {{- adapter.external_root() }}/{{ relation.identifier }}.{{ format }}\n  {%- else -%}\n    {{- adapter.external_root() }}/{{ relation.identifier }}\n  {%- endif -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.5597167, "supported_languages": null}, "macro.dbt_duckdb.register_upstream_external_models": {"name": "register_upstream_external_models", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/upstream.sql", "original_file_path": "macros/utils/upstream.sql", "unique_id": "macro.dbt_duckdb.register_upstream_external_models", "macro_sql": "{%- macro register_upstream_external_models() -%}\n{% if execute %}\n{% set upstream_nodes = {} %}\n{% set upstream_schemas = {} %}\n{% for node in selected_resources %}\n  {% for upstream_node in graph['nodes'][node]['depends_on']['nodes'] %}\n    {% if upstream_node not in upstream_nodes and upstream_node not in selected_resources %}\n      {% do upstream_nodes.update({upstream_node: None}) %}\n      {% set upstream = graph['nodes'].get(upstream_node) %}\n      {% if upstream\n         and upstream.resource_type in ('model', 'seed')\n         and upstream.config.materialized=='external'\n      %}\n        {%- set upstream_rel = api.Relation.create(\n          database=upstream['database'],\n          schema=upstream['schema'],\n          identifier=upstream['alias']\n        ) -%}\n        {%- set location = upstream.config.get('location', external_location(upstream_rel, upstream.config)) -%}\n        {%- set rendered_options = render_write_options(upstream.config) -%}\n        {%- set upstream_location = adapter.external_read_location(location, rendered_options) -%}\n        {% if upstream_rel.schema not in upstream_schemas %}\n          {% call statement('main', language='sql') -%}\n            create schema if not exists {{ upstream_rel.schema }}\n          {%- endcall %}\n          {% do upstream_schemas.update({upstream_rel.schema: None}) %}\n        {% endif %}\n        {% call statement('main', language='sql') -%}\n          create or replace view {{ upstream_rel }} as (\n            select * from '{{ upstream_location }}'\n          );\n        {%- endcall %}\n      {%- endif %}\n    {% endif %}\n  {% endfor %}\n{% endfor %}\n{% do adapter.commit() %}\n{% endif %}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_duckdb.external_location", "macro.dbt_duckdb.render_write_options", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.5907931, "supported_languages": null}, "macro.dbt_duckdb.duckdb__dateadd": {"name": "duckdb__dateadd", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_duckdb.duckdb__dateadd", "macro_sql": "{% macro duckdb__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.593589, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.6120508, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.6189883, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.6224716, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.6454966, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.6594985, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.6681042, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.6707556, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.6841133, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.6863525, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.6881661, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.689828, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.6913826, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.6957433, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.6992013, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.7026496, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.7135682, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.7161968, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.7187533, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.722047, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.724312, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.7276208, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.7296784, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.7326064, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.7346377, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.736299, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.7394502, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.7466402, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.7663176, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.7727294, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.780557, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.783187, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.7915013, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.867736, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.8878798, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.8915029, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.905136, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.9081602, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.915783, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616062.9870353, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.0023425, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.01696, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.0276039, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.0882478, "supported_languages": ["sql"]}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {{ create_or_replace_clone(target_relation, defer_relation) }}\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.127257, "supported_languages": ["sql"]}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.1307259, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation }} clone {{ defer_relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.132287, "supported_languages": null}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.134838, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.1361122, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/get_materialized_view_configuration_changes.sql", "original_file_path": "macros/materializations/models/materialized_view/get_materialized_view_configuration_changes.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.1408598, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/get_materialized_view_configuration_changes.sql", "original_file_path": "macros/materializations/models/materialized_view/get_materialized_view_configuration_changes.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.1425922, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_as_sql": {"name": "get_replace_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/replace_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/replace_materialized_view.sql", "unique_id": "macro.dbt.get_replace_materialized_view_as_sql", "macro_sql": "{% macro get_replace_materialized_view_as_sql(relation, sql, existing_relation, backup_relation, intermediate_relation) %}\n    {{- log('Applying REPLACE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_replace_materialized_view_as_sql', 'dbt')(relation, sql, existing_relation, backup_relation, intermediate_relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.147396, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_as_sql": {"name": "default__get_replace_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/replace_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/replace_materialized_view.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_as_sql", "macro_sql": "{% macro default__get_replace_materialized_view_as_sql(relation, sql, existing_relation, backup_relation, intermediate_relation) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.1493971, "supported_languages": null}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.2129905, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.2176988, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.2209682, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_materialized_view_as_sql(target_relation, sql, existing_relation, backup_relation, intermediate_relation) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_materialized_view_as_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.2379277, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.2408252, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.2486758, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/create_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/create_materialized_view.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.2526886, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/create_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/create_materialized_view.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.2542794, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/alter_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/alter_materialized_view.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.2604437, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/alter_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/alter_materialized_view.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.2628803, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/refresh_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/refresh_materialized_view.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.266596, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/refresh_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/refresh_materialized_view.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.26834, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.2814083, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.2828627, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.2899623, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.2921937, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.293901, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.3095603, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.3142202, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.3184078, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.355089, "supported_languages": ["sql"]}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.3661144, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.3683026, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.3736565, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.3812053, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.3866956, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.3889396, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.get_column_names", "macro.dbt.default__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.3911605, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.3962533, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.3981616, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.4003413, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.405334, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.4247732, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.4281764, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.43057, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.4667783, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.4722898, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.4761713, "supported_languages": null}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.5015562, "supported_languages": ["sql"]}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.5061302, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.5110564, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.5514286, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.619186, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.6297505, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.6324053, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.6379979, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.640151, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.6417003, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.6435325, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.644803, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.6465871, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.647815, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.6530535, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.655029, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.6688864, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.6739058, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.6770732, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.7218628, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.723757, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.7263615, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.7346096, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.736399, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.7382944, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.7549634, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.770159, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.8212898, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.8249817, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.827285, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.8284948, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.8302162, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.831619, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.8342032, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.8455985, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.8477712, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.85066, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.856207, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.9293036, "supported_languages": ["sql"]}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.9325836, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.9340346, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.9367235, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.9379518, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.941756, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.944713, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.946391, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.9491763, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.9506373, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.9543374, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.9561505, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.970487, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.9721515, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.9738705, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.9755013, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.9772816, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.978935, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.980705, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.9825914, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.98427, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.985881, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.987582, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.9891098, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.9909267, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.99255, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.995238, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616063.9968705, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.0038116, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.008464, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.0113795, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.0131717, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.0157816, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.017242, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.022974, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.024897, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.0274034, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.0299435, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.031037, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.0342348, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.035678, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.0390792, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.040916, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.0435574, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.045258, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.049241, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.051875, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.0543487, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.0551481, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.0578568, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.0593252, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.062228, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.0637624, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.0671513, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.069494, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.0730796, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.0747404, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.0780435, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.0796385, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.082357, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.083244, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.0871465, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.0889904, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.10992, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.1117847, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.1207004, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.1251225, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.1314406, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.137182, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.1380346, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.1426303, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.14677, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.1509712, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.153741, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.1595988, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.1625183, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.166092, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.1697288, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.176308, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.1802049, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.1828394, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.1872556, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.1896894, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.2099795, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.2111864, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.2129865, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.2141464, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.2179086, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.2198994, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.2210476, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.2234366, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.2254598, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.2278624, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.2299314, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.2323472, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.239961, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.2420578, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.2450745, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.2475483, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.260437, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.2715282, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {%- if relation.is_table -%}\n            {{- drop_table(relation) -}}\n        {%- elif relation.is_view -%}\n            {{- drop_view(relation) -}}\n        {%- elif relation.is_materialized_view -%}\n            {{- drop_materialized_view(relation) -}}\n        {%- else -%}\n            drop {{ relation.type }} if exists {{ relation }} cascade\n        {%- endif -%}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.drop_table", "macro.dbt.drop_view", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.276473, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n  {{ return(adapter.dispatch('drop_table', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.278359, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.2794712, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n  {{ return(adapter.dispatch('drop_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.2813683, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.2825143, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n  {{ return(adapter.dispatch('drop_materialized_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.2844036, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.2855241, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.2898183, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.292585, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.294642, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.2969375, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.3241968, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.3261395, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.3295362, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.3318052, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.3341491, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.336122, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {{ col_err.append(col['name']) }}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      cast(null as {{ col['data_type'] }}) as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.3450265, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.3489475, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.3514156, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.3551393, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.3574688, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.364516, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.3677197, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.377582, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.3977666, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.401164, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.403146, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.404808, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.4066534, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.4092424, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.4120991, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.41565, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.4176407, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.4194224, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.454936, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.4567604, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.4591758, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.4622886, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.4649205, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.4687877, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.470748, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.4724512, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.4746015, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.478024, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.4810848, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.4874058, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.4898942, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.4914193, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.493504, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.50156, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.5033863, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.5055158, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.5073159, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.5103085, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.515742, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.5204177, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.5250533, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.530623, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.5322356, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.5337944, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.5349317, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.53672, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.538054, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.5398152, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt.default__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.541645, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.5517359, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.5531695, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.554843, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.5593567, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.5613356, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.5627828, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.564543, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.565882, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.5715892, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.5740576, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.5771077, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1695616064.580133, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.etl_synthea_dbt.cdm_source": ["source.etl_synthea_dbt.vocab.vocabulary"], "model.etl_synthea_dbt.condition_era": ["model.etl_synthea_dbt.tmp_ce"], "model.etl_synthea_dbt.condition_occurrence": ["model.etl_synthea_dbt.source_to_source_vocab_map", "model.etl_synthea_dbt.source_to_standard_vocab_map", "model.etl_synthea_dbt.stg_condition_occurrence"], "model.etl_synthea_dbt.death": ["model.etl_synthea_dbt.person", "model.etl_synthea_dbt.source_to_standard_vocab_map", "source.etl_synthea_dbt.synthea.encounters"], "model.etl_synthea_dbt.device_exposure": ["model.etl_synthea_dbt.final_visit_ids", "model.etl_synthea_dbt.person", "model.etl_synthea_dbt.provider", "model.etl_synthea_dbt.source_to_source_vocab_map", "model.etl_synthea_dbt.source_to_standard_vocab_map", "source.etl_synthea_dbt.synthea.devices", "source.etl_synthea_dbt.synthea.encounters"], "model.etl_synthea_dbt.drug_era": ["model.etl_synthea_dbt.tmp_de"], "model.etl_synthea_dbt.drug_exposure": ["model.etl_synthea_dbt.final_visit_ids", "model.etl_synthea_dbt.person", "model.etl_synthea_dbt.provider", "model.etl_synthea_dbt.source_to_source_vocab_map", "model.etl_synthea_dbt.source_to_standard_vocab_map", "source.etl_synthea_dbt.synthea.encounters", "source.etl_synthea_dbt.synthea.immunizations", "source.etl_synthea_dbt.synthea.medications"], "model.etl_synthea_dbt.observation": ["model.etl_synthea_dbt.final_visit_ids", "model.etl_synthea_dbt.person", "model.etl_synthea_dbt.provider", "model.etl_synthea_dbt.source_to_source_vocab_map", "model.etl_synthea_dbt.source_to_standard_vocab_map", "source.etl_synthea_dbt.synthea.allergies", "source.etl_synthea_dbt.synthea.conditions", "source.etl_synthea_dbt.synthea.encounters", "source.etl_synthea_dbt.synthea.observations"], "model.etl_synthea_dbt.observation_period": ["model.etl_synthea_dbt.person", "source.etl_synthea_dbt.synthea.encounters"], "model.etl_synthea_dbt.visit_occurrence": ["model.etl_synthea_dbt.all_visits", "model.etl_synthea_dbt.final_visit_ids", "model.etl_synthea_dbt.person", "model.etl_synthea_dbt.provider", "source.etl_synthea_dbt.synthea.encounters", "source.etl_synthea_dbt.vocab.concept"], "model.etl_synthea_dbt.all_visits": ["source.etl_synthea_dbt.synthea.encounters"], "model.etl_synthea_dbt.assign_all_visit_ids": ["model.etl_synthea_dbt.all_visits", "source.etl_synthea_dbt.synthea.encounters"], "model.etl_synthea_dbt.final_visit_ids": ["model.etl_synthea_dbt.assign_all_visit_ids"], "model.etl_synthea_dbt.stg_condition_occurrence": ["model.etl_synthea_dbt.final_visit_ids", "model.etl_synthea_dbt.person", "source.etl_synthea_dbt.synthea.conditions"], "model.etl_synthea_dbt.tmp_ce": ["model.etl_synthea_dbt.condition_occurrence"], "model.etl_synthea_dbt.tmp_de": ["model.etl_synthea_dbt.drug_exposure", "source.etl_synthea_dbt.vocab.concept", "source.etl_synthea_dbt.vocab.concept_ancestor"], "test.etl_synthea_dbt.unique_observation_period_observation_period_id.34c08aa0cd": ["model.etl_synthea_dbt.observation_period"], "test.etl_synthea_dbt.not_null_observation_period_observation_period_id.6c6fb96d33": ["model.etl_synthea_dbt.observation_period"], "test.etl_synthea_dbt.not_null_observation_period_person_id.71c8f248d3": ["model.etl_synthea_dbt.observation_period"], "test.etl_synthea_dbt.relationships_observation_period_person_id__person_id__ref_person_.3e962f56b4": ["model.etl_synthea_dbt.observation_period", "model.etl_synthea_dbt.person"], "test.etl_synthea_dbt.not_null_observation_period_observation_period_start_date.e88435db95": ["model.etl_synthea_dbt.observation_period"], "test.etl_synthea_dbt.not_null_observation_period_observation_period_end_date.e74764a048": ["model.etl_synthea_dbt.observation_period"], "test.etl_synthea_dbt.not_null_observation_period_period_type_concept_id.b993e0023c": ["model.etl_synthea_dbt.observation_period"], "test.etl_synthea_dbt.relationships_observation_period_period_type_concept_id__concept_id__source_vocab_concept_.d636ade84f": ["model.etl_synthea_dbt.observation_period", "source.etl_synthea_dbt.vocab.concept"], "test.etl_synthea_dbt.unique_visit_occurrence_visit_occurrence_id.faa3aa67c6": ["model.etl_synthea_dbt.visit_occurrence"], "test.etl_synthea_dbt.not_null_visit_occurrence_visit_occurrence_id.a3a65446cf": ["model.etl_synthea_dbt.visit_occurrence"], "test.etl_synthea_dbt.not_null_visit_occurrence_person_id.e916ff163a": ["model.etl_synthea_dbt.visit_occurrence"], "test.etl_synthea_dbt.relationships_visit_occurrence_person_id__person_id__ref_person_.0f12e4784d": ["model.etl_synthea_dbt.person", "model.etl_synthea_dbt.visit_occurrence"], "test.etl_synthea_dbt.not_null_visit_occurrence_visit_concept_id.e13dd76157": ["model.etl_synthea_dbt.visit_occurrence"], "test.etl_synthea_dbt.relationships_visit_occurrence_visit_concept_id__concept_id__source_vocab_concept_.989bda5e7b": ["model.etl_synthea_dbt.visit_occurrence", "source.etl_synthea_dbt.vocab.concept"], "test.etl_synthea_dbt.not_null_visit_occurrence_visit_start_date.6ef645340a": ["model.etl_synthea_dbt.visit_occurrence"], "test.etl_synthea_dbt.not_null_visit_occurrence_visit_end_date.47f6967fe8": ["model.etl_synthea_dbt.visit_occurrence"], "test.etl_synthea_dbt.not_null_visit_occurrence_visit_type_concept_id.6078890882": ["model.etl_synthea_dbt.visit_occurrence"], "test.etl_synthea_dbt.relationships_visit_occurrence_visit_type_concept_id__concept_id__source_vocab_concept_.de192d0d82": ["model.etl_synthea_dbt.visit_occurrence", "source.etl_synthea_dbt.vocab.concept"], "test.etl_synthea_dbt.relationships_visit_occurrence_admitting_source_concept_id__concept_id__source_vocab_concept_.ee5b624dfe": ["model.etl_synthea_dbt.visit_occurrence", "source.etl_synthea_dbt.vocab.concept"], "test.etl_synthea_dbt.relationships_visit_occurrence_discharge_to_concept_id__concept_id__source_vocab_concept_.2f4c28e6b1": ["model.etl_synthea_dbt.visit_occurrence", "source.etl_synthea_dbt.vocab.concept"], "test.etl_synthea_dbt.relationships_visit_occurrence_preceding_visit_occurrence_id__visit_occurrence_id__ref_visit_occurrence_.df91dec380": ["model.etl_synthea_dbt.visit_occurrence"], "test.etl_synthea_dbt.unique_condition_occurrence_condition_occurrence_id.e4cb792f90": ["model.etl_synthea_dbt.condition_occurrence"], "test.etl_synthea_dbt.not_null_condition_occurrence_condition_occurrence_id.f70111fa08": ["model.etl_synthea_dbt.condition_occurrence"], "test.etl_synthea_dbt.not_null_condition_occurrence_person_id.9f19d9c9cb": ["model.etl_synthea_dbt.condition_occurrence"], "test.etl_synthea_dbt.relationships_condition_occurrence_person_id__person_id__ref_person_.f3b716ae22": ["model.etl_synthea_dbt.condition_occurrence", "model.etl_synthea_dbt.person"], "test.etl_synthea_dbt.relationships_condition_occurrence_condition_concept_id__concept_id__source_vocab_concept_.d920e04abd": ["model.etl_synthea_dbt.condition_occurrence", "source.etl_synthea_dbt.vocab.concept"], "test.etl_synthea_dbt.not_null_condition_occurrence_condition_start_date.6cbb11717a": ["model.etl_synthea_dbt.condition_occurrence"], "test.etl_synthea_dbt.not_null_condition_occurrence_condition_type_concept_id.13b95f8e19": ["model.etl_synthea_dbt.condition_occurrence"], "test.etl_synthea_dbt.relationships_condition_occurrence_condition_type_concept_id__concept_id__source_vocab_concept_.42f881e4a7": ["model.etl_synthea_dbt.condition_occurrence", "source.etl_synthea_dbt.vocab.concept"], "test.etl_synthea_dbt.relationships_condition_occurrence_condition_status_source_value__concept_id__source_vocab_concept_.05a987e39c": ["model.etl_synthea_dbt.condition_occurrence", "source.etl_synthea_dbt.vocab.concept"], "test.etl_synthea_dbt.relationships_condition_occurrence_provider_id__provider_id__ref_provider_.b75b05445b": ["model.etl_synthea_dbt.condition_occurrence", "model.etl_synthea_dbt.provider"], "test.etl_synthea_dbt.relationships_condition_occurrence_visit_occurrence_id__visit_occurrence_id__ref_visit_occurrence_.2e469f049b": ["model.etl_synthea_dbt.condition_occurrence", "model.etl_synthea_dbt.visit_occurrence"], "test.etl_synthea_dbt.relationships_condition_occurrence_visit_detail_id__visit_detail_id__ref_visit_detail_.fc073d5579": ["model.etl_synthea_dbt.condition_occurrence", "model.etl_synthea_dbt.visit_detail"], "test.etl_synthea_dbt.relationships_condition_occurrence_condition_source_concept_id__concept_id__source_vocab_concept_.1f641311f0": ["model.etl_synthea_dbt.condition_occurrence", "source.etl_synthea_dbt.vocab.concept"], "test.etl_synthea_dbt.unique_drug_exposure_drug_exposure_id.6e11199bfc": ["model.etl_synthea_dbt.drug_exposure"], "test.etl_synthea_dbt.not_null_drug_exposure_drug_exposure_id.a57f0904e3": ["model.etl_synthea_dbt.drug_exposure"], "test.etl_synthea_dbt.not_null_drug_exposure_person_id.e6d75aa2b9": ["model.etl_synthea_dbt.drug_exposure"], "test.etl_synthea_dbt.relationships_drug_exposure_person_id__person_id__ref_person_.811ae7ceb8": ["model.etl_synthea_dbt.drug_exposure", "model.etl_synthea_dbt.person"], "test.etl_synthea_dbt.not_null_drug_exposure_drug_concept_id.f309abd476": ["model.etl_synthea_dbt.drug_exposure"], "test.etl_synthea_dbt.relationships_drug_exposure_drug_concept_id__concept_id__source_vocab_concept_.e3645bdcef": ["model.etl_synthea_dbt.drug_exposure", "source.etl_synthea_dbt.vocab.concept"], "test.etl_synthea_dbt.not_null_drug_exposure_drug_exposure_start_date.61d182cfaa": ["model.etl_synthea_dbt.drug_exposure"], "test.etl_synthea_dbt.not_null_drug_exposure_drug_exposure_end_date.89e020fdd4": ["model.etl_synthea_dbt.drug_exposure"], "test.etl_synthea_dbt.not_null_drug_exposure_drug_type_concept_id.5e130283b2": ["model.etl_synthea_dbt.drug_exposure"], "test.etl_synthea_dbt.relationships_drug_exposure_drug_type_concept_id__concept_id__source_vocab_concept_.e775235ffd": ["model.etl_synthea_dbt.drug_exposure", "source.etl_synthea_dbt.vocab.concept"], "test.etl_synthea_dbt.relationships_drug_exposure_route_concept_id__concept_id__source_vocab_concept_.67158eaf74": ["model.etl_synthea_dbt.drug_exposure", "source.etl_synthea_dbt.vocab.concept"], "test.etl_synthea_dbt.relationships_drug_exposure_provider_id__provider_id__ref_provider_.022f932272": ["model.etl_synthea_dbt.drug_exposure", "model.etl_synthea_dbt.provider"], "test.etl_synthea_dbt.relationships_drug_exposure_visit_occurrence_id__visit_occurrence_id__ref_visit_occurrence_.a7ed7dfcb5": ["model.etl_synthea_dbt.drug_exposure", "model.etl_synthea_dbt.visit_occurrence"], "test.etl_synthea_dbt.relationships_drug_exposure_visit_detail_id__visit_detail_id__ref_visit_detail_.770b0c9b99": ["model.etl_synthea_dbt.drug_exposure", "model.etl_synthea_dbt.visit_detail"], "test.etl_synthea_dbt.relationships_drug_exposure_drug_source_concept_id__concept_id__source_vocab_concept_.7dff7fc1d2": ["model.etl_synthea_dbt.drug_exposure", "source.etl_synthea_dbt.vocab.concept"], "test.etl_synthea_dbt.unique_device_exposure_device_exposure_id.cdcba3488d": ["model.etl_synthea_dbt.device_exposure"], "test.etl_synthea_dbt.not_null_device_exposure_device_exposure_id.ab1d5a2fe5": ["model.etl_synthea_dbt.device_exposure"], "test.etl_synthea_dbt.not_null_device_exposure_person_id.1330a61d39": ["model.etl_synthea_dbt.device_exposure"], "test.etl_synthea_dbt.relationships_device_exposure_person_id__person_id__ref_person_.894d3b47b9": ["model.etl_synthea_dbt.device_exposure", "model.etl_synthea_dbt.person"], "test.etl_synthea_dbt.not_null_device_exposure_device_concept_id.041c422e55": ["model.etl_synthea_dbt.device_exposure"], "test.etl_synthea_dbt.relationships_device_exposure_device_concept_id__concept_id__source_vocab_concept_.2545c0bdf6": ["model.etl_synthea_dbt.device_exposure", "source.etl_synthea_dbt.vocab.concept"], "test.etl_synthea_dbt.not_null_device_exposure_device_exposure_start_date.23aa3e8aea": ["model.etl_synthea_dbt.device_exposure"], "test.etl_synthea_dbt.not_null_device_exposure_device_type_concept_id.9600b2592d": ["model.etl_synthea_dbt.device_exposure"], "test.etl_synthea_dbt.relationships_device_exposure_device_type_concept_id__concept_id__source_vocab_concept_.e48c3d4798": ["model.etl_synthea_dbt.device_exposure", "source.etl_synthea_dbt.vocab.concept"], "test.etl_synthea_dbt.relationships_device_exposure_provider_id__provider_id__ref_provider_.23736ac216": ["model.etl_synthea_dbt.device_exposure", "model.etl_synthea_dbt.provider"], "test.etl_synthea_dbt.relationships_device_exposure_visit_occurrence_id__visit_occurrence_id__ref_visit_occurrence_.c993394705": ["model.etl_synthea_dbt.device_exposure", "model.etl_synthea_dbt.visit_occurrence"], "test.etl_synthea_dbt.relationships_device_exposure_visit_detail_id__visit_detail_id__ref_visit_detail_.c064b67cdb": ["model.etl_synthea_dbt.device_exposure", "model.etl_synthea_dbt.visit_detail"], "test.etl_synthea_dbt.relationships_device_exposure_device_source_concept_id__concept_id__source_vocab_concept_.d5577dca4c": ["model.etl_synthea_dbt.device_exposure", "source.etl_synthea_dbt.vocab.concept"], "test.etl_synthea_dbt.relationships_device_exposure_unit_concept_id__concept_id__source_vocab_concept_.f445d0b9dd": ["model.etl_synthea_dbt.device_exposure", "source.etl_synthea_dbt.vocab.concept"], "test.etl_synthea_dbt.relationships_device_exposure_unit_source_concept_id__concept_id__source_vocab_concept_.75df4b5f9f": ["model.etl_synthea_dbt.device_exposure", "source.etl_synthea_dbt.vocab.concept"], "test.etl_synthea_dbt.unique_observation_observation_id.c7fcc2846f": ["model.etl_synthea_dbt.observation"], "test.etl_synthea_dbt.not_null_observation_observation_id.efd24835d6": ["model.etl_synthea_dbt.observation"], "test.etl_synthea_dbt.not_null_observation_person_id.8fa7495344": ["model.etl_synthea_dbt.observation"], "test.etl_synthea_dbt.relationships_observation_person_id__person_id__ref_person_.e1ae5f3106": ["model.etl_synthea_dbt.observation", "model.etl_synthea_dbt.person"], "test.etl_synthea_dbt.not_null_observation_observation_concept_id.4725260db7": ["model.etl_synthea_dbt.observation"], "test.etl_synthea_dbt.relationships_observation_observation_concept_id__concept_id__source_vocab_concept_.d6cdb5cd5e": ["model.etl_synthea_dbt.observation", "source.etl_synthea_dbt.vocab.concept"], "test.etl_synthea_dbt.not_null_observation_observation_date.0cde7d2dd7": ["model.etl_synthea_dbt.observation"], "test.etl_synthea_dbt.not_null_observation_observation_type_concept_id.3f8e08f159": ["model.etl_synthea_dbt.observation"], "test.etl_synthea_dbt.relationships_observation_observation_type_concept_id__concept_id__source_vocab_concept_.d6bea239d2": ["model.etl_synthea_dbt.observation", "source.etl_synthea_dbt.vocab.concept"], "test.etl_synthea_dbt.relationships_observation_value_as_concept_id__concept_id__source_vocab_concept_.14ce6d5d7c": ["model.etl_synthea_dbt.observation", "source.etl_synthea_dbt.vocab.concept"], "test.etl_synthea_dbt.relationships_observation_qualifier_concept_id__concept_id__source_vocab_concept_.2145be4c80": ["model.etl_synthea_dbt.observation", "source.etl_synthea_dbt.vocab.concept"], "test.etl_synthea_dbt.relationships_observation_unit_concept_id__concept_id__source_vocab_concept_.4d3119aedd": ["model.etl_synthea_dbt.observation", "source.etl_synthea_dbt.vocab.concept"], "test.etl_synthea_dbt.relationships_observation_provider_id__provider_id__ref_provider_.531e2ef5ba": ["model.etl_synthea_dbt.observation", "model.etl_synthea_dbt.provider"], "test.etl_synthea_dbt.relationships_observation_visit_occurrence_id__visit_occurrence_id__ref_visit_occurrence_.6929746e26": ["model.etl_synthea_dbt.observation", "model.etl_synthea_dbt.visit_occurrence"], "test.etl_synthea_dbt.relationships_observation_visit_detail_id__visit_detail_id__ref_visit_detail_.b9b6665fca": ["model.etl_synthea_dbt.observation", "model.etl_synthea_dbt.visit_detail"], "test.etl_synthea_dbt.relationships_observation_observation_source_concept_id__concept_id__source_vocab_concept_.cc7ef061f3": ["model.etl_synthea_dbt.observation", "source.etl_synthea_dbt.vocab.concept"], "test.etl_synthea_dbt.relationships_observation_obs_event_field_concept_id__concept_id__source_vocab_concept_.1c7bfac6f6": ["model.etl_synthea_dbt.observation", "source.etl_synthea_dbt.vocab.concept"], "test.etl_synthea_dbt.unique_drug_era_drug_era_id.e3b01c38b2": ["model.etl_synthea_dbt.drug_era"], "test.etl_synthea_dbt.not_null_drug_era_drug_era_id.69fa2cd6fe": ["model.etl_synthea_dbt.drug_era"], "test.etl_synthea_dbt.not_null_drug_era_person_id.e848e282a5": ["model.etl_synthea_dbt.drug_era"], "test.etl_synthea_dbt.relationships_drug_era_person_id__person_id__ref_person_.a3cad7938a": ["model.etl_synthea_dbt.drug_era", "model.etl_synthea_dbt.person"], "test.etl_synthea_dbt.not_null_drug_era_drug_concept_id.f7daf926d4": ["model.etl_synthea_dbt.drug_era"], "test.etl_synthea_dbt.relationships_drug_era_drug_concept_id__concept_id__source_vocab_concept_.91ffe5fbde": ["model.etl_synthea_dbt.drug_era", "source.etl_synthea_dbt.vocab.concept"], "test.etl_synthea_dbt.not_null_drug_era_drug_era_start_date.7321b828f3": ["model.etl_synthea_dbt.drug_era"], "test.etl_synthea_dbt.not_null_drug_era_drug_era_end_date.ec78b5bf14": ["model.etl_synthea_dbt.drug_era"], "test.etl_synthea_dbt.unique_condition_era_condition_era_id.cd3b6005dd": ["model.etl_synthea_dbt.condition_era"], "test.etl_synthea_dbt.not_null_condition_era_condition_era_id.7a62c16f99": ["model.etl_synthea_dbt.condition_era"], "test.etl_synthea_dbt.not_null_condition_era_person_id.0c539c09d2": ["model.etl_synthea_dbt.condition_era"], "test.etl_synthea_dbt.relationships_condition_era_person_id__person_id__ref_person_.e1a24435e6": ["model.etl_synthea_dbt.condition_era", "model.etl_synthea_dbt.person"], "test.etl_synthea_dbt.not_null_condition_era_condition_concept_id.e3da2b562c": ["model.etl_synthea_dbt.condition_era"], "test.etl_synthea_dbt.relationships_condition_era_condition_concept_id__concept_id__source_vocab_concept_.3e586bc15f": ["model.etl_synthea_dbt.condition_era", "source.etl_synthea_dbt.vocab.concept"], "test.etl_synthea_dbt.not_null_condition_era_condition_era_start_date.479245d393": ["model.etl_synthea_dbt.condition_era"], "test.etl_synthea_dbt.not_null_condition_era_condition_era_end_date.de0da8b839": ["model.etl_synthea_dbt.condition_era"], "model.etl_synthea_dbt.source_to_standard_vocab_map": ["source.etl_synthea_dbt.vocab.concept", "source.etl_synthea_dbt.vocab.concept_relationship"], "model.etl_synthea_dbt.source_to_source_vocab_map": ["source.etl_synthea_dbt.vocab.concept"], "model.etl_synthea_dbt.procedure_occurrence": ["model.etl_synthea_dbt.final_visit_ids", "model.etl_synthea_dbt.person", "model.etl_synthea_dbt.provider", "model.etl_synthea_dbt.source_to_source_vocab_map", "model.etl_synthea_dbt.source_to_standard_vocab_map", "source.etl_synthea_dbt.synthea.encounters", "source.etl_synthea_dbt.synthea.procedures"], "test.etl_synthea_dbt.unique_procedure_occurrence_procedure_occurrence_id.fb0663ac66": ["model.etl_synthea_dbt.procedure_occurrence"], "test.etl_synthea_dbt.not_null_procedure_occurrence_procedure_occurrence_id.e3b1d90a98": ["model.etl_synthea_dbt.procedure_occurrence"], "test.etl_synthea_dbt.not_null_procedure_occurrence_person_id.95f33a8709": ["model.etl_synthea_dbt.procedure_occurrence"], "test.etl_synthea_dbt.relationships_procedure_occurrence_person_id__person_id__ref_person_.901403d0b9": ["model.etl_synthea_dbt.person", "model.etl_synthea_dbt.procedure_occurrence"], "test.etl_synthea_dbt.not_null_procedure_occurrence_procedure_concept_id.39a7f862ab": ["model.etl_synthea_dbt.procedure_occurrence"], "test.etl_synthea_dbt.relationships_procedure_occurrence_procedure_concept_id__concept_id__source_vocab_concept_.1d83da347f": ["model.etl_synthea_dbt.procedure_occurrence", "source.etl_synthea_dbt.vocab.concept"], "test.etl_synthea_dbt.not_null_procedure_occurrence_procedure_date.7e26c7adde": ["model.etl_synthea_dbt.procedure_occurrence"], "test.etl_synthea_dbt.not_null_procedure_occurrence_procedure_type_concept_id.697b6199fb": ["model.etl_synthea_dbt.procedure_occurrence"], "test.etl_synthea_dbt.relationships_procedure_occurrence_procedure_type_concept_id__concept_id__source_vocab_concept_.1183d8fa7c": ["model.etl_synthea_dbt.procedure_occurrence", "source.etl_synthea_dbt.vocab.concept"], "test.etl_synthea_dbt.relationships_procedure_occurrence_modifier_concept_id__concept_id__source_vocab_concept_.a73220f756": ["model.etl_synthea_dbt.procedure_occurrence", "source.etl_synthea_dbt.vocab.concept"], "test.etl_synthea_dbt.relationships_procedure_occurrence_provider_id__provider_id__ref_provider_.c610ac14c8": ["model.etl_synthea_dbt.procedure_occurrence", "model.etl_synthea_dbt.provider"], "test.etl_synthea_dbt.relationships_procedure_occurrence_visit_occurrence_id__visit_occurrence_id__ref_visit_occurrence_.57f0006526": ["model.etl_synthea_dbt.procedure_occurrence", "model.etl_synthea_dbt.visit_occurrence"], "test.etl_synthea_dbt.relationships_procedure_occurrence_visit_detail_id__visit_detail_id__ref_visit_detail_.aad4bd00c4": ["model.etl_synthea_dbt.procedure_occurrence", "model.etl_synthea_dbt.visit_detail"], "test.etl_synthea_dbt.relationships_procedure_occurrence_procedure_source_concept_id__concept_id__source_vocab_concept_.9c4ee06eea": ["model.etl_synthea_dbt.procedure_occurrence", "source.etl_synthea_dbt.vocab.concept"], "model.etl_synthea_dbt.person": ["source.etl_synthea_dbt.synthea.patients", "source.etl_synthea_dbt.vocab.concept"], "test.etl_synthea_dbt.not_null_person_year_of_birth.03ea95e466": ["model.etl_synthea_dbt.person"], "test.etl_synthea_dbt.relationships_person_gender_source_concept_id__concept_id__source_vocab_concept_.871883de16": ["model.etl_synthea_dbt.person", "source.etl_synthea_dbt.vocab.concept"], "test.etl_synthea_dbt.relationships_person_race_source_concept_id__concept_id__source_vocab_concept_.cd59f4fb08": ["model.etl_synthea_dbt.person", "source.etl_synthea_dbt.vocab.concept"], "test.etl_synthea_dbt.relationships_person_ethnicity_source_concept_id__concept_id__source_vocab_concept_.c1e57c3f06": ["model.etl_synthea_dbt.person", "source.etl_synthea_dbt.vocab.concept"], "model.etl_synthea_dbt.measurement": ["model.etl_synthea_dbt.final_visit_ids", "model.etl_synthea_dbt.person", "model.etl_synthea_dbt.provider", "model.etl_synthea_dbt.source_to_source_vocab_map", "model.etl_synthea_dbt.source_to_standard_vocab_map", "source.etl_synthea_dbt.synthea.encounters", "source.etl_synthea_dbt.synthea.observations", "source.etl_synthea_dbt.synthea.procedures"], "test.etl_synthea_dbt.unique_measurement_measurement_id.a3f1e8466d": ["model.etl_synthea_dbt.measurement"], "test.etl_synthea_dbt.not_null_measurement_measurement_id.80b56c4597": ["model.etl_synthea_dbt.measurement"], "test.etl_synthea_dbt.not_null_measurement_person_id.7cf48be66f": ["model.etl_synthea_dbt.measurement"], "test.etl_synthea_dbt.relationships_measurement_person_id__person_id__ref_person_.b9201b5f92": ["model.etl_synthea_dbt.measurement", "model.etl_synthea_dbt.person"], "test.etl_synthea_dbt.not_null_measurement_measurement_concept_id.d63d0b284a": ["model.etl_synthea_dbt.measurement"], "test.etl_synthea_dbt.relationships_measurement_measurement_concept_id__concept_id__source_vocab_concept_.0fc77178f1": ["model.etl_synthea_dbt.measurement", "source.etl_synthea_dbt.vocab.concept"], "test.etl_synthea_dbt.not_null_measurement_measurement_date.f0992e3082": ["model.etl_synthea_dbt.measurement"], "test.etl_synthea_dbt.not_null_measurement_measurement_type_concept_id.d32d33e40c": ["model.etl_synthea_dbt.measurement"], "test.etl_synthea_dbt.relationships_measurement_measurement_type_concept_id__concept_id__source_vocab_concept_.05f3b90252": ["model.etl_synthea_dbt.measurement", "source.etl_synthea_dbt.vocab.concept"], "test.etl_synthea_dbt.relationships_measurement_operator_concept_id__concept_id__source_vocab_concept_.fd5f030894": ["model.etl_synthea_dbt.measurement", "source.etl_synthea_dbt.vocab.concept"], "test.etl_synthea_dbt.relationships_measurement_value_as_concept_id__concept_id__source_vocab_concept_.85566490c4": ["model.etl_synthea_dbt.measurement", "source.etl_synthea_dbt.vocab.concept"], "test.etl_synthea_dbt.relationships_measurement_unit_concept_id__concept_id__source_vocab_concept_.ddb1f5242b": ["model.etl_synthea_dbt.measurement", "source.etl_synthea_dbt.vocab.concept"], "test.etl_synthea_dbt.relationships_measurement_provider_id__provider_id__ref_provider_.1f264234a4": ["model.etl_synthea_dbt.measurement", "model.etl_synthea_dbt.provider"], "test.etl_synthea_dbt.relationships_measurement_visit_occurrence_id__visit_occurrence_id__ref_visit_occurrence_.4fb747555a": ["model.etl_synthea_dbt.measurement", "model.etl_synthea_dbt.visit_occurrence"], "test.etl_synthea_dbt.relationships_measurement_visit_detail_id__visit_detail_id__ref_visit_detail_.d4200ff3e2": ["model.etl_synthea_dbt.measurement", "model.etl_synthea_dbt.visit_detail"], "test.etl_synthea_dbt.relationships_measurement_measurement_source_concept_id__concept_id__source_vocab_concept_.438766d6d3": ["model.etl_synthea_dbt.measurement", "source.etl_synthea_dbt.vocab.concept"], "model.etl_synthea_dbt.provider": ["source.etl_synthea_dbt.synthea.providers"], "test.etl_synthea_dbt.unique_provider_provider_id.b08928e435": ["model.etl_synthea_dbt.provider"], "test.etl_synthea_dbt.not_null_provider_provider_id.3b46670424": ["model.etl_synthea_dbt.provider"], "model.etl_synthea_dbt.visit_detail": ["model.etl_synthea_dbt.all_visits", "model.etl_synthea_dbt.final_visit_ids", "model.etl_synthea_dbt.person", "model.etl_synthea_dbt.provider", "source.etl_synthea_dbt.synthea.encounters"], "test.etl_synthea_dbt.unique_visit_detail_visit_detail_id.1f90f95601": ["model.etl_synthea_dbt.visit_detail"], "test.etl_synthea_dbt.not_null_visit_detail_visit_detail_id.e5b9e9d282": ["model.etl_synthea_dbt.visit_detail"], "test.etl_synthea_dbt.not_null_visit_detail_person_id.f40d29958e": ["model.etl_synthea_dbt.visit_detail"], "test.etl_synthea_dbt.relationships_visit_detail_person_id__person_id__ref_person_.a572cd3588": ["model.etl_synthea_dbt.person", "model.etl_synthea_dbt.visit_detail"], "test.etl_synthea_dbt.not_null_visit_detail_visit_detail_concept_id.11df83fc24": ["model.etl_synthea_dbt.visit_detail"], "test.etl_synthea_dbt.relationships_visit_detail_visit_detail_concept_id__concept_id__source_vocab_concept_.f6539e5bad": ["model.etl_synthea_dbt.visit_detail", "source.etl_synthea_dbt.vocab.concept"], "test.etl_synthea_dbt.not_null_visit_detail_visit_detail_start_date.cc3c8c51a7": ["model.etl_synthea_dbt.visit_detail"], "test.etl_synthea_dbt.not_null_visit_detail_visit_detail_end_date.fbf8c3e1c7": ["model.etl_synthea_dbt.visit_detail"], "test.etl_synthea_dbt.not_null_visit_detail_visit_detail_type_concept_id.31ca3f2172": ["model.etl_synthea_dbt.visit_detail"], "test.etl_synthea_dbt.relationships_visit_detail_visit_detail_type_concept_id__concept_id__source_vocab_concept_.0564ecbaa6": ["model.etl_synthea_dbt.visit_detail", "source.etl_synthea_dbt.vocab.concept"], "test.etl_synthea_dbt.relationships_visit_detail_provider_id__provider_id__ref_provider_.7393623c5e": ["model.etl_synthea_dbt.provider", "model.etl_synthea_dbt.visit_detail"], "test.etl_synthea_dbt.relationships_visit_detail_visit_detail_source_concept_id__concept_id__source_vocab_concept_.90e855b8ea": ["model.etl_synthea_dbt.visit_detail", "source.etl_synthea_dbt.vocab.concept"], "test.etl_synthea_dbt.relationships_visit_detail_admitting_source_concept_id__concept_id__source_vocab_concept_.7433619460": ["model.etl_synthea_dbt.visit_detail", "source.etl_synthea_dbt.vocab.concept"], "test.etl_synthea_dbt.relationships_visit_detail_discharge_to_concept_id__concept_id__source_vocab_concept_.dff6013593": ["model.etl_synthea_dbt.visit_detail", "source.etl_synthea_dbt.vocab.concept"], "test.etl_synthea_dbt.relationships_visit_detail_preceding_visit_detail_id__visit_detail_id__ref_visit_detail_.c17ffa5654": ["model.etl_synthea_dbt.visit_detail"], "test.etl_synthea_dbt.relationships_visit_detail_parent_visit_detail_id__visit_detail_id__ref_visit_detail_.3f45535d08": ["model.etl_synthea_dbt.visit_detail"], "source.etl_synthea_dbt.synthea.patients": [], "source.etl_synthea_dbt.synthea.encounters": [], "source.etl_synthea_dbt.synthea.providers": [], "source.etl_synthea_dbt.synthea.conditions": [], "source.etl_synthea_dbt.synthea.allergies": [], "source.etl_synthea_dbt.synthea.observations": [], "source.etl_synthea_dbt.synthea.procedures": [], "source.etl_synthea_dbt.synthea.devices": [], "source.etl_synthea_dbt.synthea.medications": [], "source.etl_synthea_dbt.synthea.immunizations": [], "source.etl_synthea_dbt.vocab.concept": [], "source.etl_synthea_dbt.vocab.concept_relationship": [], "source.etl_synthea_dbt.vocab.concept_ancestor": [], "source.etl_synthea_dbt.vocab.source_to_concept_map": [], "source.etl_synthea_dbt.vocab.vocabulary": []}, "child_map": {"model.etl_synthea_dbt.cdm_source": [], "model.etl_synthea_dbt.condition_era": ["test.etl_synthea_dbt.not_null_condition_era_condition_concept_id.e3da2b562c", "test.etl_synthea_dbt.not_null_condition_era_condition_era_end_date.de0da8b839", "test.etl_synthea_dbt.not_null_condition_era_condition_era_id.7a62c16f99", "test.etl_synthea_dbt.not_null_condition_era_condition_era_start_date.479245d393", "test.etl_synthea_dbt.not_null_condition_era_person_id.0c539c09d2", "test.etl_synthea_dbt.relationships_condition_era_condition_concept_id__concept_id__source_vocab_concept_.3e586bc15f", "test.etl_synthea_dbt.relationships_condition_era_person_id__person_id__ref_person_.e1a24435e6", "test.etl_synthea_dbt.unique_condition_era_condition_era_id.cd3b6005dd"], "model.etl_synthea_dbt.condition_occurrence": ["model.etl_synthea_dbt.tmp_ce", "test.etl_synthea_dbt.not_null_condition_occurrence_condition_occurrence_id.f70111fa08", "test.etl_synthea_dbt.not_null_condition_occurrence_condition_start_date.6cbb11717a", "test.etl_synthea_dbt.not_null_condition_occurrence_condition_type_concept_id.13b95f8e19", "test.etl_synthea_dbt.not_null_condition_occurrence_person_id.9f19d9c9cb", "test.etl_synthea_dbt.relationships_condition_occurrence_condition_concept_id__concept_id__source_vocab_concept_.d920e04abd", "test.etl_synthea_dbt.relationships_condition_occurrence_condition_source_concept_id__concept_id__source_vocab_concept_.1f641311f0", "test.etl_synthea_dbt.relationships_condition_occurrence_condition_status_source_value__concept_id__source_vocab_concept_.05a987e39c", "test.etl_synthea_dbt.relationships_condition_occurrence_condition_type_concept_id__concept_id__source_vocab_concept_.42f881e4a7", "test.etl_synthea_dbt.relationships_condition_occurrence_person_id__person_id__ref_person_.f3b716ae22", "test.etl_synthea_dbt.relationships_condition_occurrence_provider_id__provider_id__ref_provider_.b75b05445b", "test.etl_synthea_dbt.relationships_condition_occurrence_visit_detail_id__visit_detail_id__ref_visit_detail_.fc073d5579", "test.etl_synthea_dbt.relationships_condition_occurrence_visit_occurrence_id__visit_occurrence_id__ref_visit_occurrence_.2e469f049b", "test.etl_synthea_dbt.unique_condition_occurrence_condition_occurrence_id.e4cb792f90"], "model.etl_synthea_dbt.death": [], "model.etl_synthea_dbt.device_exposure": ["test.etl_synthea_dbt.not_null_device_exposure_device_concept_id.041c422e55", "test.etl_synthea_dbt.not_null_device_exposure_device_exposure_id.ab1d5a2fe5", "test.etl_synthea_dbt.not_null_device_exposure_device_exposure_start_date.23aa3e8aea", "test.etl_synthea_dbt.not_null_device_exposure_device_type_concept_id.9600b2592d", "test.etl_synthea_dbt.not_null_device_exposure_person_id.1330a61d39", "test.etl_synthea_dbt.relationships_device_exposure_device_concept_id__concept_id__source_vocab_concept_.2545c0bdf6", "test.etl_synthea_dbt.relationships_device_exposure_device_source_concept_id__concept_id__source_vocab_concept_.d5577dca4c", "test.etl_synthea_dbt.relationships_device_exposure_device_type_concept_id__concept_id__source_vocab_concept_.e48c3d4798", "test.etl_synthea_dbt.relationships_device_exposure_person_id__person_id__ref_person_.894d3b47b9", "test.etl_synthea_dbt.relationships_device_exposure_provider_id__provider_id__ref_provider_.23736ac216", "test.etl_synthea_dbt.relationships_device_exposure_unit_concept_id__concept_id__source_vocab_concept_.f445d0b9dd", "test.etl_synthea_dbt.relationships_device_exposure_unit_source_concept_id__concept_id__source_vocab_concept_.75df4b5f9f", "test.etl_synthea_dbt.relationships_device_exposure_visit_detail_id__visit_detail_id__ref_visit_detail_.c064b67cdb", "test.etl_synthea_dbt.relationships_device_exposure_visit_occurrence_id__visit_occurrence_id__ref_visit_occurrence_.c993394705", "test.etl_synthea_dbt.unique_device_exposure_device_exposure_id.cdcba3488d"], "model.etl_synthea_dbt.drug_era": ["test.etl_synthea_dbt.not_null_drug_era_drug_concept_id.f7daf926d4", "test.etl_synthea_dbt.not_null_drug_era_drug_era_end_date.ec78b5bf14", "test.etl_synthea_dbt.not_null_drug_era_drug_era_id.69fa2cd6fe", "test.etl_synthea_dbt.not_null_drug_era_drug_era_start_date.7321b828f3", "test.etl_synthea_dbt.not_null_drug_era_person_id.e848e282a5", "test.etl_synthea_dbt.relationships_drug_era_drug_concept_id__concept_id__source_vocab_concept_.91ffe5fbde", "test.etl_synthea_dbt.relationships_drug_era_person_id__person_id__ref_person_.a3cad7938a", "test.etl_synthea_dbt.unique_drug_era_drug_era_id.e3b01c38b2"], "model.etl_synthea_dbt.drug_exposure": ["model.etl_synthea_dbt.tmp_de", "test.etl_synthea_dbt.not_null_drug_exposure_drug_concept_id.f309abd476", "test.etl_synthea_dbt.not_null_drug_exposure_drug_exposure_end_date.89e020fdd4", "test.etl_synthea_dbt.not_null_drug_exposure_drug_exposure_id.a57f0904e3", "test.etl_synthea_dbt.not_null_drug_exposure_drug_exposure_start_date.61d182cfaa", "test.etl_synthea_dbt.not_null_drug_exposure_drug_type_concept_id.5e130283b2", "test.etl_synthea_dbt.not_null_drug_exposure_person_id.e6d75aa2b9", "test.etl_synthea_dbt.relationships_drug_exposure_drug_concept_id__concept_id__source_vocab_concept_.e3645bdcef", "test.etl_synthea_dbt.relationships_drug_exposure_drug_source_concept_id__concept_id__source_vocab_concept_.7dff7fc1d2", "test.etl_synthea_dbt.relationships_drug_exposure_drug_type_concept_id__concept_id__source_vocab_concept_.e775235ffd", "test.etl_synthea_dbt.relationships_drug_exposure_person_id__person_id__ref_person_.811ae7ceb8", "test.etl_synthea_dbt.relationships_drug_exposure_provider_id__provider_id__ref_provider_.022f932272", "test.etl_synthea_dbt.relationships_drug_exposure_route_concept_id__concept_id__source_vocab_concept_.67158eaf74", "test.etl_synthea_dbt.relationships_drug_exposure_visit_detail_id__visit_detail_id__ref_visit_detail_.770b0c9b99", "test.etl_synthea_dbt.relationships_drug_exposure_visit_occurrence_id__visit_occurrence_id__ref_visit_occurrence_.a7ed7dfcb5", "test.etl_synthea_dbt.unique_drug_exposure_drug_exposure_id.6e11199bfc"], "model.etl_synthea_dbt.observation": ["test.etl_synthea_dbt.not_null_observation_observation_concept_id.4725260db7", "test.etl_synthea_dbt.not_null_observation_observation_date.0cde7d2dd7", "test.etl_synthea_dbt.not_null_observation_observation_id.efd24835d6", "test.etl_synthea_dbt.not_null_observation_observation_type_concept_id.3f8e08f159", "test.etl_synthea_dbt.not_null_observation_person_id.8fa7495344", "test.etl_synthea_dbt.relationships_observation_obs_event_field_concept_id__concept_id__source_vocab_concept_.1c7bfac6f6", "test.etl_synthea_dbt.relationships_observation_observation_concept_id__concept_id__source_vocab_concept_.d6cdb5cd5e", "test.etl_synthea_dbt.relationships_observation_observation_source_concept_id__concept_id__source_vocab_concept_.cc7ef061f3", "test.etl_synthea_dbt.relationships_observation_observation_type_concept_id__concept_id__source_vocab_concept_.d6bea239d2", "test.etl_synthea_dbt.relationships_observation_person_id__person_id__ref_person_.e1ae5f3106", "test.etl_synthea_dbt.relationships_observation_provider_id__provider_id__ref_provider_.531e2ef5ba", "test.etl_synthea_dbt.relationships_observation_qualifier_concept_id__concept_id__source_vocab_concept_.2145be4c80", "test.etl_synthea_dbt.relationships_observation_unit_concept_id__concept_id__source_vocab_concept_.4d3119aedd", "test.etl_synthea_dbt.relationships_observation_value_as_concept_id__concept_id__source_vocab_concept_.14ce6d5d7c", "test.etl_synthea_dbt.relationships_observation_visit_detail_id__visit_detail_id__ref_visit_detail_.b9b6665fca", "test.etl_synthea_dbt.relationships_observation_visit_occurrence_id__visit_occurrence_id__ref_visit_occurrence_.6929746e26", "test.etl_synthea_dbt.unique_observation_observation_id.c7fcc2846f"], "model.etl_synthea_dbt.observation_period": ["test.etl_synthea_dbt.not_null_observation_period_observation_period_end_date.e74764a048", "test.etl_synthea_dbt.not_null_observation_period_observation_period_id.6c6fb96d33", "test.etl_synthea_dbt.not_null_observation_period_observation_period_start_date.e88435db95", "test.etl_synthea_dbt.not_null_observation_period_period_type_concept_id.b993e0023c", "test.etl_synthea_dbt.not_null_observation_period_person_id.71c8f248d3", "test.etl_synthea_dbt.relationships_observation_period_period_type_concept_id__concept_id__source_vocab_concept_.d636ade84f", "test.etl_synthea_dbt.relationships_observation_period_person_id__person_id__ref_person_.3e962f56b4", "test.etl_synthea_dbt.unique_observation_period_observation_period_id.34c08aa0cd"], "model.etl_synthea_dbt.visit_occurrence": ["test.etl_synthea_dbt.not_null_visit_occurrence_person_id.e916ff163a", "test.etl_synthea_dbt.not_null_visit_occurrence_visit_concept_id.e13dd76157", "test.etl_synthea_dbt.not_null_visit_occurrence_visit_end_date.47f6967fe8", "test.etl_synthea_dbt.not_null_visit_occurrence_visit_occurrence_id.a3a65446cf", "test.etl_synthea_dbt.not_null_visit_occurrence_visit_start_date.6ef645340a", "test.etl_synthea_dbt.not_null_visit_occurrence_visit_type_concept_id.6078890882", "test.etl_synthea_dbt.relationships_condition_occurrence_visit_occurrence_id__visit_occurrence_id__ref_visit_occurrence_.2e469f049b", "test.etl_synthea_dbt.relationships_device_exposure_visit_occurrence_id__visit_occurrence_id__ref_visit_occurrence_.c993394705", "test.etl_synthea_dbt.relationships_drug_exposure_visit_occurrence_id__visit_occurrence_id__ref_visit_occurrence_.a7ed7dfcb5", "test.etl_synthea_dbt.relationships_measurement_visit_occurrence_id__visit_occurrence_id__ref_visit_occurrence_.4fb747555a", "test.etl_synthea_dbt.relationships_observation_visit_occurrence_id__visit_occurrence_id__ref_visit_occurrence_.6929746e26", "test.etl_synthea_dbt.relationships_procedure_occurrence_visit_occurrence_id__visit_occurrence_id__ref_visit_occurrence_.57f0006526", "test.etl_synthea_dbt.relationships_visit_occurrence_admitting_source_concept_id__concept_id__source_vocab_concept_.ee5b624dfe", "test.etl_synthea_dbt.relationships_visit_occurrence_discharge_to_concept_id__concept_id__source_vocab_concept_.2f4c28e6b1", "test.etl_synthea_dbt.relationships_visit_occurrence_person_id__person_id__ref_person_.0f12e4784d", "test.etl_synthea_dbt.relationships_visit_occurrence_preceding_visit_occurrence_id__visit_occurrence_id__ref_visit_occurrence_.df91dec380", "test.etl_synthea_dbt.relationships_visit_occurrence_visit_concept_id__concept_id__source_vocab_concept_.989bda5e7b", "test.etl_synthea_dbt.relationships_visit_occurrence_visit_type_concept_id__concept_id__source_vocab_concept_.de192d0d82", "test.etl_synthea_dbt.unique_visit_occurrence_visit_occurrence_id.faa3aa67c6"], "model.etl_synthea_dbt.all_visits": ["model.etl_synthea_dbt.assign_all_visit_ids", "model.etl_synthea_dbt.visit_detail", "model.etl_synthea_dbt.visit_occurrence"], "model.etl_synthea_dbt.assign_all_visit_ids": ["model.etl_synthea_dbt.final_visit_ids"], "model.etl_synthea_dbt.final_visit_ids": ["model.etl_synthea_dbt.device_exposure", "model.etl_synthea_dbt.drug_exposure", "model.etl_synthea_dbt.measurement", "model.etl_synthea_dbt.observation", "model.etl_synthea_dbt.procedure_occurrence", "model.etl_synthea_dbt.stg_condition_occurrence", "model.etl_synthea_dbt.visit_detail", "model.etl_synthea_dbt.visit_occurrence"], "model.etl_synthea_dbt.stg_condition_occurrence": ["model.etl_synthea_dbt.condition_occurrence"], "model.etl_synthea_dbt.tmp_ce": ["model.etl_synthea_dbt.condition_era"], "model.etl_synthea_dbt.tmp_de": ["model.etl_synthea_dbt.drug_era"], "test.etl_synthea_dbt.unique_observation_period_observation_period_id.34c08aa0cd": [], "test.etl_synthea_dbt.not_null_observation_period_observation_period_id.6c6fb96d33": [], "test.etl_synthea_dbt.not_null_observation_period_person_id.71c8f248d3": [], "test.etl_synthea_dbt.relationships_observation_period_person_id__person_id__ref_person_.3e962f56b4": [], "test.etl_synthea_dbt.not_null_observation_period_observation_period_start_date.e88435db95": [], "test.etl_synthea_dbt.not_null_observation_period_observation_period_end_date.e74764a048": [], "test.etl_synthea_dbt.not_null_observation_period_period_type_concept_id.b993e0023c": [], "test.etl_synthea_dbt.relationships_observation_period_period_type_concept_id__concept_id__source_vocab_concept_.d636ade84f": [], "test.etl_synthea_dbt.unique_visit_occurrence_visit_occurrence_id.faa3aa67c6": [], "test.etl_synthea_dbt.not_null_visit_occurrence_visit_occurrence_id.a3a65446cf": [], "test.etl_synthea_dbt.not_null_visit_occurrence_person_id.e916ff163a": [], "test.etl_synthea_dbt.relationships_visit_occurrence_person_id__person_id__ref_person_.0f12e4784d": [], "test.etl_synthea_dbt.not_null_visit_occurrence_visit_concept_id.e13dd76157": [], "test.etl_synthea_dbt.relationships_visit_occurrence_visit_concept_id__concept_id__source_vocab_concept_.989bda5e7b": [], "test.etl_synthea_dbt.not_null_visit_occurrence_visit_start_date.6ef645340a": [], "test.etl_synthea_dbt.not_null_visit_occurrence_visit_end_date.47f6967fe8": [], "test.etl_synthea_dbt.not_null_visit_occurrence_visit_type_concept_id.6078890882": [], "test.etl_synthea_dbt.relationships_visit_occurrence_visit_type_concept_id__concept_id__source_vocab_concept_.de192d0d82": [], "test.etl_synthea_dbt.relationships_visit_occurrence_admitting_source_concept_id__concept_id__source_vocab_concept_.ee5b624dfe": [], "test.etl_synthea_dbt.relationships_visit_occurrence_discharge_to_concept_id__concept_id__source_vocab_concept_.2f4c28e6b1": [], "test.etl_synthea_dbt.relationships_visit_occurrence_preceding_visit_occurrence_id__visit_occurrence_id__ref_visit_occurrence_.df91dec380": [], "test.etl_synthea_dbt.unique_condition_occurrence_condition_occurrence_id.e4cb792f90": [], "test.etl_synthea_dbt.not_null_condition_occurrence_condition_occurrence_id.f70111fa08": [], "test.etl_synthea_dbt.not_null_condition_occurrence_person_id.9f19d9c9cb": [], "test.etl_synthea_dbt.relationships_condition_occurrence_person_id__person_id__ref_person_.f3b716ae22": [], "test.etl_synthea_dbt.relationships_condition_occurrence_condition_concept_id__concept_id__source_vocab_concept_.d920e04abd": [], "test.etl_synthea_dbt.not_null_condition_occurrence_condition_start_date.6cbb11717a": [], "test.etl_synthea_dbt.not_null_condition_occurrence_condition_type_concept_id.13b95f8e19": [], "test.etl_synthea_dbt.relationships_condition_occurrence_condition_type_concept_id__concept_id__source_vocab_concept_.42f881e4a7": [], "test.etl_synthea_dbt.relationships_condition_occurrence_condition_status_source_value__concept_id__source_vocab_concept_.05a987e39c": [], "test.etl_synthea_dbt.relationships_condition_occurrence_provider_id__provider_id__ref_provider_.b75b05445b": [], "test.etl_synthea_dbt.relationships_condition_occurrence_visit_occurrence_id__visit_occurrence_id__ref_visit_occurrence_.2e469f049b": [], "test.etl_synthea_dbt.relationships_condition_occurrence_visit_detail_id__visit_detail_id__ref_visit_detail_.fc073d5579": [], "test.etl_synthea_dbt.relationships_condition_occurrence_condition_source_concept_id__concept_id__source_vocab_concept_.1f641311f0": [], "test.etl_synthea_dbt.unique_drug_exposure_drug_exposure_id.6e11199bfc": [], "test.etl_synthea_dbt.not_null_drug_exposure_drug_exposure_id.a57f0904e3": [], "test.etl_synthea_dbt.not_null_drug_exposure_person_id.e6d75aa2b9": [], "test.etl_synthea_dbt.relationships_drug_exposure_person_id__person_id__ref_person_.811ae7ceb8": [], "test.etl_synthea_dbt.not_null_drug_exposure_drug_concept_id.f309abd476": [], "test.etl_synthea_dbt.relationships_drug_exposure_drug_concept_id__concept_id__source_vocab_concept_.e3645bdcef": [], "test.etl_synthea_dbt.not_null_drug_exposure_drug_exposure_start_date.61d182cfaa": [], "test.etl_synthea_dbt.not_null_drug_exposure_drug_exposure_end_date.89e020fdd4": [], "test.etl_synthea_dbt.not_null_drug_exposure_drug_type_concept_id.5e130283b2": [], "test.etl_synthea_dbt.relationships_drug_exposure_drug_type_concept_id__concept_id__source_vocab_concept_.e775235ffd": [], "test.etl_synthea_dbt.relationships_drug_exposure_route_concept_id__concept_id__source_vocab_concept_.67158eaf74": [], "test.etl_synthea_dbt.relationships_drug_exposure_provider_id__provider_id__ref_provider_.022f932272": [], "test.etl_synthea_dbt.relationships_drug_exposure_visit_occurrence_id__visit_occurrence_id__ref_visit_occurrence_.a7ed7dfcb5": [], "test.etl_synthea_dbt.relationships_drug_exposure_visit_detail_id__visit_detail_id__ref_visit_detail_.770b0c9b99": [], "test.etl_synthea_dbt.relationships_drug_exposure_drug_source_concept_id__concept_id__source_vocab_concept_.7dff7fc1d2": [], "test.etl_synthea_dbt.unique_device_exposure_device_exposure_id.cdcba3488d": [], "test.etl_synthea_dbt.not_null_device_exposure_device_exposure_id.ab1d5a2fe5": [], "test.etl_synthea_dbt.not_null_device_exposure_person_id.1330a61d39": [], "test.etl_synthea_dbt.relationships_device_exposure_person_id__person_id__ref_person_.894d3b47b9": [], "test.etl_synthea_dbt.not_null_device_exposure_device_concept_id.041c422e55": [], "test.etl_synthea_dbt.relationships_device_exposure_device_concept_id__concept_id__source_vocab_concept_.2545c0bdf6": [], "test.etl_synthea_dbt.not_null_device_exposure_device_exposure_start_date.23aa3e8aea": [], "test.etl_synthea_dbt.not_null_device_exposure_device_type_concept_id.9600b2592d": [], "test.etl_synthea_dbt.relationships_device_exposure_device_type_concept_id__concept_id__source_vocab_concept_.e48c3d4798": [], "test.etl_synthea_dbt.relationships_device_exposure_provider_id__provider_id__ref_provider_.23736ac216": [], "test.etl_synthea_dbt.relationships_device_exposure_visit_occurrence_id__visit_occurrence_id__ref_visit_occurrence_.c993394705": [], "test.etl_synthea_dbt.relationships_device_exposure_visit_detail_id__visit_detail_id__ref_visit_detail_.c064b67cdb": [], "test.etl_synthea_dbt.relationships_device_exposure_device_source_concept_id__concept_id__source_vocab_concept_.d5577dca4c": [], "test.etl_synthea_dbt.relationships_device_exposure_unit_concept_id__concept_id__source_vocab_concept_.f445d0b9dd": [], "test.etl_synthea_dbt.relationships_device_exposure_unit_source_concept_id__concept_id__source_vocab_concept_.75df4b5f9f": [], "test.etl_synthea_dbt.unique_observation_observation_id.c7fcc2846f": [], "test.etl_synthea_dbt.not_null_observation_observation_id.efd24835d6": [], "test.etl_synthea_dbt.not_null_observation_person_id.8fa7495344": [], "test.etl_synthea_dbt.relationships_observation_person_id__person_id__ref_person_.e1ae5f3106": [], "test.etl_synthea_dbt.not_null_observation_observation_concept_id.4725260db7": [], "test.etl_synthea_dbt.relationships_observation_observation_concept_id__concept_id__source_vocab_concept_.d6cdb5cd5e": [], "test.etl_synthea_dbt.not_null_observation_observation_date.0cde7d2dd7": [], "test.etl_synthea_dbt.not_null_observation_observation_type_concept_id.3f8e08f159": [], "test.etl_synthea_dbt.relationships_observation_observation_type_concept_id__concept_id__source_vocab_concept_.d6bea239d2": [], "test.etl_synthea_dbt.relationships_observation_value_as_concept_id__concept_id__source_vocab_concept_.14ce6d5d7c": [], "test.etl_synthea_dbt.relationships_observation_qualifier_concept_id__concept_id__source_vocab_concept_.2145be4c80": [], "test.etl_synthea_dbt.relationships_observation_unit_concept_id__concept_id__source_vocab_concept_.4d3119aedd": [], "test.etl_synthea_dbt.relationships_observation_provider_id__provider_id__ref_provider_.531e2ef5ba": [], "test.etl_synthea_dbt.relationships_observation_visit_occurrence_id__visit_occurrence_id__ref_visit_occurrence_.6929746e26": [], "test.etl_synthea_dbt.relationships_observation_visit_detail_id__visit_detail_id__ref_visit_detail_.b9b6665fca": [], "test.etl_synthea_dbt.relationships_observation_observation_source_concept_id__concept_id__source_vocab_concept_.cc7ef061f3": [], "test.etl_synthea_dbt.relationships_observation_obs_event_field_concept_id__concept_id__source_vocab_concept_.1c7bfac6f6": [], "test.etl_synthea_dbt.unique_drug_era_drug_era_id.e3b01c38b2": [], "test.etl_synthea_dbt.not_null_drug_era_drug_era_id.69fa2cd6fe": [], "test.etl_synthea_dbt.not_null_drug_era_person_id.e848e282a5": [], "test.etl_synthea_dbt.relationships_drug_era_person_id__person_id__ref_person_.a3cad7938a": [], "test.etl_synthea_dbt.not_null_drug_era_drug_concept_id.f7daf926d4": [], "test.etl_synthea_dbt.relationships_drug_era_drug_concept_id__concept_id__source_vocab_concept_.91ffe5fbde": [], "test.etl_synthea_dbt.not_null_drug_era_drug_era_start_date.7321b828f3": [], "test.etl_synthea_dbt.not_null_drug_era_drug_era_end_date.ec78b5bf14": [], "test.etl_synthea_dbt.unique_condition_era_condition_era_id.cd3b6005dd": [], "test.etl_synthea_dbt.not_null_condition_era_condition_era_id.7a62c16f99": [], "test.etl_synthea_dbt.not_null_condition_era_person_id.0c539c09d2": [], "test.etl_synthea_dbt.relationships_condition_era_person_id__person_id__ref_person_.e1a24435e6": [], "test.etl_synthea_dbt.not_null_condition_era_condition_concept_id.e3da2b562c": [], "test.etl_synthea_dbt.relationships_condition_era_condition_concept_id__concept_id__source_vocab_concept_.3e586bc15f": [], "test.etl_synthea_dbt.not_null_condition_era_condition_era_start_date.479245d393": [], "test.etl_synthea_dbt.not_null_condition_era_condition_era_end_date.de0da8b839": [], "model.etl_synthea_dbt.source_to_standard_vocab_map": ["model.etl_synthea_dbt.condition_occurrence", "model.etl_synthea_dbt.death", "model.etl_synthea_dbt.device_exposure", "model.etl_synthea_dbt.drug_exposure", "model.etl_synthea_dbt.measurement", "model.etl_synthea_dbt.observation", "model.etl_synthea_dbt.procedure_occurrence"], "model.etl_synthea_dbt.source_to_source_vocab_map": ["model.etl_synthea_dbt.condition_occurrence", "model.etl_synthea_dbt.device_exposure", "model.etl_synthea_dbt.drug_exposure", "model.etl_synthea_dbt.measurement", "model.etl_synthea_dbt.observation", "model.etl_synthea_dbt.procedure_occurrence"], "model.etl_synthea_dbt.procedure_occurrence": ["test.etl_synthea_dbt.not_null_procedure_occurrence_person_id.95f33a8709", "test.etl_synthea_dbt.not_null_procedure_occurrence_procedure_concept_id.39a7f862ab", "test.etl_synthea_dbt.not_null_procedure_occurrence_procedure_date.7e26c7adde", "test.etl_synthea_dbt.not_null_procedure_occurrence_procedure_occurrence_id.e3b1d90a98", "test.etl_synthea_dbt.not_null_procedure_occurrence_procedure_type_concept_id.697b6199fb", "test.etl_synthea_dbt.relationships_procedure_occurrence_modifier_concept_id__concept_id__source_vocab_concept_.a73220f756", "test.etl_synthea_dbt.relationships_procedure_occurrence_person_id__person_id__ref_person_.901403d0b9", "test.etl_synthea_dbt.relationships_procedure_occurrence_procedure_concept_id__concept_id__source_vocab_concept_.1d83da347f", "test.etl_synthea_dbt.relationships_procedure_occurrence_procedure_source_concept_id__concept_id__source_vocab_concept_.9c4ee06eea", "test.etl_synthea_dbt.relationships_procedure_occurrence_procedure_type_concept_id__concept_id__source_vocab_concept_.1183d8fa7c", "test.etl_synthea_dbt.relationships_procedure_occurrence_provider_id__provider_id__ref_provider_.c610ac14c8", "test.etl_synthea_dbt.relationships_procedure_occurrence_visit_detail_id__visit_detail_id__ref_visit_detail_.aad4bd00c4", "test.etl_synthea_dbt.relationships_procedure_occurrence_visit_occurrence_id__visit_occurrence_id__ref_visit_occurrence_.57f0006526", "test.etl_synthea_dbt.unique_procedure_occurrence_procedure_occurrence_id.fb0663ac66"], "test.etl_synthea_dbt.unique_procedure_occurrence_procedure_occurrence_id.fb0663ac66": [], "test.etl_synthea_dbt.not_null_procedure_occurrence_procedure_occurrence_id.e3b1d90a98": [], "test.etl_synthea_dbt.not_null_procedure_occurrence_person_id.95f33a8709": [], "test.etl_synthea_dbt.relationships_procedure_occurrence_person_id__person_id__ref_person_.901403d0b9": [], "test.etl_synthea_dbt.not_null_procedure_occurrence_procedure_concept_id.39a7f862ab": [], "test.etl_synthea_dbt.relationships_procedure_occurrence_procedure_concept_id__concept_id__source_vocab_concept_.1d83da347f": [], "test.etl_synthea_dbt.not_null_procedure_occurrence_procedure_date.7e26c7adde": [], "test.etl_synthea_dbt.not_null_procedure_occurrence_procedure_type_concept_id.697b6199fb": [], "test.etl_synthea_dbt.relationships_procedure_occurrence_procedure_type_concept_id__concept_id__source_vocab_concept_.1183d8fa7c": [], "test.etl_synthea_dbt.relationships_procedure_occurrence_modifier_concept_id__concept_id__source_vocab_concept_.a73220f756": [], "test.etl_synthea_dbt.relationships_procedure_occurrence_provider_id__provider_id__ref_provider_.c610ac14c8": [], "test.etl_synthea_dbt.relationships_procedure_occurrence_visit_occurrence_id__visit_occurrence_id__ref_visit_occurrence_.57f0006526": [], "test.etl_synthea_dbt.relationships_procedure_occurrence_visit_detail_id__visit_detail_id__ref_visit_detail_.aad4bd00c4": [], "test.etl_synthea_dbt.relationships_procedure_occurrence_procedure_source_concept_id__concept_id__source_vocab_concept_.9c4ee06eea": [], "model.etl_synthea_dbt.person": ["model.etl_synthea_dbt.death", "model.etl_synthea_dbt.device_exposure", "model.etl_synthea_dbt.drug_exposure", "model.etl_synthea_dbt.measurement", "model.etl_synthea_dbt.observation", "model.etl_synthea_dbt.observation_period", "model.etl_synthea_dbt.procedure_occurrence", "model.etl_synthea_dbt.stg_condition_occurrence", "model.etl_synthea_dbt.visit_detail", "model.etl_synthea_dbt.visit_occurrence", "test.etl_synthea_dbt.not_null_person_year_of_birth.03ea95e466", "test.etl_synthea_dbt.relationships_condition_era_person_id__person_id__ref_person_.e1a24435e6", "test.etl_synthea_dbt.relationships_condition_occurrence_person_id__person_id__ref_person_.f3b716ae22", "test.etl_synthea_dbt.relationships_device_exposure_person_id__person_id__ref_person_.894d3b47b9", "test.etl_synthea_dbt.relationships_drug_era_person_id__person_id__ref_person_.a3cad7938a", "test.etl_synthea_dbt.relationships_drug_exposure_person_id__person_id__ref_person_.811ae7ceb8", "test.etl_synthea_dbt.relationships_measurement_person_id__person_id__ref_person_.b9201b5f92", "test.etl_synthea_dbt.relationships_observation_period_person_id__person_id__ref_person_.3e962f56b4", "test.etl_synthea_dbt.relationships_observation_person_id__person_id__ref_person_.e1ae5f3106", "test.etl_synthea_dbt.relationships_person_ethnicity_source_concept_id__concept_id__source_vocab_concept_.c1e57c3f06", "test.etl_synthea_dbt.relationships_person_gender_source_concept_id__concept_id__source_vocab_concept_.871883de16", "test.etl_synthea_dbt.relationships_person_race_source_concept_id__concept_id__source_vocab_concept_.cd59f4fb08", "test.etl_synthea_dbt.relationships_procedure_occurrence_person_id__person_id__ref_person_.901403d0b9", "test.etl_synthea_dbt.relationships_visit_detail_person_id__person_id__ref_person_.a572cd3588", "test.etl_synthea_dbt.relationships_visit_occurrence_person_id__person_id__ref_person_.0f12e4784d"], "test.etl_synthea_dbt.not_null_person_year_of_birth.03ea95e466": [], "test.etl_synthea_dbt.relationships_person_gender_source_concept_id__concept_id__source_vocab_concept_.871883de16": [], "test.etl_synthea_dbt.relationships_person_race_source_concept_id__concept_id__source_vocab_concept_.cd59f4fb08": [], "test.etl_synthea_dbt.relationships_person_ethnicity_source_concept_id__concept_id__source_vocab_concept_.c1e57c3f06": [], "model.etl_synthea_dbt.measurement": ["test.etl_synthea_dbt.not_null_measurement_measurement_concept_id.d63d0b284a", "test.etl_synthea_dbt.not_null_measurement_measurement_date.f0992e3082", "test.etl_synthea_dbt.not_null_measurement_measurement_id.80b56c4597", "test.etl_synthea_dbt.not_null_measurement_measurement_type_concept_id.d32d33e40c", "test.etl_synthea_dbt.not_null_measurement_person_id.7cf48be66f", "test.etl_synthea_dbt.relationships_measurement_measurement_concept_id__concept_id__source_vocab_concept_.0fc77178f1", "test.etl_synthea_dbt.relationships_measurement_measurement_source_concept_id__concept_id__source_vocab_concept_.438766d6d3", "test.etl_synthea_dbt.relationships_measurement_measurement_type_concept_id__concept_id__source_vocab_concept_.05f3b90252", "test.etl_synthea_dbt.relationships_measurement_operator_concept_id__concept_id__source_vocab_concept_.fd5f030894", "test.etl_synthea_dbt.relationships_measurement_person_id__person_id__ref_person_.b9201b5f92", "test.etl_synthea_dbt.relationships_measurement_provider_id__provider_id__ref_provider_.1f264234a4", "test.etl_synthea_dbt.relationships_measurement_unit_concept_id__concept_id__source_vocab_concept_.ddb1f5242b", "test.etl_synthea_dbt.relationships_measurement_value_as_concept_id__concept_id__source_vocab_concept_.85566490c4", "test.etl_synthea_dbt.relationships_measurement_visit_detail_id__visit_detail_id__ref_visit_detail_.d4200ff3e2", "test.etl_synthea_dbt.relationships_measurement_visit_occurrence_id__visit_occurrence_id__ref_visit_occurrence_.4fb747555a", "test.etl_synthea_dbt.unique_measurement_measurement_id.a3f1e8466d"], "test.etl_synthea_dbt.unique_measurement_measurement_id.a3f1e8466d": [], "test.etl_synthea_dbt.not_null_measurement_measurement_id.80b56c4597": [], "test.etl_synthea_dbt.not_null_measurement_person_id.7cf48be66f": [], "test.etl_synthea_dbt.relationships_measurement_person_id__person_id__ref_person_.b9201b5f92": [], "test.etl_synthea_dbt.not_null_measurement_measurement_concept_id.d63d0b284a": [], "test.etl_synthea_dbt.relationships_measurement_measurement_concept_id__concept_id__source_vocab_concept_.0fc77178f1": [], "test.etl_synthea_dbt.not_null_measurement_measurement_date.f0992e3082": [], "test.etl_synthea_dbt.not_null_measurement_measurement_type_concept_id.d32d33e40c": [], "test.etl_synthea_dbt.relationships_measurement_measurement_type_concept_id__concept_id__source_vocab_concept_.05f3b90252": [], "test.etl_synthea_dbt.relationships_measurement_operator_concept_id__concept_id__source_vocab_concept_.fd5f030894": [], "test.etl_synthea_dbt.relationships_measurement_value_as_concept_id__concept_id__source_vocab_concept_.85566490c4": [], "test.etl_synthea_dbt.relationships_measurement_unit_concept_id__concept_id__source_vocab_concept_.ddb1f5242b": [], "test.etl_synthea_dbt.relationships_measurement_provider_id__provider_id__ref_provider_.1f264234a4": [], "test.etl_synthea_dbt.relationships_measurement_visit_occurrence_id__visit_occurrence_id__ref_visit_occurrence_.4fb747555a": [], "test.etl_synthea_dbt.relationships_measurement_visit_detail_id__visit_detail_id__ref_visit_detail_.d4200ff3e2": [], "test.etl_synthea_dbt.relationships_measurement_measurement_source_concept_id__concept_id__source_vocab_concept_.438766d6d3": [], "model.etl_synthea_dbt.provider": ["model.etl_synthea_dbt.device_exposure", "model.etl_synthea_dbt.drug_exposure", "model.etl_synthea_dbt.measurement", "model.etl_synthea_dbt.observation", "model.etl_synthea_dbt.procedure_occurrence", "model.etl_synthea_dbt.visit_detail", "model.etl_synthea_dbt.visit_occurrence", "test.etl_synthea_dbt.not_null_provider_provider_id.3b46670424", "test.etl_synthea_dbt.relationships_condition_occurrence_provider_id__provider_id__ref_provider_.b75b05445b", "test.etl_synthea_dbt.relationships_device_exposure_provider_id__provider_id__ref_provider_.23736ac216", "test.etl_synthea_dbt.relationships_drug_exposure_provider_id__provider_id__ref_provider_.022f932272", "test.etl_synthea_dbt.relationships_measurement_provider_id__provider_id__ref_provider_.1f264234a4", "test.etl_synthea_dbt.relationships_observation_provider_id__provider_id__ref_provider_.531e2ef5ba", "test.etl_synthea_dbt.relationships_procedure_occurrence_provider_id__provider_id__ref_provider_.c610ac14c8", "test.etl_synthea_dbt.relationships_visit_detail_provider_id__provider_id__ref_provider_.7393623c5e", "test.etl_synthea_dbt.unique_provider_provider_id.b08928e435"], "test.etl_synthea_dbt.unique_provider_provider_id.b08928e435": [], "test.etl_synthea_dbt.not_null_provider_provider_id.3b46670424": [], "model.etl_synthea_dbt.visit_detail": ["test.etl_synthea_dbt.not_null_visit_detail_person_id.f40d29958e", "test.etl_synthea_dbt.not_null_visit_detail_visit_detail_concept_id.11df83fc24", "test.etl_synthea_dbt.not_null_visit_detail_visit_detail_end_date.fbf8c3e1c7", "test.etl_synthea_dbt.not_null_visit_detail_visit_detail_id.e5b9e9d282", "test.etl_synthea_dbt.not_null_visit_detail_visit_detail_start_date.cc3c8c51a7", "test.etl_synthea_dbt.not_null_visit_detail_visit_detail_type_concept_id.31ca3f2172", "test.etl_synthea_dbt.relationships_condition_occurrence_visit_detail_id__visit_detail_id__ref_visit_detail_.fc073d5579", "test.etl_synthea_dbt.relationships_device_exposure_visit_detail_id__visit_detail_id__ref_visit_detail_.c064b67cdb", "test.etl_synthea_dbt.relationships_drug_exposure_visit_detail_id__visit_detail_id__ref_visit_detail_.770b0c9b99", "test.etl_synthea_dbt.relationships_measurement_visit_detail_id__visit_detail_id__ref_visit_detail_.d4200ff3e2", "test.etl_synthea_dbt.relationships_observation_visit_detail_id__visit_detail_id__ref_visit_detail_.b9b6665fca", "test.etl_synthea_dbt.relationships_procedure_occurrence_visit_detail_id__visit_detail_id__ref_visit_detail_.aad4bd00c4", "test.etl_synthea_dbt.relationships_visit_detail_admitting_source_concept_id__concept_id__source_vocab_concept_.7433619460", "test.etl_synthea_dbt.relationships_visit_detail_discharge_to_concept_id__concept_id__source_vocab_concept_.dff6013593", "test.etl_synthea_dbt.relationships_visit_detail_parent_visit_detail_id__visit_detail_id__ref_visit_detail_.3f45535d08", "test.etl_synthea_dbt.relationships_visit_detail_person_id__person_id__ref_person_.a572cd3588", "test.etl_synthea_dbt.relationships_visit_detail_preceding_visit_detail_id__visit_detail_id__ref_visit_detail_.c17ffa5654", "test.etl_synthea_dbt.relationships_visit_detail_provider_id__provider_id__ref_provider_.7393623c5e", "test.etl_synthea_dbt.relationships_visit_detail_visit_detail_concept_id__concept_id__source_vocab_concept_.f6539e5bad", "test.etl_synthea_dbt.relationships_visit_detail_visit_detail_source_concept_id__concept_id__source_vocab_concept_.90e855b8ea", "test.etl_synthea_dbt.relationships_visit_detail_visit_detail_type_concept_id__concept_id__source_vocab_concept_.0564ecbaa6", "test.etl_synthea_dbt.unique_visit_detail_visit_detail_id.1f90f95601"], "test.etl_synthea_dbt.unique_visit_detail_visit_detail_id.1f90f95601": [], "test.etl_synthea_dbt.not_null_visit_detail_visit_detail_id.e5b9e9d282": [], "test.etl_synthea_dbt.not_null_visit_detail_person_id.f40d29958e": [], "test.etl_synthea_dbt.relationships_visit_detail_person_id__person_id__ref_person_.a572cd3588": [], "test.etl_synthea_dbt.not_null_visit_detail_visit_detail_concept_id.11df83fc24": [], "test.etl_synthea_dbt.relationships_visit_detail_visit_detail_concept_id__concept_id__source_vocab_concept_.f6539e5bad": [], "test.etl_synthea_dbt.not_null_visit_detail_visit_detail_start_date.cc3c8c51a7": [], "test.etl_synthea_dbt.not_null_visit_detail_visit_detail_end_date.fbf8c3e1c7": [], "test.etl_synthea_dbt.not_null_visit_detail_visit_detail_type_concept_id.31ca3f2172": [], "test.etl_synthea_dbt.relationships_visit_detail_visit_detail_type_concept_id__concept_id__source_vocab_concept_.0564ecbaa6": [], "test.etl_synthea_dbt.relationships_visit_detail_provider_id__provider_id__ref_provider_.7393623c5e": [], "test.etl_synthea_dbt.relationships_visit_detail_visit_detail_source_concept_id__concept_id__source_vocab_concept_.90e855b8ea": [], "test.etl_synthea_dbt.relationships_visit_detail_admitting_source_concept_id__concept_id__source_vocab_concept_.7433619460": [], "test.etl_synthea_dbt.relationships_visit_detail_discharge_to_concept_id__concept_id__source_vocab_concept_.dff6013593": [], "test.etl_synthea_dbt.relationships_visit_detail_preceding_visit_detail_id__visit_detail_id__ref_visit_detail_.c17ffa5654": [], "test.etl_synthea_dbt.relationships_visit_detail_parent_visit_detail_id__visit_detail_id__ref_visit_detail_.3f45535d08": [], "source.etl_synthea_dbt.synthea.patients": ["model.etl_synthea_dbt.person"], "source.etl_synthea_dbt.synthea.encounters": ["model.etl_synthea_dbt.all_visits", "model.etl_synthea_dbt.assign_all_visit_ids", "model.etl_synthea_dbt.death", "model.etl_synthea_dbt.device_exposure", "model.etl_synthea_dbt.drug_exposure", "model.etl_synthea_dbt.measurement", "model.etl_synthea_dbt.observation", "model.etl_synthea_dbt.observation_period", "model.etl_synthea_dbt.procedure_occurrence", "model.etl_synthea_dbt.visit_detail", "model.etl_synthea_dbt.visit_occurrence"], "source.etl_synthea_dbt.synthea.providers": ["model.etl_synthea_dbt.provider"], "source.etl_synthea_dbt.synthea.conditions": ["model.etl_synthea_dbt.observation", "model.etl_synthea_dbt.stg_condition_occurrence"], "source.etl_synthea_dbt.synthea.allergies": ["model.etl_synthea_dbt.observation"], "source.etl_synthea_dbt.synthea.observations": ["model.etl_synthea_dbt.measurement", "model.etl_synthea_dbt.observation"], "source.etl_synthea_dbt.synthea.procedures": ["model.etl_synthea_dbt.measurement", "model.etl_synthea_dbt.procedure_occurrence"], "source.etl_synthea_dbt.synthea.devices": ["model.etl_synthea_dbt.device_exposure"], "source.etl_synthea_dbt.synthea.medications": ["model.etl_synthea_dbt.drug_exposure"], "source.etl_synthea_dbt.synthea.immunizations": ["model.etl_synthea_dbt.drug_exposure"], "source.etl_synthea_dbt.vocab.concept": ["model.etl_synthea_dbt.person", "model.etl_synthea_dbt.source_to_source_vocab_map", "model.etl_synthea_dbt.source_to_standard_vocab_map", "model.etl_synthea_dbt.tmp_de", "model.etl_synthea_dbt.visit_occurrence", "test.etl_synthea_dbt.relationships_condition_era_condition_concept_id__concept_id__source_vocab_concept_.3e586bc15f", "test.etl_synthea_dbt.relationships_condition_occurrence_condition_concept_id__concept_id__source_vocab_concept_.d920e04abd", "test.etl_synthea_dbt.relationships_condition_occurrence_condition_source_concept_id__concept_id__source_vocab_concept_.1f641311f0", "test.etl_synthea_dbt.relationships_condition_occurrence_condition_status_source_value__concept_id__source_vocab_concept_.05a987e39c", "test.etl_synthea_dbt.relationships_condition_occurrence_condition_type_concept_id__concept_id__source_vocab_concept_.42f881e4a7", "test.etl_synthea_dbt.relationships_device_exposure_device_concept_id__concept_id__source_vocab_concept_.2545c0bdf6", "test.etl_synthea_dbt.relationships_device_exposure_device_source_concept_id__concept_id__source_vocab_concept_.d5577dca4c", "test.etl_synthea_dbt.relationships_device_exposure_device_type_concept_id__concept_id__source_vocab_concept_.e48c3d4798", "test.etl_synthea_dbt.relationships_device_exposure_unit_concept_id__concept_id__source_vocab_concept_.f445d0b9dd", "test.etl_synthea_dbt.relationships_device_exposure_unit_source_concept_id__concept_id__source_vocab_concept_.75df4b5f9f", "test.etl_synthea_dbt.relationships_drug_era_drug_concept_id__concept_id__source_vocab_concept_.91ffe5fbde", "test.etl_synthea_dbt.relationships_drug_exposure_drug_concept_id__concept_id__source_vocab_concept_.e3645bdcef", "test.etl_synthea_dbt.relationships_drug_exposure_drug_source_concept_id__concept_id__source_vocab_concept_.7dff7fc1d2", "test.etl_synthea_dbt.relationships_drug_exposure_drug_type_concept_id__concept_id__source_vocab_concept_.e775235ffd", "test.etl_synthea_dbt.relationships_drug_exposure_route_concept_id__concept_id__source_vocab_concept_.67158eaf74", "test.etl_synthea_dbt.relationships_measurement_measurement_concept_id__concept_id__source_vocab_concept_.0fc77178f1", "test.etl_synthea_dbt.relationships_measurement_measurement_source_concept_id__concept_id__source_vocab_concept_.438766d6d3", "test.etl_synthea_dbt.relationships_measurement_measurement_type_concept_id__concept_id__source_vocab_concept_.05f3b90252", "test.etl_synthea_dbt.relationships_measurement_operator_concept_id__concept_id__source_vocab_concept_.fd5f030894", "test.etl_synthea_dbt.relationships_measurement_unit_concept_id__concept_id__source_vocab_concept_.ddb1f5242b", "test.etl_synthea_dbt.relationships_measurement_value_as_concept_id__concept_id__source_vocab_concept_.85566490c4", "test.etl_synthea_dbt.relationships_observation_obs_event_field_concept_id__concept_id__source_vocab_concept_.1c7bfac6f6", "test.etl_synthea_dbt.relationships_observation_observation_concept_id__concept_id__source_vocab_concept_.d6cdb5cd5e", "test.etl_synthea_dbt.relationships_observation_observation_source_concept_id__concept_id__source_vocab_concept_.cc7ef061f3", "test.etl_synthea_dbt.relationships_observation_observation_type_concept_id__concept_id__source_vocab_concept_.d6bea239d2", "test.etl_synthea_dbt.relationships_observation_period_period_type_concept_id__concept_id__source_vocab_concept_.d636ade84f", "test.etl_synthea_dbt.relationships_observation_qualifier_concept_id__concept_id__source_vocab_concept_.2145be4c80", "test.etl_synthea_dbt.relationships_observation_unit_concept_id__concept_id__source_vocab_concept_.4d3119aedd", "test.etl_synthea_dbt.relationships_observation_value_as_concept_id__concept_id__source_vocab_concept_.14ce6d5d7c", "test.etl_synthea_dbt.relationships_person_ethnicity_source_concept_id__concept_id__source_vocab_concept_.c1e57c3f06", "test.etl_synthea_dbt.relationships_person_gender_source_concept_id__concept_id__source_vocab_concept_.871883de16", "test.etl_synthea_dbt.relationships_person_race_source_concept_id__concept_id__source_vocab_concept_.cd59f4fb08", "test.etl_synthea_dbt.relationships_procedure_occurrence_modifier_concept_id__concept_id__source_vocab_concept_.a73220f756", "test.etl_synthea_dbt.relationships_procedure_occurrence_procedure_concept_id__concept_id__source_vocab_concept_.1d83da347f", "test.etl_synthea_dbt.relationships_procedure_occurrence_procedure_source_concept_id__concept_id__source_vocab_concept_.9c4ee06eea", "test.etl_synthea_dbt.relationships_procedure_occurrence_procedure_type_concept_id__concept_id__source_vocab_concept_.1183d8fa7c", "test.etl_synthea_dbt.relationships_visit_detail_admitting_source_concept_id__concept_id__source_vocab_concept_.7433619460", "test.etl_synthea_dbt.relationships_visit_detail_discharge_to_concept_id__concept_id__source_vocab_concept_.dff6013593", "test.etl_synthea_dbt.relationships_visit_detail_visit_detail_concept_id__concept_id__source_vocab_concept_.f6539e5bad", "test.etl_synthea_dbt.relationships_visit_detail_visit_detail_source_concept_id__concept_id__source_vocab_concept_.90e855b8ea", "test.etl_synthea_dbt.relationships_visit_detail_visit_detail_type_concept_id__concept_id__source_vocab_concept_.0564ecbaa6", "test.etl_synthea_dbt.relationships_visit_occurrence_admitting_source_concept_id__concept_id__source_vocab_concept_.ee5b624dfe", "test.etl_synthea_dbt.relationships_visit_occurrence_discharge_to_concept_id__concept_id__source_vocab_concept_.2f4c28e6b1", "test.etl_synthea_dbt.relationships_visit_occurrence_visit_concept_id__concept_id__source_vocab_concept_.989bda5e7b", "test.etl_synthea_dbt.relationships_visit_occurrence_visit_type_concept_id__concept_id__source_vocab_concept_.de192d0d82"], "source.etl_synthea_dbt.vocab.concept_relationship": ["model.etl_synthea_dbt.source_to_standard_vocab_map"], "source.etl_synthea_dbt.vocab.concept_ancestor": ["model.etl_synthea_dbt.tmp_de"], "source.etl_synthea_dbt.vocab.source_to_concept_map": [], "source.etl_synthea_dbt.vocab.vocabulary": ["model.etl_synthea_dbt.cdm_source"]}, "group_map": {}, "semantic_models": {}}